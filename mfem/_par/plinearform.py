# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_plinearform')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_plinearform')
    _plinearform = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_plinearform', [dirname(__file__)])
        except ImportError:
            import _plinearform
            return _plinearform
        try:
            _mod = imp.load_module('_plinearform', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _plinearform = swig_import_helper()
    del swig_import_helper
else:
    import _plinearform
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


MFEM_VERSION = _plinearform.MFEM_VERSION
MFEM_VERSION_STRING = _plinearform.MFEM_VERSION_STRING
MFEM_VERSION_TYPE = _plinearform.MFEM_VERSION_TYPE
MFEM_VERSION_TYPE_RELEASE = _plinearform.MFEM_VERSION_TYPE_RELEASE
MFEM_VERSION_TYPE_DEVELOPMENT = _plinearform.MFEM_VERSION_TYPE_DEVELOPMENT
MFEM_VERSION_MAJOR = _plinearform.MFEM_VERSION_MAJOR
MFEM_VERSION_MINOR = _plinearform.MFEM_VERSION_MINOR
MFEM_VERSION_PATCH = _plinearform.MFEM_VERSION_PATCH
MFEM_TIMER_TYPE = _plinearform.MFEM_TIMER_TYPE
MFEM_HYPRE_VERSION = _plinearform.MFEM_HYPRE_VERSION
import mfem._par.linearform
import mfem._par.coefficient
import mfem._par.array
import mfem._par.ostream_typemap
import mfem._par.matrix
import mfem._par.vector
import mfem._par.operators
import mfem._par.intrules
import mfem._par.sparsemat
import mfem._par.densemat
import mfem._par.eltrans
import mfem._par.fe
import mfem._par.mesh
import mfem._par.ncmesh
import mfem._par.element
import mfem._par.geom
import mfem._par.table
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.fespace
import mfem._par.fe_coll
import mfem._par.lininteg
import mfem._par.handle
import mfem._par.hypre
import mfem._par.bilininteg
import mfem._par.pfespace
import mfem._par.pmesh
import mfem._par.pncmesh
import mfem._par.communication
import mfem._par.sets
import mfem._par.pgridfunc
class ParLinearForm(mfem._par.linearform.LinearForm):
    """Proxy of C++ mfem::ParLinearForm class."""

    __swig_setmethods__ = {}
    for _s in [mfem._par.linearform.LinearForm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParLinearForm, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._par.linearform.LinearForm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParLinearForm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::ParLinearForm self) -> ParLinearForm
        __init__(mfem::ParLinearForm self, ParFiniteElementSpace pf) -> ParLinearForm
        """
        this = _plinearform.new_ParLinearForm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ParFESpace(self):
        """ParFESpace(ParLinearForm self) -> ParFiniteElementSpace"""
        return _plinearform.ParLinearForm_ParFESpace(self)


    def Update(self, *args):
        """
        Update(ParLinearForm self, ParFiniteElementSpace pf=None)
        Update(ParLinearForm self)
        Update(ParLinearForm self, ParFiniteElementSpace pf, Vector v, int v_offset)
        """
        return _plinearform.ParLinearForm_Update(self, *args)


    def ParallelAssemble(self, *args):
        """
        ParallelAssemble(ParLinearForm self, Vector tv)
        ParallelAssemble(ParLinearForm self) -> HypreParVector
        """
        return _plinearform.ParLinearForm_ParallelAssemble(self, *args)


    def __call__(self, gf):
        """__call__(ParLinearForm self, ParGridFunction gf) -> double"""
        return _plinearform.ParLinearForm___call__(self, gf)

    __swig_destroy__ = _plinearform.delete_ParLinearForm
    __del__ = lambda self: None
ParLinearForm_swigregister = _plinearform.ParLinearForm_swigregister
ParLinearForm_swigregister(ParLinearForm)

# This file is compatible with both classic and new-style classes.


