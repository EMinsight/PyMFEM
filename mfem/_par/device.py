# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_device')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_device')
    _device = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_device', [dirname(__file__)])
        except ImportError:
            import _device
            return _device
        try:
            _mod = imp.load_module('_device', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _device = swig_import_helper()
    del swig_import_helper
else:
    import _device
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import mfem._par.mem_manager
class Backend(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Backend, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Backend, name)
    __repr__ = _swig_repr
    CPU = _device.Backend_CPU
    OMP = _device.Backend_OMP
    CUDA = _device.Backend_CUDA
    RAJA_CPU = _device.Backend_RAJA_CPU
    RAJA_OMP = _device.Backend_RAJA_OMP
    RAJA_CUDA = _device.Backend_RAJA_CUDA
    OCCA_CPU = _device.Backend_OCCA_CPU
    OCCA_OMP = _device.Backend_OCCA_OMP
    OCCA_CUDA = _device.Backend_OCCA_CUDA
    NUM_BACKENDS = _device.Backend_NUM_BACKENDS
    CPU_MASK = _device.Backend_CPU_MASK
    CUDA_MASK = _device.Backend_CUDA_MASK
    OMP_MASK = _device.Backend_OMP_MASK
    DEVICE_MASK = _device.Backend_DEVICE_MASK
    RAJA_MASK = _device.Backend_RAJA_MASK
    OCCA_MASK = _device.Backend_OCCA_MASK

    def __init__(self):
        this = _device.new_Backend()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _device.delete_Backend
    __del__ = lambda self: None
Backend_swigregister = _device.Backend_swigregister
Backend_swigregister(Backend)

class Device(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _device.new_Device(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _device.delete_Device
    __del__ = lambda self: None

    def Configure(self, device, dev=0):
        return _device.Device_Configure(self, device, dev)

    def Print(self, *args):
        return _device.Device_Print(self, *args)
    if _newclass:
        IsConfigured = staticmethod(_device.Device_IsConfigured)
    else:
        IsConfigured = _device.Device_IsConfigured
    if _newclass:
        IsAvailable = staticmethod(_device.Device_IsAvailable)
    else:
        IsAvailable = _device.Device_IsAvailable
    if _newclass:
        IsEnabled = staticmethod(_device.Device_IsEnabled)
    else:
        IsEnabled = _device.Device_IsEnabled
    if _newclass:
        IsDisabled = staticmethod(_device.Device_IsDisabled)
    else:
        IsDisabled = _device.Device_IsDisabled
    if _newclass:
        Allows = staticmethod(_device.Device_Allows)
    else:
        Allows = _device.Device_Allows
    if _newclass:
        GetMemoryType = staticmethod(_device.Device_GetMemoryType)
    else:
        GetMemoryType = _device.Device_GetMemoryType
    if _newclass:
        GetMemoryClass = staticmethod(_device.Device_GetMemoryClass)
    else:
        GetMemoryClass = _device.Device_GetMemoryClass
Device_swigregister = _device.Device_swigregister
Device_swigregister(Device)

def Device_IsConfigured():
    return _device.Device_IsConfigured()
Device_IsConfigured = _device.Device_IsConfigured

def Device_IsAvailable():
    return _device.Device_IsAvailable()
Device_IsAvailable = _device.Device_IsAvailable

def Device_IsEnabled():
    return _device.Device_IsEnabled()
Device_IsEnabled = _device.Device_IsEnabled

def Device_IsDisabled():
    return _device.Device_IsDisabled()
Device_IsDisabled = _device.Device_IsDisabled

def Device_Allows(b_mask):
    return _device.Device_Allows(b_mask)
Device_Allows = _device.Device_Allows

def Device_GetMemoryType():
    return _device.Device_GetMemoryType()
Device_GetMemoryType = _device.Device_GetMemoryType

def Device_GetMemoryClass():
    return _device.Device_GetMemoryClass()
Device_GetMemoryClass = _device.Device_GetMemoryClass

# This file is compatible with both classic and new-style classes.


