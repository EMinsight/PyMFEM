# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hypre')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hypre')
    _hypre = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hypre', [dirname(__file__)])
        except ImportError:
            import _hypre
            return _hypre
        try:
            _mod = imp.load_module('_hypre', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hypre = swig_import_helper()
    del swig_import_helper
else:
    import _hypre
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


MFEM_VERSION = _hypre.MFEM_VERSION
MFEM_VERSION_STRING = _hypre.MFEM_VERSION_STRING
MFEM_VERSION_TYPE = _hypre.MFEM_VERSION_TYPE
MFEM_VERSION_TYPE_RELEASE = _hypre.MFEM_VERSION_TYPE_RELEASE
MFEM_VERSION_TYPE_DEVELOPMENT = _hypre.MFEM_VERSION_TYPE_DEVELOPMENT
MFEM_VERSION_MAJOR = _hypre.MFEM_VERSION_MAJOR
MFEM_VERSION_MINOR = _hypre.MFEM_VERSION_MINOR
MFEM_VERSION_PATCH = _hypre.MFEM_VERSION_PATCH
MFEM_SOURCE_DIR = _hypre.MFEM_SOURCE_DIR
MFEM_INSTALL_DIR = _hypre.MFEM_INSTALL_DIR
MFEM_TIMER_TYPE = _hypre.MFEM_TIMER_TYPE
MFEM_HYPRE_VERSION = _hypre.MFEM_HYPRE_VERSION
import mfem._par.vector
import mfem._par.array
import mfem._par.ostream_typemap
import mfem._par.mem_manager
import mfem._par.sparsemat
import mfem._par.operators
import mfem._par.matrix
import mfem._par.densemat

def sizeof_HYPRE_Int():
    """sizeof_HYPRE_Int() -> int"""
    return _hypre.sizeof_HYPRE_Int()
class HypreParVector(mfem._par.vector.Vector):
    """Proxy of C++ mfem::HypreParVector class."""

    __swig_setmethods__ = {}
    for _s in [mfem._par.vector.Vector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreParVector, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._par.vector.Vector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HypreParVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::HypreParVector self, MPI_Comm comm, HYPRE_Int glob_size, HYPRE_Int * col) -> HypreParVector
        __init__(mfem::HypreParVector self, MPI_Comm comm, HYPRE_Int glob_size, double * _data) -> HypreParVector
        __init__(mfem::HypreParVector self, HypreParVector y) -> HypreParVector
        __init__(mfem::HypreParVector self, HypreParMatrix A, int transpose=0) -> HypreParVector
        __init__(mfem::HypreParVector self, HypreParMatrix A) -> HypreParVector
        __init__(mfem::HypreParVector self, HYPRE_ParVector y) -> HypreParVector
        __init__(mfem::HypreParVector self, mfem::ParFiniteElementSpace * pfes) -> HypreParVector
        """

        import numpy as np
        self._linked_array = None          
        if isinstance(args[-1], list):
            v = np.ascontiguousarray(args[-1][0])
            col = np.ascontiguousarray(args[-1][1])
            args = list(args[:-1])
            args.append([v, col])


        this = _hypre.new_HypreParVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        if isinstance(args[-1], list):
        # in this case, ParVector does not own the object
        # in order to prevent python from freeing the input
        # array, object is kept in ParVector
           self._linked_array = args[-1]




    def GetComm(self):
        """GetComm(HypreParVector self) -> MPI_Comm"""
        return _hypre.HypreParVector_GetComm(self)


    def Partitioning(self):
        """Partitioning(HypreParVector self) -> HYPRE_Int *"""
        return _hypre.HypreParVector_Partitioning(self)


    def GlobalSize(self):
        """GlobalSize(HypreParVector self) -> HYPRE_Int"""
        return _hypre.HypreParVector_GlobalSize(self)


    def StealParVector(self):
        """StealParVector(HypreParVector self) -> hypre_ParVector *"""
        return _hypre.HypreParVector_StealParVector(self)


    def SetOwnership(self, own):
        """SetOwnership(HypreParVector self, int own)"""
        return _hypre.HypreParVector_SetOwnership(self, own)


    def GetOwnership(self):
        """GetOwnership(HypreParVector self) -> int"""
        return _hypre.HypreParVector_GetOwnership(self)


    def GlobalVector(self):
        """GlobalVector(HypreParVector self) -> Vector"""
        return _hypre.HypreParVector_GlobalVector(self)


    def SetData(self, _data):
        """SetData(HypreParVector self, double * _data)"""
        return _hypre.HypreParVector_SetData(self, _data)


    def Randomize(self, seed):
        """Randomize(HypreParVector self, HYPRE_Int seed) -> HYPRE_Int"""
        return _hypre.HypreParVector_Randomize(self, seed)


    def Print(self, fname):
        """Print(HypreParVector self, char const * fname)"""
        return _hypre.HypreParVector_Print(self, fname)

    __swig_destroy__ = _hypre.delete_HypreParVector
    __del__ = lambda self: None

    def GetPartitioningArray(self):
        """GetPartitioningArray(HypreParVector self) -> PyObject *"""
        return _hypre.HypreParVector_GetPartitioningArray(self)

HypreParVector_swigregister = _hypre.HypreParVector_swigregister
HypreParVector_swigregister(HypreParVector)


def ParNormlp(vec, p, comm):
    """ParNormlp(Vector vec, double p, MPI_Comm comm) -> double"""
    return _hypre.ParNormlp(vec, p, comm)
class HypreParMatrix(mfem._par.operators.Operator):
    """Proxy of C++ mfem::HypreParMatrix class."""

    __swig_setmethods__ = {}
    for _s in [mfem._par.operators.Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreParMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._par.operators.Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HypreParMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::HypreParMatrix self) -> HypreParMatrix
        __init__(mfem::HypreParMatrix self, hypre_ParCSRMatrix * a, bool owner=True) -> HypreParMatrix
        __init__(mfem::HypreParMatrix self, hypre_ParCSRMatrix * a) -> HypreParMatrix
        __init__(mfem::HypreParMatrix self, MPI_Comm comm, HYPRE_Int glob_size, HYPRE_Int * row_starts, SparseMatrix diag) -> HypreParMatrix
        __init__(mfem::HypreParMatrix self, MPI_Comm comm, HYPRE_Int global_num_rows, HYPRE_Int global_num_cols, HYPRE_Int * row_starts, HYPRE_Int * col_starts, SparseMatrix diag) -> HypreParMatrix
        __init__(mfem::HypreParMatrix self, MPI_Comm comm, HYPRE_Int global_num_rows, HYPRE_Int global_num_cols, HYPRE_Int * row_starts, HYPRE_Int * col_starts, SparseMatrix diag, SparseMatrix offd, HYPRE_Int * cmap) -> HypreParMatrix
        __init__(mfem::HypreParMatrix self, MPI_Comm comm, HYPRE_Int global_num_rows, HYPRE_Int global_num_cols, HYPRE_Int * row_starts, HYPRE_Int * col_starts, HYPRE_Int * diag_i, HYPRE_Int * diag_j, double * diag_data, HYPRE_Int * offd_i, HYPRE_Int * offd_j, double * offd_data, HYPRE_Int offd_num_cols, HYPRE_Int * offd_col_map) -> HypreParMatrix
        __init__(mfem::HypreParMatrix self, MPI_Comm comm, HYPRE_Int * row_starts, HYPRE_Int * col_starts, SparseMatrix a) -> HypreParMatrix
        __init__(mfem::HypreParMatrix self, MPI_Comm comm, HYPRE_Int global_num_rows, HYPRE_Int global_num_cols, HYPRE_Int * row_starts, HYPRE_Int * col_starts, mfem::Table * diag) -> HypreParMatrix
        __init__(mfem::HypreParMatrix self, MPI_Comm comm, int id, int np, HYPRE_Int * row, HYPRE_Int * col, HYPRE_Int * i_diag, HYPRE_Int * j_diag, HYPRE_Int * i_offd, HYPRE_Int * j_offd, HYPRE_Int * cmap, HYPRE_Int cmap_size) -> HypreParMatrix
        __init__(mfem::HypreParMatrix self, MPI_Comm comm, int nrows, HYPRE_Int glob_nrows, HYPRE_Int glob_ncols, int * I) -> HypreParMatrix
        """
        this = _hypre.new_HypreParMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def MakeRef(self, master):
        """MakeRef(HypreParMatrix self, HypreParMatrix master)"""
        return _hypre.HypreParMatrix_MakeRef(self, master)


    def GetComm(self):
        """GetComm(HypreParMatrix self) -> MPI_Comm"""
        return _hypre.HypreParMatrix_GetComm(self)


    def StealData(self):
        """StealData(HypreParMatrix self) -> hypre_ParCSRMatrix *"""
        return _hypre.HypreParMatrix_StealData(self)


    def SetOwnerFlags(self, diag, offd, colmap):
        """SetOwnerFlags(HypreParMatrix self, signed char diag, signed char offd, signed char colmap)"""
        return _hypre.HypreParMatrix_SetOwnerFlags(self, diag, offd, colmap)


    def OwnsDiag(self):
        """OwnsDiag(HypreParMatrix self) -> signed char"""
        return _hypre.HypreParMatrix_OwnsDiag(self)


    def OwnsOffd(self):
        """OwnsOffd(HypreParMatrix self) -> signed char"""
        return _hypre.HypreParMatrix_OwnsOffd(self)


    def OwnsColMap(self):
        """OwnsColMap(HypreParMatrix self) -> signed char"""
        return _hypre.HypreParMatrix_OwnsColMap(self)


    def CopyRowStarts(self):
        """CopyRowStarts(HypreParMatrix self)"""
        return _hypre.HypreParMatrix_CopyRowStarts(self)


    def CopyColStarts(self):
        """CopyColStarts(HypreParMatrix self)"""
        return _hypre.HypreParMatrix_CopyColStarts(self)


    def NNZ(self):
        """NNZ(HypreParMatrix self) -> HYPRE_Int"""
        return _hypre.HypreParMatrix_NNZ(self)


    def RowPart(self, *args):
        """
        RowPart(HypreParMatrix self) -> HYPRE_Int
        RowPart(HypreParMatrix self) -> HYPRE_Int const *
        """
        return _hypre.HypreParMatrix_RowPart(self, *args)


    def ColPart(self, *args):
        """
        ColPart(HypreParMatrix self) -> HYPRE_Int
        ColPart(HypreParMatrix self) -> HYPRE_Int const *
        """
        return _hypre.HypreParMatrix_ColPart(self, *args)


    def M(self):
        """M(HypreParMatrix self) -> HYPRE_Int"""
        return _hypre.HypreParMatrix_M(self)


    def N(self):
        """N(HypreParMatrix self) -> HYPRE_Int"""
        return _hypre.HypreParMatrix_N(self)


    def GetDiag(self, *args):
        """
        GetDiag(HypreParMatrix self, Vector diag)
        GetDiag(HypreParMatrix self, SparseMatrix diag)
        """
        return _hypre.HypreParMatrix_GetDiag(self, *args)


    def GetOffd(self, offd, cmap):
        """GetOffd(HypreParMatrix self, SparseMatrix offd, HYPRE_Int *& cmap)"""
        return _hypre.HypreParMatrix_GetOffd(self, offd, cmap)


    def GetBlocks(self, blocks, interleaved_rows=False, interleaved_cols=False):
        """
        GetBlocks(HypreParMatrix self, mfem::Array2D< mfem::HypreParMatrix * > & blocks, bool interleaved_rows=False, bool interleaved_cols=False)
        GetBlocks(HypreParMatrix self, mfem::Array2D< mfem::HypreParMatrix * > & blocks, bool interleaved_rows=False)
        GetBlocks(HypreParMatrix self, mfem::Array2D< mfem::HypreParMatrix * > & blocks)
        """
        return _hypre.HypreParMatrix_GetBlocks(self, blocks, interleaved_rows, interleaved_cols)


    def Transpose(self):
        """Transpose(HypreParMatrix self) -> HypreParMatrix"""
        return _hypre.HypreParMatrix_Transpose(self)


    def GetNumRows(self):
        """GetNumRows(HypreParMatrix self) -> int"""
        return _hypre.HypreParMatrix_GetNumRows(self)


    def GetNumCols(self):
        """GetNumCols(HypreParMatrix self) -> int"""
        return _hypre.HypreParMatrix_GetNumCols(self)


    def GetGlobalNumRows(self):
        """GetGlobalNumRows(HypreParMatrix self) -> HYPRE_Int"""
        return _hypre.HypreParMatrix_GetGlobalNumRows(self)


    def GetGlobalNumCols(self):
        """GetGlobalNumCols(HypreParMatrix self) -> HYPRE_Int"""
        return _hypre.HypreParMatrix_GetGlobalNumCols(self)


    def GetRowStarts(self):
        """GetRowStarts(HypreParMatrix self) -> HYPRE_Int *"""
        return _hypre.HypreParMatrix_GetRowStarts(self)


    def GetColStarts(self):
        """GetColStarts(HypreParMatrix self) -> HYPRE_Int *"""
        return _hypre.HypreParMatrix_GetColStarts(self)


    def Mult(self, *args):
        """
        Mult(HypreParMatrix self, HypreParVector x, HypreParVector y, double alpha=1.0, double beta=0.0) -> HYPRE_Int
        Mult(HypreParMatrix self, HypreParVector x, HypreParVector y, double alpha=1.0) -> HYPRE_Int
        Mult(HypreParMatrix self, HypreParVector x, HypreParVector y) -> HYPRE_Int
        Mult(HypreParMatrix self, HYPRE_ParVector x, HYPRE_ParVector y, double alpha=1.0, double beta=0.0) -> HYPRE_Int
        Mult(HypreParMatrix self, HYPRE_ParVector x, HYPRE_ParVector y, double alpha=1.0) -> HYPRE_Int
        Mult(HypreParMatrix self, HYPRE_ParVector x, HYPRE_ParVector y) -> HYPRE_Int
        Mult(HypreParMatrix self, double a, Vector x, double b, Vector y)
        Mult(HypreParMatrix self, Vector x, Vector y)
        """
        return _hypre.HypreParMatrix_Mult(self, *args)


    def MultTranspose(self, *args):
        """
        MultTranspose(HypreParMatrix self, HypreParVector x, HypreParVector y, double alpha=1.0, double beta=0.0) -> HYPRE_Int
        MultTranspose(HypreParMatrix self, HypreParVector x, HypreParVector y, double alpha=1.0) -> HYPRE_Int
        MultTranspose(HypreParMatrix self, HypreParVector x, HypreParVector y) -> HYPRE_Int
        MultTranspose(HypreParMatrix self, double a, Vector x, double b, Vector y)
        MultTranspose(HypreParMatrix self, Vector x, Vector y)
        """
        return _hypre.HypreParMatrix_MultTranspose(self, *args)


    def BooleanMult(self, alpha, x, beta, y):
        """BooleanMult(HypreParMatrix self, int alpha, int const * x, int beta, int * y)"""
        return _hypre.HypreParMatrix_BooleanMult(self, alpha, x, beta, y)


    def BooleanMultTranspose(self, alpha, x, beta, y):
        """BooleanMultTranspose(HypreParMatrix self, int alpha, int const * x, int beta, int * y)"""
        return _hypre.HypreParMatrix_BooleanMultTranspose(self, alpha, x, beta, y)


    def __iadd__(self, B):
        """__iadd__(HypreParMatrix self, HypreParMatrix B) -> HypreParMatrix"""
        return _hypre.HypreParMatrix___iadd__(self, B)


    def Add(self, beta, B):
        """Add(HypreParMatrix self, double const beta, HypreParMatrix B) -> HypreParMatrix"""
        return _hypre.HypreParMatrix_Add(self, beta, B)


    def LeftDiagMult(self, D, row_starts=None):
        """
        LeftDiagMult(HypreParMatrix self, SparseMatrix D, HYPRE_Int * row_starts=None) -> HypreParMatrix
        LeftDiagMult(HypreParMatrix self, SparseMatrix D) -> HypreParMatrix
        """
        return _hypre.HypreParMatrix_LeftDiagMult(self, D, row_starts)


    def ScaleRows(self, s):
        """ScaleRows(HypreParMatrix self, Vector s)"""
        return _hypre.HypreParMatrix_ScaleRows(self, s)


    def InvScaleRows(self, s):
        """InvScaleRows(HypreParMatrix self, Vector s)"""
        return _hypre.HypreParMatrix_InvScaleRows(self, s)


    def __imul__(self, s):
        """__imul__(HypreParMatrix self, double s)"""
        val = _hypre.HypreParMatrix___imul__(self, s)

        #    val.thisown = 0
        return self


        return val


    def Threshold(self, threshold=0.0):
        """
        Threshold(HypreParMatrix self, double threshold=0.0)
        Threshold(HypreParMatrix self)
        """
        return _hypre.HypreParMatrix_Threshold(self, threshold)


    def EliminateZeroRows(self):
        """EliminateZeroRows(HypreParMatrix self)"""
        return _hypre.HypreParMatrix_EliminateZeroRows(self)


    def EliminateRowsCols(self, *args):
        """
        EliminateRowsCols(HypreParMatrix self, intArray rows_cols, HypreParVector X, HypreParVector B)
        EliminateRowsCols(HypreParMatrix self, intArray rows_cols) -> HypreParMatrix
        """
        return _hypre.HypreParMatrix_EliminateRowsCols(self, *args)


    def Print(self, fname, offi=0, offj=0):
        """
        Print(HypreParMatrix self, char const * fname, HYPRE_Int offi=0, HYPRE_Int offj=0)
        Print(HypreParMatrix self, char const * fname, HYPRE_Int offi=0)
        Print(HypreParMatrix self, char const * fname)
        """
        return _hypre.HypreParMatrix_Print(self, fname, offi, offj)


    def Read(self, comm, fname):
        """Read(HypreParMatrix self, MPI_Comm comm, char const * fname)"""
        return _hypre.HypreParMatrix_Read(self, comm, fname)


    def Read_IJMatrix(self, comm, fname):
        """Read_IJMatrix(HypreParMatrix self, MPI_Comm comm, char const * fname)"""
        return _hypre.HypreParMatrix_Read_IJMatrix(self, comm, fname)


    def PrintCommPkg(self, *args):
        """
        PrintCommPkg(HypreParMatrix self, std::ostream & out)
        PrintCommPkg(HypreParMatrix self)
        """
        return _hypre.HypreParMatrix_PrintCommPkg(self, *args)

    __swig_destroy__ = _hypre.delete_HypreParMatrix
    __del__ = lambda self: None

    def GetType(self):
        """GetType(HypreParMatrix self) -> mfem::Operator::Type"""
        return _hypre.HypreParMatrix_GetType(self)


    def GetRowPartArray(self):
        """GetRowPartArray(HypreParMatrix self) -> PyObject *"""
        return _hypre.HypreParMatrix_GetRowPartArray(self)


    def GetColPartArray(self):
        """GetColPartArray(HypreParMatrix self) -> PyObject *"""
        return _hypre.HypreParMatrix_GetColPartArray(self)


    def get_local_nnz(self):
        """get_local_nnz(HypreParMatrix self) -> HYPRE_Int"""
        return _hypre.HypreParMatrix_get_local_nnz(self)


    def get_local_true_nnz(self):
        """get_local_true_nnz(HypreParMatrix self) -> PyObject *"""
        return _hypre.HypreParMatrix_get_local_true_nnz(self)


    def GetCooDataArray(self, base_i=0, base_j=0):
        """
        GetCooDataArray(HypreParMatrix self, HYPRE_Int const base_i=0, HYPRE_Int const base_j=0) -> PyObject
        GetCooDataArray(HypreParMatrix self, HYPRE_Int const base_i=0) -> PyObject
        GetCooDataArray(HypreParMatrix self) -> PyObject *
        """
        return _hypre.HypreParMatrix_GetCooDataArray(self, base_i, base_j)

HypreParMatrix_swigregister = _hypre.HypreParMatrix_swigregister
HypreParMatrix_swigregister(HypreParMatrix)


def ParMult(A, B):
    """ParMult(HypreParMatrix A, HypreParMatrix B) -> HypreParMatrix"""
    return _hypre.ParMult(A, B)

def ParAdd(A, B):
    """ParAdd(HypreParMatrix A, HypreParMatrix B) -> HypreParMatrix"""
    return _hypre.ParAdd(A, B)

def EliminateBC(A, Ae, ess_dof_list, X, B):
    """EliminateBC(HypreParMatrix A, HypreParMatrix Ae, intArray ess_dof_list, Vector X, Vector B)"""
    return _hypre.EliminateBC(A, Ae, ess_dof_list, X, B)
class HypreSmoother(mfem._par.operators.Solver):
    """Proxy of C++ mfem::HypreSmoother class."""

    __swig_setmethods__ = {}
    for _s in [mfem._par.operators.Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreSmoother, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._par.operators.Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HypreSmoother, name)
    __repr__ = _swig_repr
    Jacobi = _hypre.HypreSmoother_Jacobi
    l1Jacobi = _hypre.HypreSmoother_l1Jacobi
    l1GS = _hypre.HypreSmoother_l1GS
    l1GStr = _hypre.HypreSmoother_l1GStr
    lumpedJacobi = _hypre.HypreSmoother_lumpedJacobi
    GS = _hypre.HypreSmoother_GS
    Chebyshev = _hypre.HypreSmoother_Chebyshev
    Taubin = _hypre.HypreSmoother_Taubin
    FIR = _hypre.HypreSmoother_FIR

    def __init__(self, *args):
        """
        __init__(mfem::HypreSmoother self) -> HypreSmoother
        __init__(mfem::HypreSmoother self, HypreParMatrix _A, int type, int relax_times=1, double relax_weight=1.0, double omega=1.0, int poly_order=2, double poly_fraction=.3) -> HypreSmoother
        __init__(mfem::HypreSmoother self, HypreParMatrix _A, int type, int relax_times=1, double relax_weight=1.0, double omega=1.0, int poly_order=2) -> HypreSmoother
        __init__(mfem::HypreSmoother self, HypreParMatrix _A, int type, int relax_times=1, double relax_weight=1.0, double omega=1.0) -> HypreSmoother
        __init__(mfem::HypreSmoother self, HypreParMatrix _A, int type, int relax_times=1, double relax_weight=1.0) -> HypreSmoother
        __init__(mfem::HypreSmoother self, HypreParMatrix _A, int type, int relax_times=1) -> HypreSmoother
        __init__(mfem::HypreSmoother self, HypreParMatrix _A, int type) -> HypreSmoother
        __init__(mfem::HypreSmoother self, HypreParMatrix _A) -> HypreSmoother
        """
        this = _hypre.new_HypreSmoother(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetType(self, type, relax_times=1):
        """
        SetType(HypreSmoother self, mfem::HypreSmoother::Type type, int relax_times=1)
        SetType(HypreSmoother self, mfem::HypreSmoother::Type type)
        """
        return _hypre.HypreSmoother_SetType(self, type, relax_times)


    def SetSOROptions(self, relax_weight, omega):
        """SetSOROptions(HypreSmoother self, double relax_weight, double omega)"""
        return _hypre.HypreSmoother_SetSOROptions(self, relax_weight, omega)


    def SetPolyOptions(self, poly_order, poly_fraction):
        """SetPolyOptions(HypreSmoother self, int poly_order, double poly_fraction)"""
        return _hypre.HypreSmoother_SetPolyOptions(self, poly_order, poly_fraction)


    def SetTaubinOptions(self, arg2, mu, iter):
        """SetTaubinOptions(HypreSmoother self, double arg2, double mu, int iter)"""
        return _hypre.HypreSmoother_SetTaubinOptions(self, arg2, mu, iter)


    def SetWindowByName(self, window_name):
        """SetWindowByName(HypreSmoother self, char const * window_name)"""
        return _hypre.HypreSmoother_SetWindowByName(self, window_name)


    def SetWindowParameters(self, a, b, c):
        """SetWindowParameters(HypreSmoother self, double a, double b, double c)"""
        return _hypre.HypreSmoother_SetWindowParameters(self, a, b, c)


    def SetFIRCoefficients(self, max_eig):
        """SetFIRCoefficients(HypreSmoother self, double max_eig)"""
        return _hypre.HypreSmoother_SetFIRCoefficients(self, max_eig)


    def SetPositiveDiagonal(self, pos=True):
        """
        SetPositiveDiagonal(HypreSmoother self, bool pos=True)
        SetPositiveDiagonal(HypreSmoother self)
        """
        return _hypre.HypreSmoother_SetPositiveDiagonal(self, pos)


    def SetOperator(self, op):
        """SetOperator(HypreSmoother self, Operator op)"""
        return _hypre.HypreSmoother_SetOperator(self, op)


    def Mult(self, *args):
        """
        Mult(HypreSmoother self, HypreParVector b, HypreParVector x)
        Mult(HypreSmoother self, Vector b, Vector x)
        """
        return _hypre.HypreSmoother_Mult(self, *args)

    __swig_destroy__ = _hypre.delete_HypreSmoother
    __del__ = lambda self: None
HypreSmoother_swigregister = _hypre.HypreSmoother_swigregister
HypreSmoother_swigregister(HypreSmoother)

class HypreSolver(mfem._par.operators.Solver):
    """Proxy of C++ mfem::HypreSolver class."""

    __swig_setmethods__ = {}
    for _s in [mfem._par.operators.Solver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._par.operators.Solver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HypreSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetupFcn(self):
        """SetupFcn(HypreSolver self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreSolver_SetupFcn(self)


    def SolveFcn(self):
        """SolveFcn(HypreSolver self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreSolver_SolveFcn(self)


    def SetOperator(self, op):
        """SetOperator(HypreSolver self, Operator op)"""
        return _hypre.HypreSolver_SetOperator(self, op)


    def Mult(self, *args):
        """
        Mult(HypreSolver self, HypreParVector b, HypreParVector x)
        Mult(HypreSolver self, Vector b, Vector x)
        """
        return _hypre.HypreSolver_Mult(self, *args)

    __swig_destroy__ = _hypre.delete_HypreSolver
    __del__ = lambda self: None
HypreSolver_swigregister = _hypre.HypreSolver_swigregister
HypreSolver_swigregister(HypreSolver)

class HyprePCG(HypreSolver):
    """Proxy of C++ mfem::HyprePCG class."""

    __swig_setmethods__ = {}
    for _s in [HypreSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HyprePCG, name, value)
    __swig_getmethods__ = {}
    for _s in [HypreSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HyprePCG, name)
    __repr__ = _swig_repr

    def __init__(self, _A):
        """__init__(mfem::HyprePCG self, HypreParMatrix _A) -> HyprePCG"""
        this = _hypre.new_HyprePCG(_A)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetTol(self, tol):
        """SetTol(HyprePCG self, double tol)"""
        return _hypre.HyprePCG_SetTol(self, tol)


    def SetMaxIter(self, max_iter):
        """SetMaxIter(HyprePCG self, int max_iter)"""
        return _hypre.HyprePCG_SetMaxIter(self, max_iter)


    def SetLogging(self, logging):
        """SetLogging(HyprePCG self, int logging)"""
        return _hypre.HyprePCG_SetLogging(self, logging)


    def SetPrintLevel(self, print_lvl):
        """SetPrintLevel(HyprePCG self, int print_lvl)"""
        return _hypre.HyprePCG_SetPrintLevel(self, print_lvl)


    def SetPreconditioner(self, precond):
        """SetPreconditioner(HyprePCG self, HypreSolver precond)"""
        return _hypre.HyprePCG_SetPreconditioner(self, precond)


    def SetResidualConvergenceOptions(self, res_frequency=-1, rtol=0.0):
        """
        SetResidualConvergenceOptions(HyprePCG self, int res_frequency=-1, double rtol=0.0)
        SetResidualConvergenceOptions(HyprePCG self, int res_frequency=-1)
        SetResidualConvergenceOptions(HyprePCG self)
        """
        return _hypre.HyprePCG_SetResidualConvergenceOptions(self, res_frequency, rtol)


    def SetZeroInintialIterate(self):
        """SetZeroInintialIterate(HyprePCG self)"""
        return _hypre.HyprePCG_SetZeroInintialIterate(self)


    def GetNumIterations(self, num_iterations):
        """GetNumIterations(HyprePCG self, int & num_iterations)"""
        return _hypre.HyprePCG_GetNumIterations(self, num_iterations)


    def SetupFcn(self):
        """SetupFcn(HyprePCG self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HyprePCG_SetupFcn(self)


    def SolveFcn(self):
        """SolveFcn(HyprePCG self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HyprePCG_SolveFcn(self)


    def Mult(self, *args):
        """
        Mult(HyprePCG self, HypreParVector b, HypreParVector x)
        Mult(HyprePCG self, Vector b, Vector x)
        """
        return _hypre.HyprePCG_Mult(self, *args)

    __swig_destroy__ = _hypre.delete_HyprePCG
    __del__ = lambda self: None
HyprePCG_swigregister = _hypre.HyprePCG_swigregister
HyprePCG_swigregister(HyprePCG)

class HypreGMRES(HypreSolver):
    """Proxy of C++ mfem::HypreGMRES class."""

    __swig_setmethods__ = {}
    for _s in [HypreSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreGMRES, name, value)
    __swig_getmethods__ = {}
    for _s in [HypreSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HypreGMRES, name)
    __repr__ = _swig_repr

    def __init__(self, _A):
        """__init__(mfem::HypreGMRES self, HypreParMatrix _A) -> HypreGMRES"""
        this = _hypre.new_HypreGMRES(_A)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetTol(self, tol):
        """SetTol(HypreGMRES self, double tol)"""
        return _hypre.HypreGMRES_SetTol(self, tol)


    def SetMaxIter(self, max_iter):
        """SetMaxIter(HypreGMRES self, int max_iter)"""
        return _hypre.HypreGMRES_SetMaxIter(self, max_iter)


    def SetKDim(self, dim):
        """SetKDim(HypreGMRES self, int dim)"""
        return _hypre.HypreGMRES_SetKDim(self, dim)


    def SetLogging(self, logging):
        """SetLogging(HypreGMRES self, int logging)"""
        return _hypre.HypreGMRES_SetLogging(self, logging)


    def SetPrintLevel(self, print_lvl):
        """SetPrintLevel(HypreGMRES self, int print_lvl)"""
        return _hypre.HypreGMRES_SetPrintLevel(self, print_lvl)


    def SetPreconditioner(self, precond):
        """SetPreconditioner(HypreGMRES self, HypreSolver precond)"""
        return _hypre.HypreGMRES_SetPreconditioner(self, precond)


    def SetZeroInintialIterate(self):
        """SetZeroInintialIterate(HypreGMRES self)"""
        return _hypre.HypreGMRES_SetZeroInintialIterate(self)


    def SetupFcn(self):
        """SetupFcn(HypreGMRES self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreGMRES_SetupFcn(self)


    def SolveFcn(self):
        """SolveFcn(HypreGMRES self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreGMRES_SolveFcn(self)


    def Mult(self, *args):
        """
        Mult(HypreGMRES self, HypreParVector b, HypreParVector x)
        Mult(HypreGMRES self, Vector b, Vector x)
        """
        return _hypre.HypreGMRES_Mult(self, *args)

    __swig_destroy__ = _hypre.delete_HypreGMRES
    __del__ = lambda self: None
HypreGMRES_swigregister = _hypre.HypreGMRES_swigregister
HypreGMRES_swigregister(HypreGMRES)

class HypreIdentity(HypreSolver):
    """Proxy of C++ mfem::HypreIdentity class."""

    __swig_setmethods__ = {}
    for _s in [HypreSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreIdentity, name, value)
    __swig_getmethods__ = {}
    for _s in [HypreSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HypreIdentity, name)
    __repr__ = _swig_repr

    def SetupFcn(self):
        """SetupFcn(HypreIdentity self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreIdentity_SetupFcn(self)


    def SolveFcn(self):
        """SolveFcn(HypreIdentity self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreIdentity_SolveFcn(self)

    __swig_destroy__ = _hypre.delete_HypreIdentity
    __del__ = lambda self: None

    def __init__(self):
        """__init__(mfem::HypreIdentity self) -> HypreIdentity"""
        this = _hypre.new_HypreIdentity()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
HypreIdentity_swigregister = _hypre.HypreIdentity_swigregister
HypreIdentity_swigregister(HypreIdentity)

class HypreDiagScale(HypreSolver):
    """Proxy of C++ mfem::HypreDiagScale class."""

    __swig_setmethods__ = {}
    for _s in [HypreSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreDiagScale, name, value)
    __swig_getmethods__ = {}
    for _s in [HypreSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HypreDiagScale, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::HypreDiagScale self) -> HypreDiagScale
        __init__(mfem::HypreDiagScale self, HypreParMatrix A) -> HypreDiagScale
        """
        this = _hypre.new_HypreDiagScale(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetupFcn(self):
        """SetupFcn(HypreDiagScale self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreDiagScale_SetupFcn(self)


    def SolveFcn(self):
        """SolveFcn(HypreDiagScale self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreDiagScale_SolveFcn(self)


    def GetData(self):
        """GetData(HypreDiagScale self) -> HypreParMatrix"""
        return _hypre.HypreDiagScale_GetData(self)

    __swig_destroy__ = _hypre.delete_HypreDiagScale
    __del__ = lambda self: None
HypreDiagScale_swigregister = _hypre.HypreDiagScale_swigregister
HypreDiagScale_swigregister(HypreDiagScale)

class HypreParaSails(HypreSolver):
    """Proxy of C++ mfem::HypreParaSails class."""

    __swig_setmethods__ = {}
    for _s in [HypreSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreParaSails, name, value)
    __swig_getmethods__ = {}
    for _s in [HypreSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HypreParaSails, name)
    __repr__ = _swig_repr

    def __init__(self, A):
        """__init__(mfem::HypreParaSails self, HypreParMatrix A) -> HypreParaSails"""
        this = _hypre.new_HypreParaSails(A)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetSymmetry(self, sym):
        """SetSymmetry(HypreParaSails self, int sym)"""
        return _hypre.HypreParaSails_SetSymmetry(self, sym)


    def SetupFcn(self):
        """SetupFcn(HypreParaSails self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreParaSails_SetupFcn(self)


    def SolveFcn(self):
        """SolveFcn(HypreParaSails self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreParaSails_SolveFcn(self)

    __swig_destroy__ = _hypre.delete_HypreParaSails
    __del__ = lambda self: None
HypreParaSails_swigregister = _hypre.HypreParaSails_swigregister
HypreParaSails_swigregister(HypreParaSails)

class HypreEuclid(HypreSolver):
    """Proxy of C++ mfem::HypreEuclid class."""

    __swig_setmethods__ = {}
    for _s in [HypreSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreEuclid, name, value)
    __swig_getmethods__ = {}
    for _s in [HypreSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HypreEuclid, name)
    __repr__ = _swig_repr

    def __init__(self, A):
        """__init__(mfem::HypreEuclid self, HypreParMatrix A) -> HypreEuclid"""
        this = _hypre.new_HypreEuclid(A)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetupFcn(self):
        """SetupFcn(HypreEuclid self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreEuclid_SetupFcn(self)


    def SolveFcn(self):
        """SolveFcn(HypreEuclid self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreEuclid_SolveFcn(self)

    __swig_destroy__ = _hypre.delete_HypreEuclid
    __del__ = lambda self: None
HypreEuclid_swigregister = _hypre.HypreEuclid_swigregister
HypreEuclid_swigregister(HypreEuclid)

class HypreBoomerAMG(HypreSolver):
    """Proxy of C++ mfem::HypreBoomerAMG class."""

    __swig_setmethods__ = {}
    for _s in [HypreSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreBoomerAMG, name, value)
    __swig_getmethods__ = {}
    for _s in [HypreSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HypreBoomerAMG, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::HypreBoomerAMG self) -> HypreBoomerAMG
        __init__(mfem::HypreBoomerAMG self, HypreParMatrix A) -> HypreBoomerAMG
        """
        this = _hypre.new_HypreBoomerAMG(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetOperator(self, op):
        """SetOperator(HypreBoomerAMG self, Operator op)"""
        return _hypre.HypreBoomerAMG_SetOperator(self, op)


    def SetSystemsOptions(self, dim):
        """SetSystemsOptions(HypreBoomerAMG self, int dim)"""
        return _hypre.HypreBoomerAMG_SetSystemsOptions(self, dim)


    def SetElasticityOptions(self, fespace):
        """SetElasticityOptions(HypreBoomerAMG self, mfem::ParFiniteElementSpace * fespace)"""
        return _hypre.HypreBoomerAMG_SetElasticityOptions(self, fespace)


    def SetPrintLevel(self, print_level):
        """SetPrintLevel(HypreBoomerAMG self, int print_level)"""
        return _hypre.HypreBoomerAMG_SetPrintLevel(self, print_level)


    def SetupFcn(self):
        """SetupFcn(HypreBoomerAMG self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreBoomerAMG_SetupFcn(self)


    def SolveFcn(self):
        """SolveFcn(HypreBoomerAMG self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreBoomerAMG_SolveFcn(self)

    __swig_destroy__ = _hypre.delete_HypreBoomerAMG
    __del__ = lambda self: None
HypreBoomerAMG_swigregister = _hypre.HypreBoomerAMG_swigregister
HypreBoomerAMG_swigregister(HypreBoomerAMG)

class HypreAMS(HypreSolver):
    """Proxy of C++ mfem::HypreAMS class."""

    __swig_setmethods__ = {}
    for _s in [HypreSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreAMS, name, value)
    __swig_getmethods__ = {}
    for _s in [HypreSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HypreAMS, name)
    __repr__ = _swig_repr

    def __init__(self, A, edge_fespace):
        """__init__(mfem::HypreAMS self, HypreParMatrix A, mfem::ParFiniteElementSpace * edge_fespace) -> HypreAMS"""
        this = _hypre.new_HypreAMS(A, edge_fespace)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetPrintLevel(self, print_lvl):
        """SetPrintLevel(HypreAMS self, int print_lvl)"""
        return _hypre.HypreAMS_SetPrintLevel(self, print_lvl)


    def SetSingularProblem(self):
        """SetSingularProblem(HypreAMS self)"""
        return _hypre.HypreAMS_SetSingularProblem(self)


    def SetupFcn(self):
        """SetupFcn(HypreAMS self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreAMS_SetupFcn(self)


    def SolveFcn(self):
        """SolveFcn(HypreAMS self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreAMS_SolveFcn(self)

    __swig_destroy__ = _hypre.delete_HypreAMS
    __del__ = lambda self: None
HypreAMS_swigregister = _hypre.HypreAMS_swigregister
HypreAMS_swigregister(HypreAMS)

class HypreADS(HypreSolver):
    """Proxy of C++ mfem::HypreADS class."""

    __swig_setmethods__ = {}
    for _s in [HypreSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreADS, name, value)
    __swig_getmethods__ = {}
    for _s in [HypreSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HypreADS, name)
    __repr__ = _swig_repr

    def __init__(self, A, face_fespace):
        """__init__(mfem::HypreADS self, HypreParMatrix A, mfem::ParFiniteElementSpace * face_fespace) -> HypreADS"""
        this = _hypre.new_HypreADS(A, face_fespace)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetPrintLevel(self, print_lvl):
        """SetPrintLevel(HypreADS self, int print_lvl)"""
        return _hypre.HypreADS_SetPrintLevel(self, print_lvl)


    def SetupFcn(self):
        """SetupFcn(HypreADS self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreADS_SetupFcn(self)


    def SolveFcn(self):
        """SolveFcn(HypreADS self) -> HYPRE_PtrToParSolverFcn"""
        return _hypre.HypreADS_SolveFcn(self)

    __swig_destroy__ = _hypre.delete_HypreADS
    __del__ = lambda self: None
HypreADS_swigregister = _hypre.HypreADS_swigregister
HypreADS_swigregister(HypreADS)

class HypreLOBPCG(_object):
    """Proxy of C++ mfem::HypreLOBPCG class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreLOBPCG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HypreLOBPCG, name)
    __repr__ = _swig_repr

    def __init__(self, comm):
        """__init__(mfem::HypreLOBPCG self, MPI_Comm comm) -> HypreLOBPCG"""
        this = _hypre.new_HypreLOBPCG(comm)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hypre.delete_HypreLOBPCG
    __del__ = lambda self: None

    def SetTol(self, tol):
        """SetTol(HypreLOBPCG self, double tol)"""
        return _hypre.HypreLOBPCG_SetTol(self, tol)


    def SetRelTol(self, rel_tol):
        """SetRelTol(HypreLOBPCG self, double rel_tol)"""
        return _hypre.HypreLOBPCG_SetRelTol(self, rel_tol)


    def SetMaxIter(self, max_iter):
        """SetMaxIter(HypreLOBPCG self, int max_iter)"""
        return _hypre.HypreLOBPCG_SetMaxIter(self, max_iter)


    def SetPrintLevel(self, logging):
        """SetPrintLevel(HypreLOBPCG self, int logging)"""
        return _hypre.HypreLOBPCG_SetPrintLevel(self, logging)


    def SetNumModes(self, num_eigs):
        """SetNumModes(HypreLOBPCG self, int num_eigs)"""
        return _hypre.HypreLOBPCG_SetNumModes(self, num_eigs)


    def SetPrecondUsageMode(self, pcg_mode):
        """SetPrecondUsageMode(HypreLOBPCG self, int pcg_mode)"""
        return _hypre.HypreLOBPCG_SetPrecondUsageMode(self, pcg_mode)


    def SetRandomSeed(self, s):
        """SetRandomSeed(HypreLOBPCG self, int s)"""
        return _hypre.HypreLOBPCG_SetRandomSeed(self, s)


    def SetInitialVectors(self, num_vecs, vecs):
        """SetInitialVectors(HypreLOBPCG self, int num_vecs, mfem::HypreParVector ** vecs)"""
        return _hypre.HypreLOBPCG_SetInitialVectors(self, num_vecs, vecs)


    def SetPreconditioner(self, precond):
        """SetPreconditioner(HypreLOBPCG self, Solver precond)"""
        return _hypre.HypreLOBPCG_SetPreconditioner(self, precond)


    def SetOperator(self, A):
        """SetOperator(HypreLOBPCG self, Operator A)"""
        return _hypre.HypreLOBPCG_SetOperator(self, A)


    def SetMassMatrix(self, M):
        """SetMassMatrix(HypreLOBPCG self, Operator M)"""
        return _hypre.HypreLOBPCG_SetMassMatrix(self, M)


    def SetSubSpaceProjector(self, proj):
        """SetSubSpaceProjector(HypreLOBPCG self, Operator proj)"""
        return _hypre.HypreLOBPCG_SetSubSpaceProjector(self, proj)


    def Solve(self):
        """Solve(HypreLOBPCG self)"""
        return _hypre.HypreLOBPCG_Solve(self)


    def GetEigenvalues(self, eigenvalues):
        """GetEigenvalues(HypreLOBPCG self, doubleArray eigenvalues)"""
        return _hypre.HypreLOBPCG_GetEigenvalues(self, eigenvalues)


    def GetEigenvector(self, i):
        """GetEigenvector(HypreLOBPCG self, unsigned int i) -> HypreParVector"""
        return _hypre.HypreLOBPCG_GetEigenvector(self, i)


    def StealEigenvectors(self):
        """StealEigenvectors(HypreLOBPCG self) -> mfem::HypreParVector **"""
        return _hypre.HypreLOBPCG_StealEigenvectors(self)

HypreLOBPCG_swigregister = _hypre.HypreLOBPCG_swigregister
HypreLOBPCG_swigregister(HypreLOBPCG)

class HypreAME(_object):
    """Proxy of C++ mfem::HypreAME class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HypreAME, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HypreAME, name)
    __repr__ = _swig_repr

    def __init__(self, comm):
        """__init__(mfem::HypreAME self, MPI_Comm comm) -> HypreAME"""
        this = _hypre.new_HypreAME(comm)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hypre.delete_HypreAME
    __del__ = lambda self: None

    def SetTol(self, tol):
        """SetTol(HypreAME self, double tol)"""
        return _hypre.HypreAME_SetTol(self, tol)


    def SetRelTol(self, rel_tol):
        """SetRelTol(HypreAME self, double rel_tol)"""
        return _hypre.HypreAME_SetRelTol(self, rel_tol)


    def SetMaxIter(self, max_iter):
        """SetMaxIter(HypreAME self, int max_iter)"""
        return _hypre.HypreAME_SetMaxIter(self, max_iter)


    def SetPrintLevel(self, logging):
        """SetPrintLevel(HypreAME self, int logging)"""
        return _hypre.HypreAME_SetPrintLevel(self, logging)


    def SetNumModes(self, num_eigs):
        """SetNumModes(HypreAME self, int num_eigs)"""
        return _hypre.HypreAME_SetNumModes(self, num_eigs)


    def SetPreconditioner(self, precond):
        """SetPreconditioner(HypreAME self, HypreSolver precond)"""
        return _hypre.HypreAME_SetPreconditioner(self, precond)


    def SetOperator(self, A):
        """SetOperator(HypreAME self, HypreParMatrix A)"""
        return _hypre.HypreAME_SetOperator(self, A)


    def SetMassMatrix(self, M):
        """SetMassMatrix(HypreAME self, HypreParMatrix M)"""
        return _hypre.HypreAME_SetMassMatrix(self, M)


    def Solve(self):
        """Solve(HypreAME self)"""
        return _hypre.HypreAME_Solve(self)


    def GetEigenvalues(self, eigenvalues):
        """GetEigenvalues(HypreAME self, doubleArray eigenvalues)"""
        return _hypre.HypreAME_GetEigenvalues(self, eigenvalues)


    def GetEigenvector(self, i):
        """GetEigenvector(HypreAME self, unsigned int i) -> HypreParVector"""
        return _hypre.HypreAME_GetEigenvector(self, i)


    def StealEigenvectors(self):
        """StealEigenvectors(HypreAME self) -> mfem::HypreParVector **"""
        return _hypre.HypreAME_StealEigenvectors(self)

HypreAME_swigregister = _hypre.HypreAME_swigregister
HypreAME_swigregister(HypreAME)


def parvec__repr__(self):
    return "HypreParVector ("+str(self.GlobalSize())+")"
def parvec__del__(self):
    if hasattr(self, "_linked_array"):
        self._linked_array = None
def parmat__repr__(self):
    shape = (self.GetGlobalNumRows(), self.GetGlobalNumCols())
    lshape = (self.GetNumRows(), self.GetNumCols())  	       
    return "HypreParMatrix "+str(shape)+"["+str(lshape)+"]"


HypreParVector.__repr__ = parvec__repr__
HypreParVector.__del__  = parvec__del__      
HypreParMatrix.__repr__ = parmat__repr__

# This file is compatible with both classic and new-style classes.


