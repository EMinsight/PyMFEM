# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nonlininteg')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nonlininteg')
    _nonlininteg = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nonlininteg', [dirname(__file__)])
        except ImportError:
            import _nonlininteg
            return _nonlininteg
        try:
            _mod = imp.load_module('_nonlininteg', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _nonlininteg = swig_import_helper()
    del swig_import_helper
else:
    import _nonlininteg
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import mfem._par.vector
import mfem._par.array
import mfem._par.ostream_typemap
import mfem._par.operators
import mfem._par.fespace
import mfem._par.coefficient
import mfem._par.matrix
import mfem._par.intrules
import mfem._par.sparsemat
import mfem._par.densemat
import mfem._par.eltrans
import mfem._par.fe
import mfem._par.mesh
import mfem._par.ncmesh
import mfem._par.element
import mfem._par.geom
import mfem._par.table
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.bilininteg
import mfem._par.fe_coll
import mfem._par.lininteg
import mfem._par.linearform
import mfem._par.handle
import mfem._par.hypre
class NonlinearFormIntegrator(_object):
    """Proxy of C++ mfem::NonlinearFormIntegrator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonlinearFormIntegrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NonlinearFormIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, ir=None):
        """
        __init__(mfem::NonlinearFormIntegrator self, IntegrationRule ir=None) -> NonlinearFormIntegrator
        __init__(mfem::NonlinearFormIntegrator self) -> NonlinearFormIntegrator
        """
        if self.__class__ == NonlinearFormIntegrator:
            _self = None
        else:
            _self = self
        this = _nonlininteg.new_NonlinearFormIntegrator(_self, ir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetIntRule(self, ir):
        """SetIntRule(NonlinearFormIntegrator self, IntegrationRule ir)"""
        return _nonlininteg.NonlinearFormIntegrator_SetIntRule(self, ir)


    def SetIntegrationRule(self, irule):
        """SetIntegrationRule(NonlinearFormIntegrator self, IntegrationRule irule)"""
        return _nonlininteg.NonlinearFormIntegrator_SetIntegrationRule(self, irule)


    def AssembleElementVector(self, el, Tr, elfun, elvect):
        """AssembleElementVector(NonlinearFormIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elfun, Vector elvect)"""
        return _nonlininteg.NonlinearFormIntegrator_AssembleElementVector(self, el, Tr, elfun, elvect)


    def AssembleFaceVector(self, el1, el2, Tr, elfun, elvect):
        """AssembleFaceVector(NonlinearFormIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elfun, Vector elvect)"""
        return _nonlininteg.NonlinearFormIntegrator_AssembleFaceVector(self, el1, el2, Tr, elfun, elvect)


    def AssembleElementGrad(self, el, Tr, elfun, elmat):
        """AssembleElementGrad(NonlinearFormIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elfun, DenseMatrix elmat)"""
        return _nonlininteg.NonlinearFormIntegrator_AssembleElementGrad(self, el, Tr, elfun, elmat)


    def AssembleFaceGrad(self, el1, el2, Tr, elfun, elmat):
        """AssembleFaceGrad(NonlinearFormIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elfun, DenseMatrix elmat)"""
        return _nonlininteg.NonlinearFormIntegrator_AssembleFaceGrad(self, el1, el2, Tr, elfun, elmat)


    def GetElementEnergy(self, el, Tr, elfun):
        """GetElementEnergy(NonlinearFormIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elfun) -> double"""
        return _nonlininteg.NonlinearFormIntegrator_GetElementEnergy(self, el, Tr, elfun)

    __swig_destroy__ = _nonlininteg.delete_NonlinearFormIntegrator
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _nonlininteg.disown_NonlinearFormIntegrator(self)
        return weakref_proxy(self)
NonlinearFormIntegrator_swigregister = _nonlininteg.NonlinearFormIntegrator_swigregister
NonlinearFormIntegrator_swigregister(NonlinearFormIntegrator)

class BlockNonlinearFormIntegrator(_object):
    """Proxy of C++ mfem::BlockNonlinearFormIntegrator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockNonlinearFormIntegrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockNonlinearFormIntegrator, name)
    __repr__ = _swig_repr

    def GetElementEnergy(self, el, Tr, elfun):
        """GetElementEnergy(BlockNonlinearFormIntegrator self, mfem::Array< mfem::FiniteElement const * > const & el, ElementTransformation Tr, mfem::Array< mfem::Vector const * > const & elfun) -> double"""
        return _nonlininteg.BlockNonlinearFormIntegrator_GetElementEnergy(self, el, Tr, elfun)


    def AssembleElementVector(self, el, Tr, elfun, elvec):
        """AssembleElementVector(BlockNonlinearFormIntegrator self, mfem::Array< mfem::FiniteElement const * > const & el, ElementTransformation Tr, mfem::Array< mfem::Vector const * > const & elfun, mfem::Array< mfem::Vector * > const & elvec)"""
        return _nonlininteg.BlockNonlinearFormIntegrator_AssembleElementVector(self, el, Tr, elfun, elvec)


    def AssembleFaceVector(self, el1, el2, Tr, elfun, elvect):
        """AssembleFaceVector(BlockNonlinearFormIntegrator self, mfem::Array< mfem::FiniteElement const * > const & el1, mfem::Array< mfem::FiniteElement const * > const & el2, FaceElementTransformations Tr, mfem::Array< mfem::Vector const * > const & elfun, mfem::Array< mfem::Vector * > const & elvect)"""
        return _nonlininteg.BlockNonlinearFormIntegrator_AssembleFaceVector(self, el1, el2, Tr, elfun, elvect)


    def AssembleElementGrad(self, el, Tr, elfun, elmats):
        """AssembleElementGrad(BlockNonlinearFormIntegrator self, mfem::Array< mfem::FiniteElement const * > const & el, ElementTransformation Tr, mfem::Array< mfem::Vector const * > const & elfun, mfem::Array2D< mfem::DenseMatrix * > const & elmats)"""
        return _nonlininteg.BlockNonlinearFormIntegrator_AssembleElementGrad(self, el, Tr, elfun, elmats)


    def AssembleFaceGrad(self, el1, el2, Tr, elfun, elmats):
        """AssembleFaceGrad(BlockNonlinearFormIntegrator self, mfem::Array< mfem::FiniteElement const * > const & el1, mfem::Array< mfem::FiniteElement const * > const & el2, FaceElementTransformations Tr, mfem::Array< mfem::Vector const * > const & elfun, mfem::Array2D< mfem::DenseMatrix * > const & elmats)"""
        return _nonlininteg.BlockNonlinearFormIntegrator_AssembleFaceGrad(self, el1, el2, Tr, elfun, elmats)

    __swig_destroy__ = _nonlininteg.delete_BlockNonlinearFormIntegrator
    __del__ = lambda self: None

    def __init__(self):
        """__init__(mfem::BlockNonlinearFormIntegrator self) -> BlockNonlinearFormIntegrator"""
        this = _nonlininteg.new_BlockNonlinearFormIntegrator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
BlockNonlinearFormIntegrator_swigregister = _nonlininteg.BlockNonlinearFormIntegrator_swigregister
BlockNonlinearFormIntegrator_swigregister(BlockNonlinearFormIntegrator)

class HyperelasticModel(_object):
    """Proxy of C++ mfem::HyperelasticModel class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HyperelasticModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HyperelasticModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nonlininteg.delete_HyperelasticModel
    __del__ = lambda self: None

    def SetTransformation(self, _Ttr):
        """SetTransformation(HyperelasticModel self, ElementTransformation _Ttr)"""
        return _nonlininteg.HyperelasticModel_SetTransformation(self, _Ttr)


    def EvalW(self, Jpt):
        """EvalW(HyperelasticModel self, DenseMatrix Jpt) -> double"""
        return _nonlininteg.HyperelasticModel_EvalW(self, Jpt)


    def EvalP(self, Jpt, P):
        """EvalP(HyperelasticModel self, DenseMatrix Jpt, DenseMatrix P)"""
        return _nonlininteg.HyperelasticModel_EvalP(self, Jpt, P)


    def AssembleH(self, Jpt, DS, weight, A):
        """AssembleH(HyperelasticModel self, DenseMatrix Jpt, DenseMatrix DS, double const weight, DenseMatrix A)"""
        return _nonlininteg.HyperelasticModel_AssembleH(self, Jpt, DS, weight, A)

HyperelasticModel_swigregister = _nonlininteg.HyperelasticModel_swigregister
HyperelasticModel_swigregister(HyperelasticModel)

class InverseHarmonicModel(HyperelasticModel):
    """Proxy of C++ mfem::InverseHarmonicModel class."""

    __swig_setmethods__ = {}
    for _s in [HyperelasticModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseHarmonicModel, name, value)
    __swig_getmethods__ = {}
    for _s in [HyperelasticModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseHarmonicModel, name)
    __repr__ = _swig_repr

    def EvalW(self, J):
        """EvalW(InverseHarmonicModel self, DenseMatrix J) -> double"""
        return _nonlininteg.InverseHarmonicModel_EvalW(self, J)


    def EvalP(self, J, P):
        """EvalP(InverseHarmonicModel self, DenseMatrix J, DenseMatrix P)"""
        return _nonlininteg.InverseHarmonicModel_EvalP(self, J, P)


    def AssembleH(self, J, DS, weight, A):
        """AssembleH(InverseHarmonicModel self, DenseMatrix J, DenseMatrix DS, double const weight, DenseMatrix A)"""
        return _nonlininteg.InverseHarmonicModel_AssembleH(self, J, DS, weight, A)


    def __init__(self):
        """__init__(mfem::InverseHarmonicModel self) -> InverseHarmonicModel"""
        this = _nonlininteg.new_InverseHarmonicModel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nonlininteg.delete_InverseHarmonicModel
    __del__ = lambda self: None
InverseHarmonicModel_swigregister = _nonlininteg.InverseHarmonicModel_swigregister
InverseHarmonicModel_swigregister(InverseHarmonicModel)

class NeoHookeanModel(HyperelasticModel):
    """Proxy of C++ mfem::NeoHookeanModel class."""

    __swig_setmethods__ = {}
    for _s in [HyperelasticModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeoHookeanModel, name, value)
    __swig_getmethods__ = {}
    for _s in [HyperelasticModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NeoHookeanModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::NeoHookeanModel self, double _mu, double _K, double _g=1.0) -> NeoHookeanModel
        __init__(mfem::NeoHookeanModel self, double _mu, double _K) -> NeoHookeanModel
        __init__(mfem::NeoHookeanModel self, Coefficient _mu, Coefficient _K, Coefficient _g=None) -> NeoHookeanModel
        __init__(mfem::NeoHookeanModel self, Coefficient _mu, Coefficient _K) -> NeoHookeanModel
        """
        this = _nonlininteg.new_NeoHookeanModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def EvalW(self, J):
        """EvalW(NeoHookeanModel self, DenseMatrix J) -> double"""
        return _nonlininteg.NeoHookeanModel_EvalW(self, J)


    def EvalP(self, J, P):
        """EvalP(NeoHookeanModel self, DenseMatrix J, DenseMatrix P)"""
        return _nonlininteg.NeoHookeanModel_EvalP(self, J, P)


    def AssembleH(self, J, DS, weight, A):
        """AssembleH(NeoHookeanModel self, DenseMatrix J, DenseMatrix DS, double const weight, DenseMatrix A)"""
        return _nonlininteg.NeoHookeanModel_AssembleH(self, J, DS, weight, A)

    __swig_destroy__ = _nonlininteg.delete_NeoHookeanModel
    __del__ = lambda self: None
NeoHookeanModel_swigregister = _nonlininteg.NeoHookeanModel_swigregister
NeoHookeanModel_swigregister(NeoHookeanModel)

class HyperelasticNLFIntegrator(NonlinearFormIntegrator):
    """Proxy of C++ mfem::HyperelasticNLFIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [NonlinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HyperelasticNLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [NonlinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HyperelasticNLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, m):
        """__init__(mfem::HyperelasticNLFIntegrator self, HyperelasticModel m) -> HyperelasticNLFIntegrator"""
        this = _nonlininteg.new_HyperelasticNLFIntegrator(m)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetElementEnergy(self, el, Ttr, elfun):
        """GetElementEnergy(HyperelasticNLFIntegrator self, FiniteElement el, ElementTransformation Ttr, Vector elfun) -> double"""
        return _nonlininteg.HyperelasticNLFIntegrator_GetElementEnergy(self, el, Ttr, elfun)


    def AssembleElementVector(self, el, Ttr, elfun, elvect):
        """AssembleElementVector(HyperelasticNLFIntegrator self, FiniteElement el, ElementTransformation Ttr, Vector elfun, Vector elvect)"""
        return _nonlininteg.HyperelasticNLFIntegrator_AssembleElementVector(self, el, Ttr, elfun, elvect)


    def AssembleElementGrad(self, el, Ttr, elfun, elmat):
        """AssembleElementGrad(HyperelasticNLFIntegrator self, FiniteElement el, ElementTransformation Ttr, Vector elfun, DenseMatrix elmat)"""
        return _nonlininteg.HyperelasticNLFIntegrator_AssembleElementGrad(self, el, Ttr, elfun, elmat)

    __swig_destroy__ = _nonlininteg.delete_HyperelasticNLFIntegrator
    __del__ = lambda self: None
HyperelasticNLFIntegrator_swigregister = _nonlininteg.HyperelasticNLFIntegrator_swigregister
HyperelasticNLFIntegrator_swigregister(HyperelasticNLFIntegrator)

class IncompressibleNeoHookeanIntegrator(BlockNonlinearFormIntegrator):
    """Proxy of C++ mfem::IncompressibleNeoHookeanIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BlockNonlinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncompressibleNeoHookeanIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BlockNonlinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncompressibleNeoHookeanIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, _mu):
        """__init__(mfem::IncompressibleNeoHookeanIntegrator self, Coefficient _mu) -> IncompressibleNeoHookeanIntegrator"""
        this = _nonlininteg.new_IncompressibleNeoHookeanIntegrator(_mu)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetElementEnergy(self, el, Tr, elfun):
        """GetElementEnergy(IncompressibleNeoHookeanIntegrator self, mfem::Array< mfem::FiniteElement const * > const & el, ElementTransformation Tr, mfem::Array< mfem::Vector const * > const & elfun) -> double"""
        return _nonlininteg.IncompressibleNeoHookeanIntegrator_GetElementEnergy(self, el, Tr, elfun)


    def AssembleElementVector(self, el, Tr, elfun, elvec):
        """AssembleElementVector(IncompressibleNeoHookeanIntegrator self, mfem::Array< mfem::FiniteElement const * > const & el, ElementTransformation Tr, mfem::Array< mfem::Vector const * > const & elfun, mfem::Array< mfem::Vector * > const & elvec)"""
        return _nonlininteg.IncompressibleNeoHookeanIntegrator_AssembleElementVector(self, el, Tr, elfun, elvec)


    def AssembleElementGrad(self, el, Tr, elfun, elmats):
        """AssembleElementGrad(IncompressibleNeoHookeanIntegrator self, mfem::Array< mfem::FiniteElement const * > const & el, ElementTransformation Tr, mfem::Array< mfem::Vector const * > const & elfun, mfem::Array2D< mfem::DenseMatrix * > const & elmats)"""
        return _nonlininteg.IncompressibleNeoHookeanIntegrator_AssembleElementGrad(self, el, Tr, elfun, elmats)

    __swig_destroy__ = _nonlininteg.delete_IncompressibleNeoHookeanIntegrator
    __del__ = lambda self: None
IncompressibleNeoHookeanIntegrator_swigregister = _nonlininteg.IncompressibleNeoHookeanIntegrator_swigregister
IncompressibleNeoHookeanIntegrator_swigregister(IncompressibleNeoHookeanIntegrator)

# This file is compatible with both classic and new-style classes.


