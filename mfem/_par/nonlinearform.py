# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nonlinearform')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nonlinearform')
    _nonlinearform = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nonlinearform', [dirname(__file__)])
        except ImportError:
            import _nonlinearform
            return _nonlinearform
        try:
            _mod = imp.load_module('_nonlinearform', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _nonlinearform = swig_import_helper()
    del swig_import_helper
else:
    import _nonlinearform
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import mfem._par.operators
import mfem._par.mem_manager
import mfem._par.vector
import mfem._par.array
import mfem._par.fespace
import mfem._par.coefficient
import mfem._par.matrix
import mfem._par.intrules
import mfem._par.sparsemat
import mfem._par.densemat
import mfem._par.eltrans
import mfem._par.fe
import mfem._par.geom
import mfem._par.mesh
import mfem._par.ncmesh
import mfem._par.element
import mfem._par.table
import mfem._par.hash
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.bilininteg
import mfem._par.fe_coll
import mfem._par.lininteg
import mfem._par.linearform
import mfem._par.handle
import mfem._par.hypre
import mfem._par.nonlininteg
class NonlinearForm(mfem._par.operators.Operator):
    """Proxy of C++ mfem::NonlinearForm class."""

    __swig_setmethods__ = {}
    for _s in [mfem._par.operators.Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonlinearForm, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._par.operators.Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NonlinearForm, name)
    __repr__ = _swig_repr

    def __init__(self, f):
        """__init__(mfem::NonlinearForm self, FiniteElementSpace f) -> NonlinearForm"""
        this = _nonlinearform.new_NonlinearForm(f)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FESpace(self, *args):
        """
        FESpace(NonlinearForm self) -> FiniteElementSpace
        FESpace(NonlinearForm self) -> FiniteElementSpace
        """
        return _nonlinearform.NonlinearForm_FESpace(self, *args)


    def AddDomainIntegrator(self, nlfi):
        """AddDomainIntegrator(NonlinearForm self, NonlinearFormIntegrator nlfi)"""

        #    if not hasattr(self, "_integrators"): self._integrators = []
        #    self._integrators.append(nlfi)
        nlfi.thisown=0 


        return _nonlinearform.NonlinearForm_AddDomainIntegrator(self, nlfi)


    def AddInteriorFaceIntegrator(self, nlfi):
        """AddInteriorFaceIntegrator(NonlinearForm self, NonlinearFormIntegrator nlfi)"""

        #    if not hasattr(self, "_integrators"): self._integrators = []
        #    self._integrators.append(nlfi)
        nlfi.thisown=0 


        return _nonlinearform.NonlinearForm_AddInteriorFaceIntegrator(self, nlfi)


    def AddBdrFaceIntegrator(self, *args):
        """
        AddBdrFaceIntegrator(NonlinearForm self, NonlinearFormIntegrator nlfi)
        AddBdrFaceIntegrator(NonlinearForm self, NonlinearFormIntegrator nfi, intArray bdr_marker)
        """

        #    if not hasattr(self, "_integrators"): self._integrators = []
        #    self._integrators.append(nlfi)
        nlfi = args[0]
        nlfi.thisown=0 


        return _nonlinearform.NonlinearForm_AddBdrFaceIntegrator(self, *args)


    def SetEssentialBC(self, bdr_attr_is_ess, rhs=None):
        """
        SetEssentialBC(NonlinearForm self, intArray bdr_attr_is_ess, Vector rhs=None)
        SetEssentialBC(NonlinearForm self, intArray bdr_attr_is_ess)
        """
        return _nonlinearform.NonlinearForm_SetEssentialBC(self, bdr_attr_is_ess, rhs)


    def SetEssentialVDofs(self, ess_vdofs_list):
        """SetEssentialVDofs(NonlinearForm self, intArray ess_vdofs_list)"""
        return _nonlinearform.NonlinearForm_SetEssentialVDofs(self, ess_vdofs_list)


    def SetEssentialTrueDofs(self, ess_tdof_list):
        """SetEssentialTrueDofs(NonlinearForm self, intArray ess_tdof_list)"""
        return _nonlinearform.NonlinearForm_SetEssentialTrueDofs(self, ess_tdof_list)


    def GetEssentialTrueDofs(self):
        """GetEssentialTrueDofs(NonlinearForm self) -> intArray"""
        return _nonlinearform.NonlinearForm_GetEssentialTrueDofs(self)


    def GetGridFunctionEnergy(self, x):
        """GetGridFunctionEnergy(NonlinearForm self, Vector x) -> double"""
        return _nonlinearform.NonlinearForm_GetGridFunctionEnergy(self, x)


    def GetEnergy(self, x):
        """GetEnergy(NonlinearForm self, Vector x) -> double"""
        return _nonlinearform.NonlinearForm_GetEnergy(self, x)


    def Mult(self, x, y):
        """Mult(NonlinearForm self, Vector x, Vector y)"""
        return _nonlinearform.NonlinearForm_Mult(self, x, y)


    def GetGradient(self, x):
        """GetGradient(NonlinearForm self, Vector x) -> Operator"""
        return _nonlinearform.NonlinearForm_GetGradient(self, x)


    def Update(self):
        """Update(NonlinearForm self)"""
        return _nonlinearform.NonlinearForm_Update(self)


    def GetProlongation(self):
        """GetProlongation(NonlinearForm self) -> Operator"""
        return _nonlinearform.NonlinearForm_GetProlongation(self)


    def GetRestriction(self):
        """GetRestriction(NonlinearForm self) -> Operator"""
        return _nonlinearform.NonlinearForm_GetRestriction(self)

    __swig_destroy__ = _nonlinearform.delete_NonlinearForm
    __del__ = lambda self: None

    def GetGradientMatrix(self, x):
        """GetGradientMatrix(NonlinearForm self, Vector x) -> SparseMatrix"""
        return _nonlinearform.NonlinearForm_GetGradientMatrix(self, x)

NonlinearForm_swigregister = _nonlinearform.NonlinearForm_swigregister
NonlinearForm_swigregister(NonlinearForm)

class BlockNonlinearForm(mfem._par.operators.Operator):
    """Proxy of C++ mfem::BlockNonlinearForm class."""

    __swig_setmethods__ = {}
    for _s in [mfem._par.operators.Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockNonlinearForm, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._par.operators.Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockNonlinearForm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::BlockNonlinearForm self) -> BlockNonlinearForm
        __init__(mfem::BlockNonlinearForm self, mfem::Array< mfem::FiniteElementSpace * > & f) -> BlockNonlinearForm
        """
        this = _nonlinearform.new_BlockNonlinearForm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FESpace(self, *args):
        """
        FESpace(BlockNonlinearForm self, int k) -> FiniteElementSpace
        FESpace(BlockNonlinearForm self, int k) -> FiniteElementSpace
        """
        return _nonlinearform.BlockNonlinearForm_FESpace(self, *args)


    def SetSpaces(self, f):
        """SetSpaces(BlockNonlinearForm self, mfem::Array< mfem::FiniteElementSpace * > & f)"""
        return _nonlinearform.BlockNonlinearForm_SetSpaces(self, f)


    def GetBlockOffsets(self):
        """GetBlockOffsets(BlockNonlinearForm self) -> intArray"""
        return _nonlinearform.BlockNonlinearForm_GetBlockOffsets(self)


    def GetBlockTrueOffsets(self):
        """GetBlockTrueOffsets(BlockNonlinearForm self) -> intArray"""
        return _nonlinearform.BlockNonlinearForm_GetBlockTrueOffsets(self)


    def AddDomainIntegrator(self, nlfi):
        """AddDomainIntegrator(BlockNonlinearForm self, BlockNonlinearFormIntegrator nlfi)"""

        #    if not hasattr(self, "_integrators"): self._integrators = []
        #    self._integrators.append(nlfi)
        nlfi.thisown=0 


        return _nonlinearform.BlockNonlinearForm_AddDomainIntegrator(self, nlfi)


    def AddInteriorFaceIntegrator(self, nlfi):
        """AddInteriorFaceIntegrator(BlockNonlinearForm self, BlockNonlinearFormIntegrator nlfi)"""

        #    if not hasattr(self, "_integrators"): self._integrators = []
        #    self._integrators.append(nlfi)
        nlfi.thisown=0 


        return _nonlinearform.BlockNonlinearForm_AddInteriorFaceIntegrator(self, nlfi)


    def AddBdrFaceIntegrator(self, *args):
        """
        AddBdrFaceIntegrator(BlockNonlinearForm self, BlockNonlinearFormIntegrator nlfi)
        AddBdrFaceIntegrator(BlockNonlinearForm self, BlockNonlinearFormIntegrator nlfi, intArray bdr_marker)
        """

        #    if not hasattr(self, "_integrators"): self._integrators = []
        #    self._integrators.append(nlfi)
        nlfi = args[0]
        nlfi.thisown=0 


        return _nonlinearform.BlockNonlinearForm_AddBdrFaceIntegrator(self, *args)


    def SetEssentialBC(self, bdr_attr_is_ess, rhs):
        """SetEssentialBC(BlockNonlinearForm self, mfem::Array< mfem::Array< int > * > const & bdr_attr_is_ess, mfem::Array< mfem::Vector * > & rhs)"""
        return _nonlinearform.BlockNonlinearForm_SetEssentialBC(self, bdr_attr_is_ess, rhs)


    def GetEnergy(self, x):
        """GetEnergy(BlockNonlinearForm self, Vector x) -> double"""
        return _nonlinearform.BlockNonlinearForm_GetEnergy(self, x)


    def Mult(self, x, y):
        """Mult(BlockNonlinearForm self, Vector x, Vector y)"""
        return _nonlinearform.BlockNonlinearForm_Mult(self, x, y)


    def GetGradient(self, x):
        """GetGradient(BlockNonlinearForm self, Vector x) -> Operator"""
        return _nonlinearform.BlockNonlinearForm_GetGradient(self, x)

    __swig_destroy__ = _nonlinearform.delete_BlockNonlinearForm
    __del__ = lambda self: None
BlockNonlinearForm_swigregister = _nonlinearform.BlockNonlinearForm_swigregister
BlockNonlinearForm_swigregister(BlockNonlinearForm)

# This file is compatible with both classic and new-style classes.


