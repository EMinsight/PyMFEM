# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pumi
else:
    import _pumi

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

MFEM_VERSION = _pumi.MFEM_VERSION

MFEM_VERSION_STRING = _pumi.MFEM_VERSION_STRING

MFEM_VERSION_TYPE = _pumi.MFEM_VERSION_TYPE

MFEM_VERSION_TYPE_RELEASE = _pumi.MFEM_VERSION_TYPE_RELEASE

MFEM_VERSION_TYPE_DEVELOPMENT = _pumi.MFEM_VERSION_TYPE_DEVELOPMENT

MFEM_VERSION_MAJOR = _pumi.MFEM_VERSION_MAJOR

MFEM_VERSION_MINOR = _pumi.MFEM_VERSION_MINOR

MFEM_VERSION_PATCH = _pumi.MFEM_VERSION_PATCH

MFEM_SOURCE_DIR = _pumi.MFEM_SOURCE_DIR

MFEM_INSTALL_DIR = _pumi.MFEM_INSTALL_DIR

MFEM_TIMER_TYPE = _pumi.MFEM_TIMER_TYPE

MFEM_HYPRE_VERSION = _pumi.MFEM_HYPRE_VERSION

class intp(object):
    r"""Proxy of C++ intp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(intp self) -> intp"""
        _pumi.intp_swiginit(self, _pumi.new_intp())
    __swig_destroy__ = _pumi.delete_intp

    def assign(self, value):
        r"""assign(intp self, int value)"""
        return _pumi.intp_assign(self, value)

    def value(self):
        r"""value(intp self) -> int"""
        return _pumi.intp_value(self)

    def cast(self):
        r"""cast(intp self) -> int *"""
        return _pumi.intp_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(int * t) -> intp"""
        return _pumi.intp_frompointer(t)

# Register intp in _pumi:
_pumi.intp_swigregister(intp)

def intp_frompointer(t):
    r"""intp_frompointer(int * t) -> intp"""
    return _pumi.intp_frompointer(t)

class doublep(object):
    r"""Proxy of C++ doublep class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(doublep self) -> doublep"""
        _pumi.doublep_swiginit(self, _pumi.new_doublep())
    __swig_destroy__ = _pumi.delete_doublep

    def assign(self, value):
        r"""assign(doublep self, double value)"""
        return _pumi.doublep_assign(self, value)

    def value(self):
        r"""value(doublep self) -> double"""
        return _pumi.doublep_value(self)

    def cast(self):
        r"""cast(doublep self) -> double *"""
        return _pumi.doublep_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(double * t) -> doublep"""
        return _pumi.doublep_frompointer(t)

# Register doublep in _pumi:
_pumi.doublep_swigregister(doublep)

def doublep_frompointer(t):
    r"""doublep_frompointer(double * t) -> doublep"""
    return _pumi.doublep_frompointer(t)

import mfem._par.pgridfunc
import mfem._par.pfespace
import mfem._par.operators
import mfem._par.mem_manager
import mfem._par.vector
import mfem._par.array
import mfem._par.fespace
import mfem._par.coefficient
import mfem._par.matrix
import mfem._par.intrules
import mfem._par.sparsemat
import mfem._par.densemat
import mfem._par.eltrans
import mfem._par.fe
import mfem._par.geom
import mfem._par.mesh
import mfem._par.ncmesh
import mfem._par.element
import mfem._par.table
import mfem._par.hash
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.bilininteg
import mfem._par.fe_coll
import mfem._par.lininteg
import mfem._par.linearform
import mfem._par.handle
import mfem._par.hypre
import mfem._par.pmesh
import mfem._par.pncmesh
import mfem._par.communication
import mfem._par.sets

def ParMesh2ParPumiMesh(pmesh):
    r"""ParMesh2ParPumiMesh(ParMesh pmesh) -> mfem::ParPumiMesh *"""
    return _pumi.ParMesh2ParPumiMesh(pmesh)


