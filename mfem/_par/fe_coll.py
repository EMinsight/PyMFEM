# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fe_coll')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fe_coll')
    _fe_coll = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fe_coll', [dirname(__file__)])
        except ImportError:
            import _fe_coll
            return _fe_coll
        try:
            _mod = imp.load_module('_fe_coll', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fe_coll = swig_import_helper()
    del swig_import_helper
else:
    import _fe_coll
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import mfem._par.mesh
import mfem._par.matrix
import mfem._par.vector
import mfem._par.array
import mfem._par.mem_manager
import mfem._par.operators
import mfem._par.ncmesh
import mfem._par.element
import mfem._par.densemat
import mfem._par.geom
import mfem._par.intrules
import mfem._par.table
import mfem._par.hash
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.coefficient
import mfem._par.sparsemat
import mfem._par.eltrans
import mfem._par.fe
import mfem._par.fespace
import mfem._par.lininteg
import mfem._par.handle
import mfem._par.hypre
import mfem._par.bilininteg
import mfem._par.linearform
class FiniteElementCollection(_object):
    """Proxy of C++ mfem::FiniteElementCollection class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiniteElementCollection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FiniteElementCollection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(FiniteElementCollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.FiniteElementCollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(FiniteElementCollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.FiniteElementCollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(FiniteElementCollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.FiniteElementCollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(FiniteElementCollection self) -> char const *"""
        return _fe_coll.FiniteElementCollection_Name(self)


    def HasFaceDofs(self, GeomType):
        """HasFaceDofs(FiniteElementCollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.FiniteElementCollection_HasFaceDofs(self, GeomType)


    def TraceFiniteElementForGeometry(self, GeomType):
        """TraceFiniteElementForGeometry(FiniteElementCollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.FiniteElementCollection_TraceFiniteElementForGeometry(self, GeomType)


    def GetTraceCollection(self):
        """GetTraceCollection(FiniteElementCollection self) -> FiniteElementCollection"""
        return _fe_coll.FiniteElementCollection_GetTraceCollection(self)

    __swig_destroy__ = _fe_coll.delete_FiniteElementCollection
    __del__ = lambda self: None

    def New(name):
        """New(char const * name) -> FiniteElementCollection"""
        return _fe_coll.FiniteElementCollection_New(name)

    New = staticmethod(New)

    def SubDofOrder(self, Geom, SDim, Info, dofs):
        """SubDofOrder(FiniteElementCollection self, mfem::Geometry::Type Geom, int SDim, int Info, intArray dofs)"""
        return _fe_coll.FiniteElementCollection_SubDofOrder(self, Geom, SDim, Info, dofs)

FiniteElementCollection_swigregister = _fe_coll.FiniteElementCollection_swigregister
FiniteElementCollection_swigregister(FiniteElementCollection)

def FiniteElementCollection_New(name):
    """FiniteElementCollection_New(char const * name) -> FiniteElementCollection"""
    return _fe_coll.FiniteElementCollection_New(name)

class H1_FECollection(FiniteElementCollection):
    """Proxy of C++ mfem::H1_FECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::H1_FECollection self, int const p, int const dim=3, int const btype) -> H1_FECollection
        __init__(mfem::H1_FECollection self, int const p, int const dim=3) -> H1_FECollection
        __init__(mfem::H1_FECollection self, int const p) -> H1_FECollection
        """
        this = _fe_coll.new_H1_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(H1_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.H1_FECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(H1_FECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.H1_FECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(H1_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.H1_FECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(H1_FECollection self) -> char const *"""
        return _fe_coll.H1_FECollection_Name(self)


    def GetTraceCollection(self):
        """GetTraceCollection(H1_FECollection self) -> FiniteElementCollection"""
        return _fe_coll.H1_FECollection_GetTraceCollection(self)


    def GetBasisType(self):
        """GetBasisType(H1_FECollection self) -> int"""
        return _fe_coll.H1_FECollection_GetBasisType(self)


    def GetDofMap(self, GeomType):
        """GetDofMap(H1_FECollection self, mfem::Geometry::Type GeomType) -> int const *"""
        return _fe_coll.H1_FECollection_GetDofMap(self, GeomType)

    __swig_destroy__ = _fe_coll.delete_H1_FECollection
    __del__ = lambda self: None
H1_FECollection_swigregister = _fe_coll.H1_FECollection_swigregister
H1_FECollection_swigregister(H1_FECollection)

class H1Pos_FECollection(H1_FECollection):
    """Proxy of C++ mfem::H1Pos_FECollection class."""

    __swig_setmethods__ = {}
    for _s in [H1_FECollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [H1_FECollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, p, dim=3):
        """
        __init__(mfem::H1Pos_FECollection self, int const p, int const dim=3) -> H1Pos_FECollection
        __init__(mfem::H1Pos_FECollection self, int const p) -> H1Pos_FECollection
        """
        this = _fe_coll.new_H1Pos_FECollection(p, dim)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe_coll.delete_H1Pos_FECollection
    __del__ = lambda self: None
H1Pos_FECollection_swigregister = _fe_coll.H1Pos_FECollection_swigregister
H1Pos_FECollection_swigregister(H1Pos_FECollection)

class H1_Trace_FECollection(H1_FECollection):
    """Proxy of C++ mfem::H1_Trace_FECollection class."""

    __swig_setmethods__ = {}
    for _s in [H1_FECollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_Trace_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [H1_FECollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_Trace_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::H1_Trace_FECollection self, int const p, int const dim, int const btype) -> H1_Trace_FECollection
        __init__(mfem::H1_Trace_FECollection self, int const p, int const dim) -> H1_Trace_FECollection
        """
        this = _fe_coll.new_H1_Trace_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe_coll.delete_H1_Trace_FECollection
    __del__ = lambda self: None
H1_Trace_FECollection_swigregister = _fe_coll.H1_Trace_FECollection_swigregister
H1_Trace_FECollection_swigregister(H1_Trace_FECollection)

class L2_FECollection(FiniteElementCollection):
    """Proxy of C++ mfem::L2_FECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::L2_FECollection self, int const p, int const dim, int const btype, int const map_type) -> L2_FECollection
        __init__(mfem::L2_FECollection self, int const p, int const dim, int const btype) -> L2_FECollection
        __init__(mfem::L2_FECollection self, int const p, int const dim) -> L2_FECollection
        """
        this = _fe_coll.new_L2_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(L2_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.L2_FECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(L2_FECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.L2_FECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(L2_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.L2_FECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(L2_FECollection self) -> char const *"""
        return _fe_coll.L2_FECollection_Name(self)


    def TraceFiniteElementForGeometry(self, GeomType):
        """TraceFiniteElementForGeometry(L2_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.L2_FECollection_TraceFiniteElementForGeometry(self, GeomType)


    def GetBasisType(self):
        """GetBasisType(L2_FECollection self) -> int"""
        return _fe_coll.L2_FECollection_GetBasisType(self)

    __swig_destroy__ = _fe_coll.delete_L2_FECollection
    __del__ = lambda self: None
L2_FECollection_swigregister = _fe_coll.L2_FECollection_swigregister
L2_FECollection_swigregister(L2_FECollection)

class RT_FECollection(FiniteElementCollection):
    """Proxy of C++ mfem::RT_FECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::RT_FECollection self, int const p, int const dim, int const cb_type, int const ob_type) -> RT_FECollection
        __init__(mfem::RT_FECollection self, int const p, int const dim, int const cb_type) -> RT_FECollection
        __init__(mfem::RT_FECollection self, int const p, int const dim) -> RT_FECollection
        """
        this = _fe_coll.new_RT_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(RT_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.RT_FECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(RT_FECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.RT_FECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(RT_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.RT_FECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(RT_FECollection self) -> char const *"""
        return _fe_coll.RT_FECollection_Name(self)


    def GetTraceCollection(self):
        """GetTraceCollection(RT_FECollection self) -> FiniteElementCollection"""
        return _fe_coll.RT_FECollection_GetTraceCollection(self)

    __swig_destroy__ = _fe_coll.delete_RT_FECollection
    __del__ = lambda self: None
RT_FECollection_swigregister = _fe_coll.RT_FECollection_swigregister
RT_FECollection_swigregister(RT_FECollection)

class RT_Trace_FECollection(RT_FECollection):
    """Proxy of C++ mfem::RT_Trace_FECollection class."""

    __swig_setmethods__ = {}
    for _s in [RT_FECollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT_Trace_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [RT_FECollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT_Trace_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::RT_Trace_FECollection self, int const p, int const dim, int const map_type, int const ob_type) -> RT_Trace_FECollection
        __init__(mfem::RT_Trace_FECollection self, int const p, int const dim, int const map_type) -> RT_Trace_FECollection
        __init__(mfem::RT_Trace_FECollection self, int const p, int const dim) -> RT_Trace_FECollection
        """
        this = _fe_coll.new_RT_Trace_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe_coll.delete_RT_Trace_FECollection
    __del__ = lambda self: None
RT_Trace_FECollection_swigregister = _fe_coll.RT_Trace_FECollection_swigregister
RT_Trace_FECollection_swigregister(RT_Trace_FECollection)

class DG_Interface_FECollection(RT_FECollection):
    """Proxy of C++ mfem::DG_Interface_FECollection class."""

    __swig_setmethods__ = {}
    for _s in [RT_FECollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DG_Interface_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [RT_FECollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DG_Interface_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::DG_Interface_FECollection self, int const p, int const dim, int const map_type, int const ob_type) -> DG_Interface_FECollection
        __init__(mfem::DG_Interface_FECollection self, int const p, int const dim, int const map_type) -> DG_Interface_FECollection
        __init__(mfem::DG_Interface_FECollection self, int const p, int const dim) -> DG_Interface_FECollection
        """
        this = _fe_coll.new_DG_Interface_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe_coll.delete_DG_Interface_FECollection
    __del__ = lambda self: None
DG_Interface_FECollection_swigregister = _fe_coll.DG_Interface_FECollection_swigregister
DG_Interface_FECollection_swigregister(DG_Interface_FECollection)

class ND_FECollection(FiniteElementCollection):
    """Proxy of C++ mfem::ND_FECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::ND_FECollection self, int const p, int const dim, int const cb_type, int const ob_type) -> ND_FECollection
        __init__(mfem::ND_FECollection self, int const p, int const dim, int const cb_type) -> ND_FECollection
        __init__(mfem::ND_FECollection self, int const p, int const dim) -> ND_FECollection
        """
        this = _fe_coll.new_ND_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(ND_FECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.ND_FECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(ND_FECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.ND_FECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(ND_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.ND_FECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(ND_FECollection self) -> char const *"""
        return _fe_coll.ND_FECollection_Name(self)


    def GetTraceCollection(self):
        """GetTraceCollection(ND_FECollection self) -> FiniteElementCollection"""
        return _fe_coll.ND_FECollection_GetTraceCollection(self)

    __swig_destroy__ = _fe_coll.delete_ND_FECollection
    __del__ = lambda self: None
ND_FECollection_swigregister = _fe_coll.ND_FECollection_swigregister
ND_FECollection_swigregister(ND_FECollection)

class ND_Trace_FECollection(ND_FECollection):
    """Proxy of C++ mfem::ND_Trace_FECollection class."""

    __swig_setmethods__ = {}
    for _s in [ND_FECollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_Trace_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [ND_FECollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_Trace_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::ND_Trace_FECollection self, int const p, int const dim, int const cb_type, int const ob_type) -> ND_Trace_FECollection
        __init__(mfem::ND_Trace_FECollection self, int const p, int const dim, int const cb_type) -> ND_Trace_FECollection
        __init__(mfem::ND_Trace_FECollection self, int const p, int const dim) -> ND_Trace_FECollection
        """
        this = _fe_coll.new_ND_Trace_FECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe_coll.delete_ND_Trace_FECollection
    __del__ = lambda self: None
ND_Trace_FECollection_swigregister = _fe_coll.ND_Trace_FECollection_swigregister
ND_Trace_FECollection_swigregister(ND_Trace_FECollection)

class NURBSFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::NURBSFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NURBSFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NURBSFECollection, name)
    __repr__ = _swig_repr
    VariableOrder = _fe_coll.NURBSFECollection_VariableOrder

    def __init__(self, *args):
        """
        __init__(mfem::NURBSFECollection self, int Order) -> NURBSFECollection
        __init__(mfem::NURBSFECollection self) -> NURBSFECollection
        """
        this = _fe_coll.new_NURBSFECollection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Reset(self):
        """Reset(NURBSFECollection self)"""
        return _fe_coll.NURBSFECollection_Reset(self)


    def GetOrder(self):
        """GetOrder(NURBSFECollection self) -> int"""
        return _fe_coll.NURBSFECollection_GetOrder(self)


    def SetOrder(self, Order):
        """SetOrder(NURBSFECollection self, int Order)"""
        return _fe_coll.NURBSFECollection_SetOrder(self, Order)


    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(NURBSFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.NURBSFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(NURBSFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.NURBSFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(NURBSFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.NURBSFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(NURBSFECollection self) -> char const *"""
        return _fe_coll.NURBSFECollection_Name(self)


    def GetTraceCollection(self):
        """GetTraceCollection(NURBSFECollection self) -> FiniteElementCollection"""
        return _fe_coll.NURBSFECollection_GetTraceCollection(self)

    __swig_destroy__ = _fe_coll.delete_NURBSFECollection
    __del__ = lambda self: None
NURBSFECollection_swigregister = _fe_coll.NURBSFECollection_swigregister
NURBSFECollection_swigregister(NURBSFECollection)

class LinearFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::LinearFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::LinearFECollection self) -> LinearFECollection"""
        this = _fe_coll.new_LinearFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(LinearFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.LinearFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(LinearFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.LinearFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(LinearFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.LinearFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(LinearFECollection self) -> char const *"""
        return _fe_coll.LinearFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_LinearFECollection
    __del__ = lambda self: None
LinearFECollection_swigregister = _fe_coll.LinearFECollection_swigregister
LinearFECollection_swigregister(LinearFECollection)

class QuadraticFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::QuadraticFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadraticFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadraticFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::QuadraticFECollection self) -> QuadraticFECollection"""
        this = _fe_coll.new_QuadraticFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(QuadraticFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.QuadraticFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(QuadraticFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.QuadraticFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(QuadraticFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.QuadraticFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(QuadraticFECollection self) -> char const *"""
        return _fe_coll.QuadraticFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_QuadraticFECollection
    __del__ = lambda self: None
QuadraticFECollection_swigregister = _fe_coll.QuadraticFECollection_swigregister
QuadraticFECollection_swigregister(QuadraticFECollection)

class QuadraticPosFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::QuadraticPosFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadraticPosFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadraticPosFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::QuadraticPosFECollection self) -> QuadraticPosFECollection"""
        this = _fe_coll.new_QuadraticPosFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(QuadraticPosFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.QuadraticPosFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(QuadraticPosFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.QuadraticPosFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(QuadraticPosFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.QuadraticPosFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(QuadraticPosFECollection self) -> char const *"""
        return _fe_coll.QuadraticPosFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_QuadraticPosFECollection
    __del__ = lambda self: None
QuadraticPosFECollection_swigregister = _fe_coll.QuadraticPosFECollection_swigregister
QuadraticPosFECollection_swigregister(QuadraticPosFECollection)

class CubicFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::CubicFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CubicFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::CubicFECollection self) -> CubicFECollection"""
        this = _fe_coll.new_CubicFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(CubicFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.CubicFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(CubicFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.CubicFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(CubicFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.CubicFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(CubicFECollection self) -> char const *"""
        return _fe_coll.CubicFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_CubicFECollection
    __del__ = lambda self: None
CubicFECollection_swigregister = _fe_coll.CubicFECollection_swigregister
CubicFECollection_swigregister(CubicFECollection)

class CrouzeixRaviartFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::CrouzeixRaviartFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrouzeixRaviartFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrouzeixRaviartFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::CrouzeixRaviartFECollection self) -> CrouzeixRaviartFECollection"""
        this = _fe_coll.new_CrouzeixRaviartFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(CrouzeixRaviartFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.CrouzeixRaviartFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(CrouzeixRaviartFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.CrouzeixRaviartFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(CrouzeixRaviartFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.CrouzeixRaviartFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(CrouzeixRaviartFECollection self) -> char const *"""
        return _fe_coll.CrouzeixRaviartFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_CrouzeixRaviartFECollection
    __del__ = lambda self: None
CrouzeixRaviartFECollection_swigregister = _fe_coll.CrouzeixRaviartFECollection_swigregister
CrouzeixRaviartFECollection_swigregister(CrouzeixRaviartFECollection)

class LinearNonConf3DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::LinearNonConf3DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearNonConf3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearNonConf3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::LinearNonConf3DFECollection self) -> LinearNonConf3DFECollection"""
        this = _fe_coll.new_LinearNonConf3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(LinearNonConf3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.LinearNonConf3DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(LinearNonConf3DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.LinearNonConf3DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(LinearNonConf3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.LinearNonConf3DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(LinearNonConf3DFECollection self) -> char const *"""
        return _fe_coll.LinearNonConf3DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_LinearNonConf3DFECollection
    __del__ = lambda self: None
LinearNonConf3DFECollection_swigregister = _fe_coll.LinearNonConf3DFECollection_swigregister
LinearNonConf3DFECollection_swigregister(LinearNonConf3DFECollection)

class RT0_2DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::RT0_2DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT0_2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT0_2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT0_2DFECollection self) -> RT0_2DFECollection"""
        this = _fe_coll.new_RT0_2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(RT0_2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.RT0_2DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(RT0_2DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.RT0_2DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(RT0_2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.RT0_2DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(RT0_2DFECollection self) -> char const *"""
        return _fe_coll.RT0_2DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_RT0_2DFECollection
    __del__ = lambda self: None
RT0_2DFECollection_swigregister = _fe_coll.RT0_2DFECollection_swigregister
RT0_2DFECollection_swigregister(RT0_2DFECollection)

class RT1_2DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::RT1_2DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT1_2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT1_2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT1_2DFECollection self) -> RT1_2DFECollection"""
        this = _fe_coll.new_RT1_2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(RT1_2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.RT1_2DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(RT1_2DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.RT1_2DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(RT1_2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.RT1_2DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(RT1_2DFECollection self) -> char const *"""
        return _fe_coll.RT1_2DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_RT1_2DFECollection
    __del__ = lambda self: None
RT1_2DFECollection_swigregister = _fe_coll.RT1_2DFECollection_swigregister
RT1_2DFECollection_swigregister(RT1_2DFECollection)

class RT2_2DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::RT2_2DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT2_2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT2_2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT2_2DFECollection self) -> RT2_2DFECollection"""
        this = _fe_coll.new_RT2_2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(RT2_2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.RT2_2DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(RT2_2DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.RT2_2DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(RT2_2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.RT2_2DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(RT2_2DFECollection self) -> char const *"""
        return _fe_coll.RT2_2DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_RT2_2DFECollection
    __del__ = lambda self: None
RT2_2DFECollection_swigregister = _fe_coll.RT2_2DFECollection_swigregister
RT2_2DFECollection_swigregister(RT2_2DFECollection)

class Const2DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::Const2DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Const2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Const2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Const2DFECollection self) -> Const2DFECollection"""
        this = _fe_coll.new_Const2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(Const2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.Const2DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(Const2DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.Const2DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(Const2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.Const2DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(Const2DFECollection self) -> char const *"""
        return _fe_coll.Const2DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_Const2DFECollection
    __del__ = lambda self: None
Const2DFECollection_swigregister = _fe_coll.Const2DFECollection_swigregister
Const2DFECollection_swigregister(Const2DFECollection)

class LinearDiscont2DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::LinearDiscont2DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearDiscont2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearDiscont2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::LinearDiscont2DFECollection self) -> LinearDiscont2DFECollection"""
        this = _fe_coll.new_LinearDiscont2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(LinearDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.LinearDiscont2DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(LinearDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.LinearDiscont2DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(LinearDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.LinearDiscont2DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(LinearDiscont2DFECollection self) -> char const *"""
        return _fe_coll.LinearDiscont2DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_LinearDiscont2DFECollection
    __del__ = lambda self: None
LinearDiscont2DFECollection_swigregister = _fe_coll.LinearDiscont2DFECollection_swigregister
LinearDiscont2DFECollection_swigregister(LinearDiscont2DFECollection)

class GaussLinearDiscont2DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::GaussLinearDiscont2DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussLinearDiscont2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussLinearDiscont2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::GaussLinearDiscont2DFECollection self) -> GaussLinearDiscont2DFECollection"""
        this = _fe_coll.new_GaussLinearDiscont2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(GaussLinearDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.GaussLinearDiscont2DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(GaussLinearDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.GaussLinearDiscont2DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(GaussLinearDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.GaussLinearDiscont2DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(GaussLinearDiscont2DFECollection self) -> char const *"""
        return _fe_coll.GaussLinearDiscont2DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_GaussLinearDiscont2DFECollection
    __del__ = lambda self: None
GaussLinearDiscont2DFECollection_swigregister = _fe_coll.GaussLinearDiscont2DFECollection_swigregister
GaussLinearDiscont2DFECollection_swigregister(GaussLinearDiscont2DFECollection)

class P1OnQuadFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::P1OnQuadFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P1OnQuadFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P1OnQuadFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::P1OnQuadFECollection self) -> P1OnQuadFECollection"""
        this = _fe_coll.new_P1OnQuadFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(P1OnQuadFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.P1OnQuadFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(P1OnQuadFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.P1OnQuadFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(P1OnQuadFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.P1OnQuadFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(P1OnQuadFECollection self) -> char const *"""
        return _fe_coll.P1OnQuadFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_P1OnQuadFECollection
    __del__ = lambda self: None
P1OnQuadFECollection_swigregister = _fe_coll.P1OnQuadFECollection_swigregister
P1OnQuadFECollection_swigregister(P1OnQuadFECollection)

class QuadraticDiscont2DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::QuadraticDiscont2DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadraticDiscont2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadraticDiscont2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::QuadraticDiscont2DFECollection self) -> QuadraticDiscont2DFECollection"""
        this = _fe_coll.new_QuadraticDiscont2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(QuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.QuadraticDiscont2DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(QuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.QuadraticDiscont2DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(QuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.QuadraticDiscont2DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(QuadraticDiscont2DFECollection self) -> char const *"""
        return _fe_coll.QuadraticDiscont2DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_QuadraticDiscont2DFECollection
    __del__ = lambda self: None
QuadraticDiscont2DFECollection_swigregister = _fe_coll.QuadraticDiscont2DFECollection_swigregister
QuadraticDiscont2DFECollection_swigregister(QuadraticDiscont2DFECollection)

class QuadraticPosDiscont2DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::QuadraticPosDiscont2DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadraticPosDiscont2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadraticPosDiscont2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::QuadraticPosDiscont2DFECollection self) -> QuadraticPosDiscont2DFECollection"""
        this = _fe_coll.new_QuadraticPosDiscont2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(QuadraticPosDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.QuadraticPosDiscont2DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(QuadraticPosDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.QuadraticPosDiscont2DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(QuadraticPosDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.QuadraticPosDiscont2DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(QuadraticPosDiscont2DFECollection self) -> char const *"""
        return _fe_coll.QuadraticPosDiscont2DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_QuadraticPosDiscont2DFECollection
    __del__ = lambda self: None
QuadraticPosDiscont2DFECollection_swigregister = _fe_coll.QuadraticPosDiscont2DFECollection_swigregister
QuadraticPosDiscont2DFECollection_swigregister(QuadraticPosDiscont2DFECollection)

class GaussQuadraticDiscont2DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::GaussQuadraticDiscont2DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussQuadraticDiscont2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussQuadraticDiscont2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::GaussQuadraticDiscont2DFECollection self) -> GaussQuadraticDiscont2DFECollection"""
        this = _fe_coll.new_GaussQuadraticDiscont2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(GaussQuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.GaussQuadraticDiscont2DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(GaussQuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.GaussQuadraticDiscont2DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(GaussQuadraticDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.GaussQuadraticDiscont2DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(GaussQuadraticDiscont2DFECollection self) -> char const *"""
        return _fe_coll.GaussQuadraticDiscont2DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_GaussQuadraticDiscont2DFECollection
    __del__ = lambda self: None
GaussQuadraticDiscont2DFECollection_swigregister = _fe_coll.GaussQuadraticDiscont2DFECollection_swigregister
GaussQuadraticDiscont2DFECollection_swigregister(GaussQuadraticDiscont2DFECollection)

class CubicDiscont2DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::CubicDiscont2DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CubicDiscont2DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CubicDiscont2DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::CubicDiscont2DFECollection self) -> CubicDiscont2DFECollection"""
        this = _fe_coll.new_CubicDiscont2DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(CubicDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.CubicDiscont2DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(CubicDiscont2DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.CubicDiscont2DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(CubicDiscont2DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.CubicDiscont2DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(CubicDiscont2DFECollection self) -> char const *"""
        return _fe_coll.CubicDiscont2DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_CubicDiscont2DFECollection
    __del__ = lambda self: None
CubicDiscont2DFECollection_swigregister = _fe_coll.CubicDiscont2DFECollection_swigregister
CubicDiscont2DFECollection_swigregister(CubicDiscont2DFECollection)

class Const3DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::Const3DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Const3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Const3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Const3DFECollection self) -> Const3DFECollection"""
        this = _fe_coll.new_Const3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(Const3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.Const3DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(Const3DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.Const3DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(Const3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.Const3DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(Const3DFECollection self) -> char const *"""
        return _fe_coll.Const3DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_Const3DFECollection
    __del__ = lambda self: None
Const3DFECollection_swigregister = _fe_coll.Const3DFECollection_swigregister
Const3DFECollection_swigregister(Const3DFECollection)

class LinearDiscont3DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::LinearDiscont3DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearDiscont3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearDiscont3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::LinearDiscont3DFECollection self) -> LinearDiscont3DFECollection"""
        this = _fe_coll.new_LinearDiscont3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(LinearDiscont3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.LinearDiscont3DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(LinearDiscont3DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.LinearDiscont3DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(LinearDiscont3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.LinearDiscont3DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(LinearDiscont3DFECollection self) -> char const *"""
        return _fe_coll.LinearDiscont3DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_LinearDiscont3DFECollection
    __del__ = lambda self: None
LinearDiscont3DFECollection_swigregister = _fe_coll.LinearDiscont3DFECollection_swigregister
LinearDiscont3DFECollection_swigregister(LinearDiscont3DFECollection)

class QuadraticDiscont3DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::QuadraticDiscont3DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadraticDiscont3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadraticDiscont3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::QuadraticDiscont3DFECollection self) -> QuadraticDiscont3DFECollection"""
        this = _fe_coll.new_QuadraticDiscont3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(QuadraticDiscont3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.QuadraticDiscont3DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(QuadraticDiscont3DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.QuadraticDiscont3DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(QuadraticDiscont3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.QuadraticDiscont3DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(QuadraticDiscont3DFECollection self) -> char const *"""
        return _fe_coll.QuadraticDiscont3DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_QuadraticDiscont3DFECollection
    __del__ = lambda self: None
QuadraticDiscont3DFECollection_swigregister = _fe_coll.QuadraticDiscont3DFECollection_swigregister
QuadraticDiscont3DFECollection_swigregister(QuadraticDiscont3DFECollection)

class RefinedLinearFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::RefinedLinearFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedLinearFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedLinearFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RefinedLinearFECollection self) -> RefinedLinearFECollection"""
        this = _fe_coll.new_RefinedLinearFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(RefinedLinearFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.RefinedLinearFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(RefinedLinearFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.RefinedLinearFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(RefinedLinearFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.RefinedLinearFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(RefinedLinearFECollection self) -> char const *"""
        return _fe_coll.RefinedLinearFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_RefinedLinearFECollection
    __del__ = lambda self: None
RefinedLinearFECollection_swigregister = _fe_coll.RefinedLinearFECollection_swigregister
RefinedLinearFECollection_swigregister(RefinedLinearFECollection)

class ND1_3DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::ND1_3DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND1_3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND1_3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::ND1_3DFECollection self) -> ND1_3DFECollection"""
        this = _fe_coll.new_ND1_3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(ND1_3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.ND1_3DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(ND1_3DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.ND1_3DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(ND1_3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.ND1_3DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(ND1_3DFECollection self) -> char const *"""
        return _fe_coll.ND1_3DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_ND1_3DFECollection
    __del__ = lambda self: None
ND1_3DFECollection_swigregister = _fe_coll.ND1_3DFECollection_swigregister
ND1_3DFECollection_swigregister(ND1_3DFECollection)

class RT0_3DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::RT0_3DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT0_3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT0_3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT0_3DFECollection self) -> RT0_3DFECollection"""
        this = _fe_coll.new_RT0_3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(RT0_3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.RT0_3DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(RT0_3DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.RT0_3DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(RT0_3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.RT0_3DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(RT0_3DFECollection self) -> char const *"""
        return _fe_coll.RT0_3DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_RT0_3DFECollection
    __del__ = lambda self: None
RT0_3DFECollection_swigregister = _fe_coll.RT0_3DFECollection_swigregister
RT0_3DFECollection_swigregister(RT0_3DFECollection)

class RT1_3DFECollection(FiniteElementCollection):
    """Proxy of C++ mfem::RT1_3DFECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT1_3DFECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT1_3DFECollection, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT1_3DFECollection self) -> RT1_3DFECollection"""
        this = _fe_coll.new_RT1_3DFECollection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, GeomType):
        """FiniteElementForGeometry(RT1_3DFECollection self, mfem::Geometry::Type GeomType) -> FiniteElement"""
        return _fe_coll.RT1_3DFECollection_FiniteElementForGeometry(self, GeomType)


    def DofForGeometry(self, GeomType):
        """DofForGeometry(RT1_3DFECollection self, mfem::Geometry::Type GeomType) -> int"""
        return _fe_coll.RT1_3DFECollection_DofForGeometry(self, GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(RT1_3DFECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.RT1_3DFECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(RT1_3DFECollection self) -> char const *"""
        return _fe_coll.RT1_3DFECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_RT1_3DFECollection
    __del__ = lambda self: None
RT1_3DFECollection_swigregister = _fe_coll.RT1_3DFECollection_swigregister
RT1_3DFECollection_swigregister(RT1_3DFECollection)

class Local_FECollection(FiniteElementCollection):
    """Proxy of C++ mfem::Local_FECollection class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Local_FECollection, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElementCollection]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Local_FECollection, name)
    __repr__ = _swig_repr

    def __init__(self, fe_name):
        """__init__(mfem::Local_FECollection self, char const * fe_name) -> Local_FECollection"""
        this = _fe_coll.new_Local_FECollection(fe_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def FiniteElementForGeometry(self, _GeomType):
        """FiniteElementForGeometry(Local_FECollection self, mfem::Geometry::Type _GeomType) -> FiniteElement"""
        return _fe_coll.Local_FECollection_FiniteElementForGeometry(self, _GeomType)


    def DofForGeometry(self, _GeomType):
        """DofForGeometry(Local_FECollection self, mfem::Geometry::Type _GeomType) -> int"""
        return _fe_coll.Local_FECollection_DofForGeometry(self, _GeomType)


    def DofOrderForOrientation(self, GeomType, Or):
        """DofOrderForOrientation(Local_FECollection self, mfem::Geometry::Type GeomType, int Or) -> int const *"""
        return _fe_coll.Local_FECollection_DofOrderForOrientation(self, GeomType, Or)


    def Name(self):
        """Name(Local_FECollection self) -> char const *"""
        return _fe_coll.Local_FECollection_Name(self)

    __swig_destroy__ = _fe_coll.delete_Local_FECollection
    __del__ = lambda self: None
Local_FECollection_swigregister = _fe_coll.Local_FECollection_swigregister
Local_FECollection_swigregister(Local_FECollection)


DG_FECollection = L2_FECollection

# This file is compatible with both classic and new-style classes.


