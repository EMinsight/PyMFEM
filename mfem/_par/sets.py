# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_sets')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_sets')
    _sets = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sets', [dirname(__file__)])
        except ImportError:
            import _sets
            return _sets
        try:
            _mod = imp.load_module('_sets', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _sets = swig_import_helper()
    del swig_import_helper
else:
    import _sets
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

import mfem._par.array
import mfem._par.mem_manager
import mfem._par.table
class IntegerSet(_object):
    """Proxy of C++ mfem::IntegerSet class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::IntegerSet self) -> IntegerSet
        __init__(mfem::IntegerSet self, IntegerSet s) -> IntegerSet
        __init__(mfem::IntegerSet self, int const n, int const * p) -> IntegerSet
        """
        this = _sets.new_IntegerSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self):
        """Size(IntegerSet self) -> int"""
        return _sets.IntegerSet_Size(self)


    def PickElement(self):
        """PickElement(IntegerSet self) -> int"""
        return _sets.IntegerSet_PickElement(self)


    def PickRandomElement(self):
        """PickRandomElement(IntegerSet self) -> int"""
        return _sets.IntegerSet_PickRandomElement(self)


    def __eq__(self, s):
        """__eq__(IntegerSet self, IntegerSet s) -> int"""
        return _sets.IntegerSet___eq__(self, s)


    def Recreate(self, n, p):
        """Recreate(IntegerSet self, int const n, int const * p)"""
        return _sets.IntegerSet_Recreate(self, n, p)

    __swig_destroy__ = _sets.delete_IntegerSet
    __del__ = lambda self: None
IntegerSet_swigregister = _sets.IntegerSet_swigregister
IntegerSet_swigregister(IntegerSet)

class ListOfIntegerSets(_object):
    """Proxy of C++ mfem::ListOfIntegerSets class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListOfIntegerSets, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListOfIntegerSets, name)
    __repr__ = _swig_repr

    def Size(self):
        """Size(ListOfIntegerSets self) -> int"""
        return _sets.ListOfIntegerSets_Size(self)


    def PickElementInSet(self, i):
        """PickElementInSet(ListOfIntegerSets self, int i) -> int"""
        return _sets.ListOfIntegerSets_PickElementInSet(self, i)


    def PickRandomElementInSet(self, i):
        """PickRandomElementInSet(ListOfIntegerSets self, int i) -> int"""
        return _sets.ListOfIntegerSets_PickRandomElementInSet(self, i)


    def Insert(self, s):
        """Insert(ListOfIntegerSets self, IntegerSet s) -> int"""
        return _sets.ListOfIntegerSets_Insert(self, s)


    def Lookup(self, s):
        """Lookup(ListOfIntegerSets self, IntegerSet s) -> int"""
        return _sets.ListOfIntegerSets_Lookup(self, s)


    def AsTable(self, t):
        """AsTable(ListOfIntegerSets self, Table t)"""
        return _sets.ListOfIntegerSets_AsTable(self, t)

    __swig_destroy__ = _sets.delete_ListOfIntegerSets
    __del__ = lambda self: None

    def __init__(self):
        """__init__(mfem::ListOfIntegerSets self) -> ListOfIntegerSets"""
        this = _sets.new_ListOfIntegerSets()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ListOfIntegerSets_swigregister = _sets.ListOfIntegerSets_swigregister
ListOfIntegerSets_swigregister(ListOfIntegerSets)

# This file is compatible with both classic and new-style classes.


