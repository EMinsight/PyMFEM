# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_linearform')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_linearform')
    _linearform = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_linearform', [dirname(__file__)])
        except ImportError:
            import _linearform
            return _linearform
        try:
            _mod = imp.load_module('_linearform', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _linearform = swig_import_helper()
    del swig_import_helper
else:
    import _linearform
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import mfem._par.coefficient
import mfem._par.array
import mfem._par.ostream_typemap
import mfem._par.matrix
import mfem._par.vector
import mfem._par.operators
import mfem._par.intrules
import mfem._par.sparsemat
import mfem._par.densemat
import mfem._par.eltrans
import mfem._par.fe
import mfem._par.mesh
import mfem._par.ncmesh
import mfem._par.element
import mfem._par.geom
import mfem._par.table
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.fespace
import mfem._par.fe_coll
import mfem._par.lininteg
import mfem._par.handle
import mfem._par.hypre
import mfem._par.bilininteg
class LinearForm(mfem._par.vector.Vector):
    """Proxy of C++ mfem::LinearForm class."""

    __swig_setmethods__ = {}
    for _s in [mfem._par.vector.Vector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearForm, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._par.vector.Vector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LinearForm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::LinearForm self, FiniteElementSpace f) -> LinearForm
        __init__(mfem::LinearForm self, FiniteElementSpace f, LinearForm lf) -> LinearForm
        __init__(mfem::LinearForm self) -> LinearForm
        """
        this = _linearform.new_LinearForm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetFES(self):
        """GetFES(LinearForm self) -> FiniteElementSpace"""
        return _linearform.LinearForm_GetFES(self)


    def FESpace(self, *args):
        """
        FESpace(LinearForm self) -> FiniteElementSpace
        FESpace(LinearForm self) -> FiniteElementSpace
        """
        return _linearform.LinearForm_FESpace(self, *args)


    def AddDomainIntegrator(self, lfi):
        """AddDomainIntegrator(LinearForm self, LinearFormIntegrator lfi)"""

        if not hasattr(self, "_integrators"): self._integrators = []
        self._integrators.append(lfi)
        lfi.thisown=0 


        return _linearform.LinearForm_AddDomainIntegrator(self, lfi)


    def AddBoundaryIntegrator(self, *args):
        """
        AddBoundaryIntegrator(LinearForm self, LinearFormIntegrator lfi)
        AddBoundaryIntegrator(LinearForm self, LinearFormIntegrator lfi, intArray bdr_attr_marker)
        """

        if not hasattr(self, "_integrators"): self._integrators = []
        self._integrators.append(lfi)
        lfi.thisown=0 


        return _linearform.LinearForm_AddBoundaryIntegrator(self, *args)


    def AddBdrFaceIntegrator(self, *args):
        """
        AddBdrFaceIntegrator(LinearForm self, LinearFormIntegrator lfi)
        AddBdrFaceIntegrator(LinearForm self, LinearFormIntegrator lfi, intArray bdr_attr_marker)
        """

        if not hasattr(self, "_integrators"): self._integrators = []
        lfi = args[0]	     
        self._integrators.append(lfi)
        lfi.thisown=0 


        return _linearform.LinearForm_AddBdrFaceIntegrator(self, *args)


    def GetDLFI(self):
        """GetDLFI(LinearForm self) -> mfem::Array< mfem::LinearFormIntegrator * > *"""
        return _linearform.LinearForm_GetDLFI(self)


    def GetDLFI_Delta(self):
        """GetDLFI_Delta(LinearForm self) -> mfem::Array< mfem::DeltaLFIntegrator * > *"""
        return _linearform.LinearForm_GetDLFI_Delta(self)


    def GetBLFI(self):
        """GetBLFI(LinearForm self) -> mfem::Array< mfem::LinearFormIntegrator * > *"""
        return _linearform.LinearForm_GetBLFI(self)


    def GetFLFI(self):
        """GetFLFI(LinearForm self) -> mfem::Array< mfem::LinearFormIntegrator * > *"""
        return _linearform.LinearForm_GetFLFI(self)


    def GetFLFI_Marker(self):
        """GetFLFI_Marker(LinearForm self) -> mfem::Array< mfem::Array< int > * > *"""
        return _linearform.LinearForm_GetFLFI_Marker(self)


    def Assemble(self):
        """Assemble(LinearForm self)"""
        return _linearform.LinearForm_Assemble(self)


    def AssembleDelta(self):
        """AssembleDelta(LinearForm self)"""
        return _linearform.LinearForm_AssembleDelta(self)


    def Update(self, *args):
        """
        Update(LinearForm self)
        Update(LinearForm self, FiniteElementSpace f)
        Update(LinearForm self, FiniteElementSpace f, Vector v, int v_offset)
        """
        return _linearform.LinearForm_Update(self, *args)


    def __call__(self, gf):
        """__call__(LinearForm self, GridFunction gf) -> double"""
        return _linearform.LinearForm___call__(self, gf)

    __swig_destroy__ = _linearform.delete_LinearForm
    __del__ = lambda self: None
LinearForm_swigregister = _linearform.LinearForm_swigregister
LinearForm_swigregister(LinearForm)

# This file is compatible with both classic and new-style classes.


