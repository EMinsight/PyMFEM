# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_coefficient')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_coefficient')
    _coefficient = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_coefficient', [dirname(__file__)])
        except ImportError:
            import _coefficient
            return _coefficient
        try:
            _mod = imp.load_module('_coefficient', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _coefficient = swig_import_helper()
    del swig_import_helper
else:
    import _coefficient
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


MFEM_VERSION = _coefficient.MFEM_VERSION
MFEM_VERSION_STRING = _coefficient.MFEM_VERSION_STRING
MFEM_VERSION_TYPE = _coefficient.MFEM_VERSION_TYPE
MFEM_VERSION_TYPE_RELEASE = _coefficient.MFEM_VERSION_TYPE_RELEASE
MFEM_VERSION_TYPE_DEVELOPMENT = _coefficient.MFEM_VERSION_TYPE_DEVELOPMENT
MFEM_VERSION_MAJOR = _coefficient.MFEM_VERSION_MAJOR
MFEM_VERSION_MINOR = _coefficient.MFEM_VERSION_MINOR
MFEM_VERSION_PATCH = _coefficient.MFEM_VERSION_PATCH
MFEM_SOURCE_DIR = _coefficient.MFEM_SOURCE_DIR
MFEM_INSTALL_DIR = _coefficient.MFEM_INSTALL_DIR
MFEM_TIMER_TYPE = _coefficient.MFEM_TIMER_TYPE
MFEM_HYPRE_VERSION = _coefficient.MFEM_HYPRE_VERSION
import mfem._par.array
import mfem._par.ostream_typemap
import mfem._par.matrix
import mfem._par.vector
import mfem._par.operators
import mfem._par.intrules
import mfem._par.sparsemat
import mfem._par.densemat
import mfem._par.eltrans
import mfem._par.fe
class Coefficient(_object):
    """Proxy of C++ mfem::Coefficient class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coefficient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Coefficient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTime(self, t):
        """SetTime(Coefficient self, double t)"""
        return _coefficient.Coefficient_SetTime(self, t)


    def GetTime(self):
        """GetTime(Coefficient self) -> double"""
        return _coefficient.Coefficient_GetTime(self)


    def Eval(self, *args):
        """
        Eval(Coefficient self, ElementTransformation T, IntegrationPoint ip) -> double
        Eval(Coefficient self, ElementTransformation T, IntegrationPoint ip, double t) -> double
        """
        return _coefficient.Coefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_Coefficient
    __del__ = lambda self: None
Coefficient_swigregister = _coefficient.Coefficient_swigregister
Coefficient_swigregister(Coefficient)

class ConstantCoefficient(Coefficient):
    """Proxy of C++ mfem::ConstantCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantCoefficient, name)
    __repr__ = _swig_repr
    __swig_setmethods__["constant"] = _coefficient.ConstantCoefficient_constant_set
    __swig_getmethods__["constant"] = _coefficient.ConstantCoefficient_constant_get
    if _newclass:
        constant = _swig_property(_coefficient.ConstantCoefficient_constant_get, _coefficient.ConstantCoefficient_constant_set)

    def __init__(self, c=1.0):
        """
        __init__(mfem::ConstantCoefficient self, double c=1.0) -> ConstantCoefficient
        __init__(mfem::ConstantCoefficient self) -> ConstantCoefficient
        """
        this = _coefficient.new_ConstantCoefficient(c)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, T, ip):
        """Eval(ConstantCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.ConstantCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_ConstantCoefficient
    __del__ = lambda self: None
ConstantCoefficient_swigregister = _coefficient.ConstantCoefficient_swigregister
ConstantCoefficient_swigregister(ConstantCoefficient)

class PWConstCoefficient(Coefficient):
    """Proxy of C++ mfem::PWConstCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PWConstCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PWConstCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::PWConstCoefficient self, int NumOfSubD=0) -> PWConstCoefficient
        __init__(mfem::PWConstCoefficient self) -> PWConstCoefficient
        __init__(mfem::PWConstCoefficient self, Vector c) -> PWConstCoefficient
        """
        this = _coefficient.new_PWConstCoefficient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def UpdateConstants(self, c):
        """UpdateConstants(PWConstCoefficient self, Vector c)"""
        return _coefficient.PWConstCoefficient_UpdateConstants(self, c)


    def __call__(self, i):
        """__call__(PWConstCoefficient self, int i) -> double &"""
        return _coefficient.PWConstCoefficient___call__(self, i)


    def GetNConst(self):
        """GetNConst(PWConstCoefficient self) -> int"""
        return _coefficient.PWConstCoefficient_GetNConst(self)


    def Eval(self, T, ip):
        """Eval(PWConstCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.PWConstCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_PWConstCoefficient
    __del__ = lambda self: None
PWConstCoefficient_swigregister = _coefficient.PWConstCoefficient_swigregister
PWConstCoefficient_swigregister(PWConstCoefficient)

class FunctionCoefficient(Coefficient):
    """Proxy of C++ mfem::FunctionCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::FunctionCoefficient self, double (*)(mfem::Vector const &) f) -> FunctionCoefficient
        __init__(mfem::FunctionCoefficient self, double (*)(mfem::Vector const &,double) tdf) -> FunctionCoefficient
        __init__(mfem::FunctionCoefficient self, double (*)(mfem::Vector &) f) -> FunctionCoefficient
        __init__(mfem::FunctionCoefficient self, double (*)(mfem::Vector &,double) tdf) -> FunctionCoefficient
        """
        this = _coefficient.new_FunctionCoefficient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, T, ip):
        """Eval(FunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.FunctionCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_FunctionCoefficient
    __del__ = lambda self: None
FunctionCoefficient_swigregister = _coefficient.FunctionCoefficient_swigregister
FunctionCoefficient_swigregister(FunctionCoefficient)

class GridFunctionCoefficient(Coefficient):
    """Proxy of C++ mfem::GridFunctionCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridFunctionCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GridFunctionCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::GridFunctionCoefficient self) -> GridFunctionCoefficient
        __init__(mfem::GridFunctionCoefficient self, mfem::GridFunction * gf, int comp=1) -> GridFunctionCoefficient
        __init__(mfem::GridFunctionCoefficient self, mfem::GridFunction * gf) -> GridFunctionCoefficient
        """
        this = _coefficient.new_GridFunctionCoefficient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetGridFunction(self, gf):
        """SetGridFunction(GridFunctionCoefficient self, mfem::GridFunction * gf)"""
        return _coefficient.GridFunctionCoefficient_SetGridFunction(self, gf)


    def GetGridFunction(self):
        """GetGridFunction(GridFunctionCoefficient self) -> mfem::GridFunction *"""
        return _coefficient.GridFunctionCoefficient_GetGridFunction(self)


    def Eval(self, T, ip):
        """Eval(GridFunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.GridFunctionCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_GridFunctionCoefficient
    __del__ = lambda self: None
GridFunctionCoefficient_swigregister = _coefficient.GridFunctionCoefficient_swigregister
GridFunctionCoefficient_swigregister(GridFunctionCoefficient)

class TransformedCoefficient(Coefficient):
    """Proxy of C++ mfem::TransformedCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformedCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransformedCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::TransformedCoefficient self, Coefficient q, double (*)(double) F) -> TransformedCoefficient
        __init__(mfem::TransformedCoefficient self, Coefficient q1, Coefficient q2, double (*)(double,double) F) -> TransformedCoefficient
        """
        this = _coefficient.new_TransformedCoefficient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, T, ip):
        """Eval(TransformedCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.TransformedCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_TransformedCoefficient
    __del__ = lambda self: None
TransformedCoefficient_swigregister = _coefficient.TransformedCoefficient_swigregister
TransformedCoefficient_swigregister(TransformedCoefficient)

class DeltaCoefficient(Coefficient):
    """Proxy of C++ mfem::DeltaCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeltaCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeltaCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::DeltaCoefficient self) -> DeltaCoefficient
        __init__(mfem::DeltaCoefficient self, double x, double s) -> DeltaCoefficient
        __init__(mfem::DeltaCoefficient self, double x, double y, double s) -> DeltaCoefficient
        __init__(mfem::DeltaCoefficient self, double x, double y, double z, double s) -> DeltaCoefficient
        """
        this = _coefficient.new_DeltaCoefficient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetDeltaCenter(self, center):
        """SetDeltaCenter(DeltaCoefficient self, Vector center)"""
        return _coefficient.DeltaCoefficient_SetDeltaCenter(self, center)


    def SetScale(self, _s):
        """SetScale(DeltaCoefficient self, double _s)"""
        return _coefficient.DeltaCoefficient_SetScale(self, _s)


    def SetFunction(self, f):
        """SetFunction(DeltaCoefficient self, double (*)(double) f)"""
        return _coefficient.DeltaCoefficient_SetFunction(self, f)


    def SetTol(self, _tol):
        """SetTol(DeltaCoefficient self, double _tol)"""
        return _coefficient.DeltaCoefficient_SetTol(self, _tol)


    def SetWeight(self, w):
        """SetWeight(DeltaCoefficient self, Coefficient w)"""

        w.thisown=0 


        return _coefficient.DeltaCoefficient_SetWeight(self, w)


    def Center(self):
        """Center(DeltaCoefficient self) -> double const *"""
        return _coefficient.DeltaCoefficient_Center(self)


    def Scale(self):
        """Scale(DeltaCoefficient self) -> double"""
        return _coefficient.DeltaCoefficient_Scale(self)


    def Tol(self):
        """Tol(DeltaCoefficient self) -> double"""
        return _coefficient.DeltaCoefficient_Tol(self)


    def Weight(self):
        """Weight(DeltaCoefficient self) -> Coefficient"""
        return _coefficient.DeltaCoefficient_Weight(self)


    def GetDeltaCenter(self, center):
        """GetDeltaCenter(DeltaCoefficient self, Vector center)"""
        return _coefficient.DeltaCoefficient_GetDeltaCenter(self, center)


    def EvalDelta(self, T, ip):
        """EvalDelta(DeltaCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.DeltaCoefficient_EvalDelta(self, T, ip)


    def Eval(self, T, ip):
        """Eval(DeltaCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.DeltaCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_DeltaCoefficient
    __del__ = lambda self: None
DeltaCoefficient_swigregister = _coefficient.DeltaCoefficient_swigregister
DeltaCoefficient_swigregister(DeltaCoefficient)

class RestrictedCoefficient(Coefficient):
    """Proxy of C++ mfem::RestrictedCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RestrictedCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RestrictedCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, _c, attr):
        """__init__(mfem::RestrictedCoefficient self, Coefficient _c, intArray attr) -> RestrictedCoefficient"""
        this = _coefficient.new_RestrictedCoefficient(_c, attr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self._ref_to_c = _c




    def Eval(self, T, ip):
        """Eval(RestrictedCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.RestrictedCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_RestrictedCoefficient
    __del__ = lambda self: None
RestrictedCoefficient_swigregister = _coefficient.RestrictedCoefficient_swigregister
RestrictedCoefficient_swigregister(RestrictedCoefficient)

class VectorCoefficient(_object):
    """Proxy of C++ mfem::VectorCoefficient class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorCoefficient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorCoefficient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTime(self, t):
        """SetTime(VectorCoefficient self, double t)"""
        return _coefficient.VectorCoefficient_SetTime(self, t)


    def GetTime(self):
        """GetTime(VectorCoefficient self) -> double"""
        return _coefficient.VectorCoefficient_GetTime(self)


    def GetVDim(self):
        """GetVDim(VectorCoefficient self) -> int"""
        return _coefficient.VectorCoefficient_GetVDim(self)


    def Eval(self, *args):
        """
        Eval(VectorCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.VectorCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_VectorCoefficient
    __del__ = lambda self: None
VectorCoefficient_swigregister = _coefficient.VectorCoefficient_swigregister
VectorCoefficient_swigregister(VectorCoefficient)

class VectorConstantCoefficient(VectorCoefficient):
    """Proxy of C++ mfem::VectorConstantCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorConstantCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorConstantCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, v):
        """__init__(mfem::VectorConstantCoefficient self, Vector v) -> VectorConstantCoefficient"""
        this = _coefficient.new_VectorConstantCoefficient(v)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, *args):
        """
        Eval(VectorConstantCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorConstantCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(VectorConstantCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.VectorConstantCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_VectorConstantCoefficient
    __del__ = lambda self: None
VectorConstantCoefficient_swigregister = _coefficient.VectorConstantCoefficient_swigregister
VectorConstantCoefficient_swigregister(VectorConstantCoefficient)

class VectorFunctionCoefficient(VectorCoefficient):
    """Proxy of C++ mfem::VectorFunctionCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFunctionCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFunctionCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::VectorFunctionCoefficient self, int dim, void (*)(mfem::Vector const &,mfem::Vector &) F, Coefficient q=None) -> VectorFunctionCoefficient
        __init__(mfem::VectorFunctionCoefficient self, int dim, void (*)(mfem::Vector const &,mfem::Vector &) F) -> VectorFunctionCoefficient
        __init__(mfem::VectorFunctionCoefficient self, int dim, void (*)(mfem::Vector const &,double,mfem::Vector &) TDF, Coefficient q=None) -> VectorFunctionCoefficient
        __init__(mfem::VectorFunctionCoefficient self, int dim, void (*)(mfem::Vector const &,double,mfem::Vector &) TDF) -> VectorFunctionCoefficient
        """
        this = _coefficient.new_VectorFunctionCoefficient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, *args):
        """
        Eval(VectorFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(VectorFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.VectorFunctionCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_VectorFunctionCoefficient
    __del__ = lambda self: None
VectorFunctionCoefficient_swigregister = _coefficient.VectorFunctionCoefficient_swigregister
VectorFunctionCoefficient_swigregister(VectorFunctionCoefficient)

class VectorArrayCoefficient(VectorCoefficient):
    """Proxy of C++ mfem::VectorArrayCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorArrayCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorArrayCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, dim):
        """__init__(mfem::VectorArrayCoefficient self, int dim) -> VectorArrayCoefficient"""
        this = _coefficient.new_VectorArrayCoefficient(dim)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetCoeff(self, i):
        """GetCoeff(VectorArrayCoefficient self, int i) -> Coefficient"""
        return _coefficient.VectorArrayCoefficient_GetCoeff(self, i)


    def GetCoeffs(self):
        """GetCoeffs(VectorArrayCoefficient self) -> mfem::Coefficient **"""
        return _coefficient.VectorArrayCoefficient_GetCoeffs(self)


    def Set(self, i, c, own=True):
        """
        Set(VectorArrayCoefficient self, int i, Coefficient c, bool own=True)
        Set(VectorArrayCoefficient self, int i, Coefficient c)
        """

        c.thisown=0 


        return _coefficient.VectorArrayCoefficient_Set(self, i, c, own)


    def Eval(self, *args):
        """
        Eval(VectorArrayCoefficient self, int i, ElementTransformation T, IntegrationPoint ip) -> double
        Eval(VectorArrayCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorArrayCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(VectorArrayCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.VectorArrayCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_VectorArrayCoefficient
    __del__ = lambda self: None
VectorArrayCoefficient_swigregister = _coefficient.VectorArrayCoefficient_swigregister
VectorArrayCoefficient_swigregister(VectorArrayCoefficient)

class VectorGridFunctionCoefficient(VectorCoefficient):
    """Proxy of C++ mfem::VectorGridFunctionCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorGridFunctionCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorGridFunctionCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::VectorGridFunctionCoefficient self) -> VectorGridFunctionCoefficient
        __init__(mfem::VectorGridFunctionCoefficient self, mfem::GridFunction * gf) -> VectorGridFunctionCoefficient
        """
        this = _coefficient.new_VectorGridFunctionCoefficient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetGridFunction(self, gf):
        """SetGridFunction(VectorGridFunctionCoefficient self, mfem::GridFunction * gf)"""
        return _coefficient.VectorGridFunctionCoefficient_SetGridFunction(self, gf)


    def GetGridFunction(self):
        """GetGridFunction(VectorGridFunctionCoefficient self) -> mfem::GridFunction *"""
        return _coefficient.VectorGridFunctionCoefficient_GetGridFunction(self)


    def Eval(self, *args):
        """
        Eval(VectorGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorGridFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.VectorGridFunctionCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_VectorGridFunctionCoefficient
    __del__ = lambda self: None
VectorGridFunctionCoefficient_swigregister = _coefficient.VectorGridFunctionCoefficient_swigregister
VectorGridFunctionCoefficient_swigregister(VectorGridFunctionCoefficient)

class GradientGridFunctionCoefficient(VectorCoefficient):
    """Proxy of C++ mfem::GradientGridFunctionCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GradientGridFunctionCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GradientGridFunctionCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, gf):
        """__init__(mfem::GradientGridFunctionCoefficient self, mfem::GridFunction * gf) -> GradientGridFunctionCoefficient"""
        this = _coefficient.new_GradientGridFunctionCoefficient(gf)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetGridFunction(self, gf):
        """SetGridFunction(GradientGridFunctionCoefficient self, mfem::GridFunction * gf)"""
        return _coefficient.GradientGridFunctionCoefficient_SetGridFunction(self, gf)


    def GetGridFunction(self):
        """GetGridFunction(GradientGridFunctionCoefficient self) -> mfem::GridFunction *"""
        return _coefficient.GradientGridFunctionCoefficient_GetGridFunction(self)


    def Eval(self, *args):
        """
        Eval(GradientGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(GradientGridFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.GradientGridFunctionCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_GradientGridFunctionCoefficient
    __del__ = lambda self: None
GradientGridFunctionCoefficient_swigregister = _coefficient.GradientGridFunctionCoefficient_swigregister
GradientGridFunctionCoefficient_swigregister(GradientGridFunctionCoefficient)

class CurlGridFunctionCoefficient(VectorCoefficient):
    """Proxy of C++ mfem::CurlGridFunctionCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurlGridFunctionCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurlGridFunctionCoefficient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetGridFunction(self, gf):
        """SetGridFunction(CurlGridFunctionCoefficient self, mfem::GridFunction * gf)"""
        return _coefficient.CurlGridFunctionCoefficient_SetGridFunction(self, gf)


    def GetGridFunction(self):
        """GetGridFunction(CurlGridFunctionCoefficient self) -> mfem::GridFunction *"""
        return _coefficient.CurlGridFunctionCoefficient_GetGridFunction(self)


    def Eval(self, *args):
        """
        Eval(CurlGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(CurlGridFunctionCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(CurlGridFunctionCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.CurlGridFunctionCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_CurlGridFunctionCoefficient
    __del__ = lambda self: None
CurlGridFunctionCoefficient_swigregister = _coefficient.CurlGridFunctionCoefficient_swigregister
CurlGridFunctionCoefficient_swigregister(CurlGridFunctionCoefficient)

class DivergenceGridFunctionCoefficient(Coefficient):
    """Proxy of C++ mfem::DivergenceGridFunctionCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivergenceGridFunctionCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DivergenceGridFunctionCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, gf):
        """__init__(mfem::DivergenceGridFunctionCoefficient self, mfem::GridFunction * gf) -> DivergenceGridFunctionCoefficient"""
        this = _coefficient.new_DivergenceGridFunctionCoefficient(gf)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetGridFunction(self, gf):
        """SetGridFunction(DivergenceGridFunctionCoefficient self, mfem::GridFunction * gf)"""
        return _coefficient.DivergenceGridFunctionCoefficient_SetGridFunction(self, gf)


    def GetGridFunction(self):
        """GetGridFunction(DivergenceGridFunctionCoefficient self) -> mfem::GridFunction *"""
        return _coefficient.DivergenceGridFunctionCoefficient_GetGridFunction(self)


    def Eval(self, T, ip):
        """Eval(DivergenceGridFunctionCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.DivergenceGridFunctionCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_DivergenceGridFunctionCoefficient
    __del__ = lambda self: None
DivergenceGridFunctionCoefficient_swigregister = _coefficient.DivergenceGridFunctionCoefficient_swigregister
DivergenceGridFunctionCoefficient_swigregister(DivergenceGridFunctionCoefficient)

class VectorDeltaCoefficient(VectorCoefficient):
    """Proxy of C++ mfem::VectorDeltaCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDeltaCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDeltaCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::VectorDeltaCoefficient self, int _vdim) -> VectorDeltaCoefficient
        __init__(mfem::VectorDeltaCoefficient self, Vector _dir) -> VectorDeltaCoefficient
        __init__(mfem::VectorDeltaCoefficient self, Vector _dir, double x, double s) -> VectorDeltaCoefficient
        __init__(mfem::VectorDeltaCoefficient self, Vector _dir, double x, double y, double s) -> VectorDeltaCoefficient
        __init__(mfem::VectorDeltaCoefficient self, Vector _dir, double x, double y, double z, double s) -> VectorDeltaCoefficient
        """
        this = _coefficient.new_VectorDeltaCoefficient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetDeltaCoefficient(self, _d):
        """SetDeltaCoefficient(VectorDeltaCoefficient self, DeltaCoefficient _d)"""
        return _coefficient.VectorDeltaCoefficient_SetDeltaCoefficient(self, _d)


    def GetDeltaCoefficient(self):
        """GetDeltaCoefficient(VectorDeltaCoefficient self) -> DeltaCoefficient"""
        return _coefficient.VectorDeltaCoefficient_GetDeltaCoefficient(self)


    def SetScale(self, s):
        """SetScale(VectorDeltaCoefficient self, double s)"""
        return _coefficient.VectorDeltaCoefficient_SetScale(self, s)


    def SetDirection(self, _d):
        """SetDirection(VectorDeltaCoefficient self, Vector _d)"""
        return _coefficient.VectorDeltaCoefficient_SetDirection(self, _d)


    def SetDeltaCenter(self, center):
        """SetDeltaCenter(VectorDeltaCoefficient self, Vector center)"""
        return _coefficient.VectorDeltaCoefficient_SetDeltaCenter(self, center)


    def GetDeltaCenter(self, center):
        """GetDeltaCenter(VectorDeltaCoefficient self, Vector center)"""
        return _coefficient.VectorDeltaCoefficient_GetDeltaCenter(self, center)


    def EvalDelta(self, V, T, ip):
        """EvalDelta(VectorDeltaCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.VectorDeltaCoefficient_EvalDelta(self, V, T, ip)


    def Eval(self, *args):
        """
        Eval(VectorDeltaCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorDeltaCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(VectorDeltaCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.VectorDeltaCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_VectorDeltaCoefficient
    __del__ = lambda self: None
VectorDeltaCoefficient_swigregister = _coefficient.VectorDeltaCoefficient_swigregister
VectorDeltaCoefficient_swigregister(VectorDeltaCoefficient)

class VectorRestrictedCoefficient(VectorCoefficient):
    """Proxy of C++ mfem::VectorRestrictedCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorRestrictedCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorRestrictedCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, vc, attr):
        """__init__(mfem::VectorRestrictedCoefficient self, VectorCoefficient vc, intArray attr) -> VectorRestrictedCoefficient"""
        this = _coefficient.new_VectorRestrictedCoefficient(vc, attr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self._ref_to_vc = vc




    def Eval(self, *args):
        """
        Eval(VectorRestrictedCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorRestrictedCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.VectorRestrictedCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_VectorRestrictedCoefficient
    __del__ = lambda self: None
VectorRestrictedCoefficient_swigregister = _coefficient.VectorRestrictedCoefficient_swigregister
VectorRestrictedCoefficient_swigregister(VectorRestrictedCoefficient)

class MatrixCoefficient(_object):
    """Proxy of C++ mfem::MatrixCoefficient class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixCoefficient, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixCoefficient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTime(self, t):
        """SetTime(MatrixCoefficient self, double t)"""
        return _coefficient.MatrixCoefficient_SetTime(self, t)


    def GetTime(self):
        """GetTime(MatrixCoefficient self) -> double"""
        return _coefficient.MatrixCoefficient_GetTime(self)


    def GetHeight(self):
        """GetHeight(MatrixCoefficient self) -> int"""
        return _coefficient.MatrixCoefficient_GetHeight(self)


    def GetWidth(self):
        """GetWidth(MatrixCoefficient self) -> int"""
        return _coefficient.MatrixCoefficient_GetWidth(self)


    def GetVDim(self):
        """GetVDim(MatrixCoefficient self) -> int"""
        return _coefficient.MatrixCoefficient_GetVDim(self)


    def Eval(self, K, T, ip):
        """Eval(MatrixCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixCoefficient_Eval(self, K, T, ip)

    __swig_destroy__ = _coefficient.delete_MatrixCoefficient
    __del__ = lambda self: None
MatrixCoefficient_swigregister = _coefficient.MatrixCoefficient_swigregister
MatrixCoefficient_swigregister(MatrixCoefficient)

class MatrixConstantCoefficient(MatrixCoefficient):
    """Proxy of C++ mfem::MatrixConstantCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixConstantCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixConstantCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, m):
        """__init__(mfem::MatrixConstantCoefficient self, DenseMatrix m) -> MatrixConstantCoefficient"""
        this = _coefficient.new_MatrixConstantCoefficient(m)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, *args):
        """
        Eval(MatrixConstantCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)
        Eval(MatrixConstantCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.MatrixConstantCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_MatrixConstantCoefficient
    __del__ = lambda self: None
MatrixConstantCoefficient_swigregister = _coefficient.MatrixConstantCoefficient_swigregister
MatrixConstantCoefficient_swigregister(MatrixConstantCoefficient)

class MatrixFunctionCoefficient(MatrixCoefficient):
    """Proxy of C++ mfem::MatrixFunctionCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixFunctionCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixFunctionCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MatrixFunctionCoefficient self, int dim, void (*)(mfem::Vector const &,mfem::DenseMatrix &) F, Coefficient q=None) -> MatrixFunctionCoefficient
        __init__(mfem::MatrixFunctionCoefficient self, int dim, void (*)(mfem::Vector const &,mfem::DenseMatrix &) F) -> MatrixFunctionCoefficient
        __init__(mfem::MatrixFunctionCoefficient self, DenseMatrix m, Coefficient q) -> MatrixFunctionCoefficient
        __init__(mfem::MatrixFunctionCoefficient self, int dim, void (*)(mfem::Vector const &,double,mfem::DenseMatrix &) TDF, Coefficient q=None) -> MatrixFunctionCoefficient
        __init__(mfem::MatrixFunctionCoefficient self, int dim, void (*)(mfem::Vector const &,double,mfem::DenseMatrix &) TDF) -> MatrixFunctionCoefficient
        """
        this = _coefficient.new_MatrixFunctionCoefficient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, K, T, ip):
        """Eval(MatrixFunctionCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixFunctionCoefficient_Eval(self, K, T, ip)

    __swig_destroy__ = _coefficient.delete_MatrixFunctionCoefficient
    __del__ = lambda self: None
MatrixFunctionCoefficient_swigregister = _coefficient.MatrixFunctionCoefficient_swigregister
MatrixFunctionCoefficient_swigregister(MatrixFunctionCoefficient)

class MatrixArrayCoefficient(MatrixCoefficient):
    """Proxy of C++ mfem::MatrixArrayCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixArrayCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixArrayCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, dim):
        """__init__(mfem::MatrixArrayCoefficient self, int dim) -> MatrixArrayCoefficient"""
        this = _coefficient.new_MatrixArrayCoefficient(dim)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetCoeff(self, i, j):
        """GetCoeff(MatrixArrayCoefficient self, int i, int j) -> Coefficient"""
        return _coefficient.MatrixArrayCoefficient_GetCoeff(self, i, j)


    def Set(self, i, j, c, own=True):
        """
        Set(MatrixArrayCoefficient self, int i, int j, Coefficient c, bool own=True)
        Set(MatrixArrayCoefficient self, int i, int j, Coefficient c)
        """

        c.thisown=0 


        return _coefficient.MatrixArrayCoefficient_Set(self, i, j, c, own)


    def Eval(self, *args):
        """
        Eval(MatrixArrayCoefficient self, int i, int j, ElementTransformation T, IntegrationPoint ip) -> double
        Eval(MatrixArrayCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.MatrixArrayCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_MatrixArrayCoefficient
    __del__ = lambda self: None
MatrixArrayCoefficient_swigregister = _coefficient.MatrixArrayCoefficient_swigregister
MatrixArrayCoefficient_swigregister(MatrixArrayCoefficient)

class MatrixRestrictedCoefficient(MatrixCoefficient):
    """Proxy of C++ mfem::MatrixRestrictedCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixRestrictedCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixRestrictedCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, mc, attr):
        """__init__(mfem::MatrixRestrictedCoefficient self, MatrixCoefficient mc, intArray attr) -> MatrixRestrictedCoefficient"""
        this = _coefficient.new_MatrixRestrictedCoefficient(mc, attr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self._ref_to_mc = mc




    def Eval(self, K, T, ip):
        """Eval(MatrixRestrictedCoefficient self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixRestrictedCoefficient_Eval(self, K, T, ip)

    __swig_destroy__ = _coefficient.delete_MatrixRestrictedCoefficient
    __del__ = lambda self: None
MatrixRestrictedCoefficient_swigregister = _coefficient.MatrixRestrictedCoefficient_swigregister
MatrixRestrictedCoefficient_swigregister(MatrixRestrictedCoefficient)

class SumCoefficient(Coefficient):
    """Proxy of C++ mfem::SumCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SumCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SumCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A, B, _alpha=1.0, _beta=1.0):
        """
        __init__(mfem::SumCoefficient self, Coefficient A, Coefficient B, double _alpha=1.0, double _beta=1.0) -> SumCoefficient
        __init__(mfem::SumCoefficient self, Coefficient A, Coefficient B, double _alpha=1.0) -> SumCoefficient
        __init__(mfem::SumCoefficient self, Coefficient A, Coefficient B) -> SumCoefficient
        """
        this = _coefficient.new_SumCoefficient(A, B, _alpha, _beta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, T, ip):
        """Eval(SumCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.SumCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_SumCoefficient
    __del__ = lambda self: None
SumCoefficient_swigregister = _coefficient.SumCoefficient_swigregister
SumCoefficient_swigregister(SumCoefficient)

class ProductCoefficient(Coefficient):
    """Proxy of C++ mfem::ProductCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProductCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ProductCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A, B):
        """__init__(mfem::ProductCoefficient self, Coefficient A, Coefficient B) -> ProductCoefficient"""
        this = _coefficient.new_ProductCoefficient(A, B)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, T, ip):
        """Eval(ProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.ProductCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_ProductCoefficient
    __del__ = lambda self: None
ProductCoefficient_swigregister = _coefficient.ProductCoefficient_swigregister
ProductCoefficient_swigregister(ProductCoefficient)

class PowerCoefficient(Coefficient):
    """Proxy of C++ mfem::PowerCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PowerCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PowerCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A, _p):
        """__init__(mfem::PowerCoefficient self, Coefficient A, double _p) -> PowerCoefficient"""
        this = _coefficient.new_PowerCoefficient(A, _p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, T, ip):
        """Eval(PowerCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.PowerCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_PowerCoefficient
    __del__ = lambda self: None
PowerCoefficient_swigregister = _coefficient.PowerCoefficient_swigregister
PowerCoefficient_swigregister(PowerCoefficient)

class InnerProductCoefficient(Coefficient):
    """Proxy of C++ mfem::InnerProductCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InnerProductCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InnerProductCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A, B):
        """__init__(mfem::InnerProductCoefficient self, VectorCoefficient A, VectorCoefficient B) -> InnerProductCoefficient"""
        this = _coefficient.new_InnerProductCoefficient(A, B)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, T, ip):
        """Eval(InnerProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.InnerProductCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_InnerProductCoefficient
    __del__ = lambda self: None
InnerProductCoefficient_swigregister = _coefficient.InnerProductCoefficient_swigregister
InnerProductCoefficient_swigregister(InnerProductCoefficient)

class VectorRotProductCoefficient(Coefficient):
    """Proxy of C++ mfem::VectorRotProductCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorRotProductCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorRotProductCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A, B):
        """__init__(mfem::VectorRotProductCoefficient self, VectorCoefficient A, VectorCoefficient B) -> VectorRotProductCoefficient"""
        this = _coefficient.new_VectorRotProductCoefficient(A, B)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, T, ip):
        """Eval(VectorRotProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.VectorRotProductCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_VectorRotProductCoefficient
    __del__ = lambda self: None
VectorRotProductCoefficient_swigregister = _coefficient.VectorRotProductCoefficient_swigregister
VectorRotProductCoefficient_swigregister(VectorRotProductCoefficient)

class DeterminantCoefficient(Coefficient):
    """Proxy of C++ mfem::DeterminantCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [Coefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeterminantCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [Coefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeterminantCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A):
        """__init__(mfem::DeterminantCoefficient self, MatrixCoefficient A) -> DeterminantCoefficient"""
        this = _coefficient.new_DeterminantCoefficient(A)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, T, ip):
        """Eval(DeterminantCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.DeterminantCoefficient_Eval(self, T, ip)

    __swig_destroy__ = _coefficient.delete_DeterminantCoefficient
    __del__ = lambda self: None
DeterminantCoefficient_swigregister = _coefficient.DeterminantCoefficient_swigregister
DeterminantCoefficient_swigregister(DeterminantCoefficient)

class VectorSumCoefficient(VectorCoefficient):
    """Proxy of C++ mfem::VectorSumCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorSumCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorSumCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A, B, _alpha=1.0, _beta=1.0):
        """
        __init__(mfem::VectorSumCoefficient self, VectorCoefficient A, VectorCoefficient B, double _alpha=1.0, double _beta=1.0) -> VectorSumCoefficient
        __init__(mfem::VectorSumCoefficient self, VectorCoefficient A, VectorCoefficient B, double _alpha=1.0) -> VectorSumCoefficient
        __init__(mfem::VectorSumCoefficient self, VectorCoefficient A, VectorCoefficient B) -> VectorSumCoefficient
        """
        this = _coefficient.new_VectorSumCoefficient(A, B, _alpha, _beta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, *args):
        """
        Eval(VectorSumCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorSumCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.VectorSumCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_VectorSumCoefficient
    __del__ = lambda self: None
VectorSumCoefficient_swigregister = _coefficient.VectorSumCoefficient_swigregister
VectorSumCoefficient_swigregister(VectorSumCoefficient)

class ScalarVectorProductCoefficient(VectorCoefficient):
    """Proxy of C++ mfem::ScalarVectorProductCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarVectorProductCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarVectorProductCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A, B):
        """__init__(mfem::ScalarVectorProductCoefficient self, Coefficient A, VectorCoefficient B) -> ScalarVectorProductCoefficient"""
        this = _coefficient.new_ScalarVectorProductCoefficient(A, B)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, *args):
        """
        Eval(ScalarVectorProductCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(ScalarVectorProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.ScalarVectorProductCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_ScalarVectorProductCoefficient
    __del__ = lambda self: None
ScalarVectorProductCoefficient_swigregister = _coefficient.ScalarVectorProductCoefficient_swigregister
ScalarVectorProductCoefficient_swigregister(ScalarVectorProductCoefficient)

class VectorCrossProductCoefficient(VectorCoefficient):
    """Proxy of C++ mfem::VectorCrossProductCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorCrossProductCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorCrossProductCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A, B):
        """__init__(mfem::VectorCrossProductCoefficient self, VectorCoefficient A, VectorCoefficient B) -> VectorCrossProductCoefficient"""
        this = _coefficient.new_VectorCrossProductCoefficient(A, B)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, *args):
        """
        Eval(VectorCrossProductCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(VectorCrossProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.VectorCrossProductCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_VectorCrossProductCoefficient
    __del__ = lambda self: None
VectorCrossProductCoefficient_swigregister = _coefficient.VectorCrossProductCoefficient_swigregister
VectorCrossProductCoefficient_swigregister(VectorCrossProductCoefficient)

class MatVecCoefficient(VectorCoefficient):
    """Proxy of C++ mfem::MatVecCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatVecCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatVecCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A, B):
        """__init__(mfem::MatVecCoefficient self, MatrixCoefficient A, VectorCoefficient B) -> MatVecCoefficient"""
        this = _coefficient.new_MatVecCoefficient(A, B)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, *args):
        """
        Eval(MatVecCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(MatVecCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        """
        return _coefficient.MatVecCoefficient_Eval(self, *args)

    __swig_destroy__ = _coefficient.delete_MatVecCoefficient
    __del__ = lambda self: None
MatVecCoefficient_swigregister = _coefficient.MatVecCoefficient_swigregister
MatVecCoefficient_swigregister(MatVecCoefficient)

class IdentityMatrixCoefficient(MatrixCoefficient):
    """Proxy of C++ mfem::IdentityMatrixCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentityMatrixCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdentityMatrixCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, d):
        """__init__(mfem::IdentityMatrixCoefficient self, int d) -> IdentityMatrixCoefficient"""
        this = _coefficient.new_IdentityMatrixCoefficient(d)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, M, T, ip):
        """Eval(IdentityMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.IdentityMatrixCoefficient_Eval(self, M, T, ip)

    __swig_destroy__ = _coefficient.delete_IdentityMatrixCoefficient
    __del__ = lambda self: None
IdentityMatrixCoefficient_swigregister = _coefficient.IdentityMatrixCoefficient_swigregister
IdentityMatrixCoefficient_swigregister(IdentityMatrixCoefficient)

class MatrixSumCoefficient(MatrixCoefficient):
    """Proxy of C++ mfem::MatrixSumCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixSumCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixSumCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A, B, _alpha=1.0, _beta=1.0):
        """
        __init__(mfem::MatrixSumCoefficient self, MatrixCoefficient A, MatrixCoefficient B, double _alpha=1.0, double _beta=1.0) -> MatrixSumCoefficient
        __init__(mfem::MatrixSumCoefficient self, MatrixCoefficient A, MatrixCoefficient B, double _alpha=1.0) -> MatrixSumCoefficient
        __init__(mfem::MatrixSumCoefficient self, MatrixCoefficient A, MatrixCoefficient B) -> MatrixSumCoefficient
        """
        this = _coefficient.new_MatrixSumCoefficient(A, B, _alpha, _beta)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, M, T, ip):
        """Eval(MatrixSumCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixSumCoefficient_Eval(self, M, T, ip)

    __swig_destroy__ = _coefficient.delete_MatrixSumCoefficient
    __del__ = lambda self: None
MatrixSumCoefficient_swigregister = _coefficient.MatrixSumCoefficient_swigregister
MatrixSumCoefficient_swigregister(MatrixSumCoefficient)

class ScalarMatrixProductCoefficient(MatrixCoefficient):
    """Proxy of C++ mfem::ScalarMatrixProductCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarMatrixProductCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarMatrixProductCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A, B):
        """__init__(mfem::ScalarMatrixProductCoefficient self, Coefficient A, MatrixCoefficient B) -> ScalarMatrixProductCoefficient"""
        this = _coefficient.new_ScalarMatrixProductCoefficient(A, B)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, M, T, ip):
        """Eval(ScalarMatrixProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.ScalarMatrixProductCoefficient_Eval(self, M, T, ip)

    __swig_destroy__ = _coefficient.delete_ScalarMatrixProductCoefficient
    __del__ = lambda self: None
ScalarMatrixProductCoefficient_swigregister = _coefficient.ScalarMatrixProductCoefficient_swigregister
ScalarMatrixProductCoefficient_swigregister(ScalarMatrixProductCoefficient)

class TransposeMatrixCoefficient(MatrixCoefficient):
    """Proxy of C++ mfem::TransposeMatrixCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransposeMatrixCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransposeMatrixCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A):
        """__init__(mfem::TransposeMatrixCoefficient self, MatrixCoefficient A) -> TransposeMatrixCoefficient"""
        this = _coefficient.new_TransposeMatrixCoefficient(A)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, M, T, ip):
        """Eval(TransposeMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.TransposeMatrixCoefficient_Eval(self, M, T, ip)

    __swig_destroy__ = _coefficient.delete_TransposeMatrixCoefficient
    __del__ = lambda self: None
TransposeMatrixCoefficient_swigregister = _coefficient.TransposeMatrixCoefficient_swigregister
TransposeMatrixCoefficient_swigregister(TransposeMatrixCoefficient)

class InverseMatrixCoefficient(MatrixCoefficient):
    """Proxy of C++ mfem::InverseMatrixCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseMatrixCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseMatrixCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A):
        """__init__(mfem::InverseMatrixCoefficient self, MatrixCoefficient A) -> InverseMatrixCoefficient"""
        this = _coefficient.new_InverseMatrixCoefficient(A)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, M, T, ip):
        """Eval(InverseMatrixCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.InverseMatrixCoefficient_Eval(self, M, T, ip)

    __swig_destroy__ = _coefficient.delete_InverseMatrixCoefficient
    __del__ = lambda self: None
InverseMatrixCoefficient_swigregister = _coefficient.InverseMatrixCoefficient_swigregister
InverseMatrixCoefficient_swigregister(InverseMatrixCoefficient)

class OuterProductCoefficient(MatrixCoefficient):
    """Proxy of C++ mfem::OuterProductCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OuterProductCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OuterProductCoefficient, name)
    __repr__ = _swig_repr

    def __init__(self, A, B):
        """__init__(mfem::OuterProductCoefficient self, VectorCoefficient A, VectorCoefficient B) -> OuterProductCoefficient"""
        this = _coefficient.new_OuterProductCoefficient(A, B)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, M, T, ip):
        """Eval(OuterProductCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.OuterProductCoefficient_Eval(self, M, T, ip)

    __swig_destroy__ = _coefficient.delete_OuterProductCoefficient
    __del__ = lambda self: None
OuterProductCoefficient_swigregister = _coefficient.OuterProductCoefficient_swigregister
OuterProductCoefficient_swigregister(OuterProductCoefficient)


def ComputeLpNorm(*args):
    """
    ComputeLpNorm(double p, Coefficient coeff, mfem::Mesh & mesh, mfem::IntegrationRule const *[] irs) -> double
    ComputeLpNorm(double p, VectorCoefficient coeff, mfem::Mesh & mesh, mfem::IntegrationRule const *[] irs) -> double
    """
    return _coefficient.ComputeLpNorm(*args)

def ComputeGlobalLpNorm(*args):
    """
    ComputeGlobalLpNorm(double p, Coefficient coeff, mfem::ParMesh & pmesh, mfem::IntegrationRule const *[] irs) -> double
    ComputeGlobalLpNorm(double p, VectorCoefficient coeff, mfem::ParMesh & pmesh, mfem::IntegrationRule const *[] irs) -> double
    """
    return _coefficient.ComputeGlobalLpNorm(*args)

def fake_func(x):
    """fake_func(Vector x) -> double"""
    return _coefficient.fake_func(x)

def fake_func_vec(x, Ht):
    """fake_func_vec(Vector x, Vector Ht)"""
    return _coefficient.fake_func_vec(x, Ht)

def fake_func_mat(x, Kt):
    """fake_func_mat(Vector x, DenseMatrix Kt)"""
    return _coefficient.fake_func_mat(x, Kt)
class PyCoefficientBase(FunctionCoefficient):
    """Proxy of C++ mfem::PyCoefficientBase class."""

    __swig_setmethods__ = {}
    for _s in [FunctionCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyCoefficientBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FunctionCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyCoefficientBase, name)
    __repr__ = _swig_repr

    def __init__(self, tdep):
        """__init__(mfem::PyCoefficientBase self, int tdep) -> PyCoefficientBase"""
        if self.__class__ == PyCoefficientBase:
            _self = None
        else:
            _self = self
        this = _coefficient.new_PyCoefficientBase(_self, tdep)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, T, ip):
        """Eval(PyCoefficientBase self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _coefficient.PyCoefficientBase_Eval(self, T, ip)


    def _EvalPy(self, arg0):
        """_EvalPy(PyCoefficientBase self, Vector arg0) -> double"""
        return _coefficient.PyCoefficientBase__EvalPy(self, arg0)


    def _EvalPyT(self, arg0, arg1):
        """_EvalPyT(PyCoefficientBase self, Vector arg0, double arg1) -> double"""
        return _coefficient.PyCoefficientBase__EvalPyT(self, arg0, arg1)

    __swig_destroy__ = _coefficient.delete_PyCoefficientBase
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _coefficient.disown_PyCoefficientBase(self)
        return weakref_proxy(self)
PyCoefficientBase_swigregister = _coefficient.PyCoefficientBase_swigregister
PyCoefficientBase_swigregister(PyCoefficientBase)

class VectorPyCoefficientBase(VectorFunctionCoefficient):
    """Proxy of C++ mfem::VectorPyCoefficientBase class."""

    __swig_setmethods__ = {}
    for _s in [VectorFunctionCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPyCoefficientBase, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFunctionCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPyCoefficientBase, name)
    __repr__ = _swig_repr

    def __init__(self, dim, tdep, q=None):
        """
        __init__(mfem::VectorPyCoefficientBase self, int dim, int tdep, Coefficient q=None) -> VectorPyCoefficientBase
        __init__(mfem::VectorPyCoefficientBase self, int dim, int tdep) -> VectorPyCoefficientBase
        """
        if self.__class__ == VectorPyCoefficientBase:
            _self = None
        else:
            _self = self
        this = _coefficient.new_VectorPyCoefficientBase(_self, dim, tdep, q)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, *args):
        """
        Eval(VectorPyCoefficientBase self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(VectorPyCoefficientBase self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _coefficient.VectorPyCoefficientBase_Eval(self, *args)


    def _EvalPy(self, arg0, arg1):
        """_EvalPy(VectorPyCoefficientBase self, Vector arg0, Vector arg1)"""
        return _coefficient.VectorPyCoefficientBase__EvalPy(self, arg0, arg1)


    def _EvalPyT(self, arg0, arg1, arg2):
        """_EvalPyT(VectorPyCoefficientBase self, Vector arg0, double arg1, Vector arg2)"""
        return _coefficient.VectorPyCoefficientBase__EvalPyT(self, arg0, arg1, arg2)

    __swig_destroy__ = _coefficient.delete_VectorPyCoefficientBase
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _coefficient.disown_VectorPyCoefficientBase(self)
        return weakref_proxy(self)
VectorPyCoefficientBase_swigregister = _coefficient.VectorPyCoefficientBase_swigregister
VectorPyCoefficientBase_swigregister(VectorPyCoefficientBase)

class MatrixPyCoefficientBase(MatrixFunctionCoefficient):
    """Proxy of C++ mfem::MatrixPyCoefficientBase class."""

    __swig_setmethods__ = {}
    for _s in [MatrixFunctionCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixPyCoefficientBase, name, value)
    __swig_getmethods__ = {}
    for _s in [MatrixFunctionCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixPyCoefficientBase, name)
    __repr__ = _swig_repr

    def __init__(self, dim, tdep):
        """__init__(mfem::MatrixPyCoefficientBase self, int dim, int tdep) -> MatrixPyCoefficientBase"""
        if self.__class__ == MatrixPyCoefficientBase:
            _self = None
        else:
            _self = self
        this = _coefficient.new_MatrixPyCoefficientBase(_self, dim, tdep)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Eval(self, K, T, ip):
        """Eval(MatrixPyCoefficientBase self, DenseMatrix K, ElementTransformation T, IntegrationPoint ip)"""
        return _coefficient.MatrixPyCoefficientBase_Eval(self, K, T, ip)


    def _EvalPy(self, arg0, arg1):
        """_EvalPy(MatrixPyCoefficientBase self, Vector arg0, DenseMatrix arg1)"""
        return _coefficient.MatrixPyCoefficientBase__EvalPy(self, arg0, arg1)


    def _EvalPyT(self, arg0, arg1, arg2):
        """_EvalPyT(MatrixPyCoefficientBase self, Vector arg0, double arg1, DenseMatrix arg2)"""
        return _coefficient.MatrixPyCoefficientBase__EvalPyT(self, arg0, arg1, arg2)

    __swig_destroy__ = _coefficient.delete_MatrixPyCoefficientBase
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _coefficient.disown_MatrixPyCoefficientBase(self)
        return weakref_proxy(self)
MatrixPyCoefficientBase_swigregister = _coefficient.MatrixPyCoefficientBase_swigregister
MatrixPyCoefficientBase_swigregister(MatrixPyCoefficientBase)


class PyCoefficient(PyCoefficientBase):
   def __init__(self):
       PyCoefficientBase.__init__(self, 0)
   def _EvalPy(self, x):
       return self.EvalValue(x.GetDataArray())
   def EvalValue(self, x):
       return 0.0

class PyCoefficientT(PyCoefficientBase):
   def __init__(self):
       PyCoefficientBase.__init__(self, 1)
   def _EvalPyT(self, x, t):
       return self.EvalValue(x.GetDataArray(), t)
   def EvalValue(self, x, t):
       return 0.0

class VectorPyCoefficient(VectorPyCoefficientBase):
   def __init__(self, dim):
       self.sdim = dim
       VectorPyCoefficientBase.__init__(self, dim, 0)
   def _EvalPy(self, x, V):
       v = self.EvalValue(x.GetDataArray())
       V.Assign(v)	 

   def _EvalPyT(self, x, t, V):
       v = self.EvalValue(x.GetDataArray())
       V.Assign(v)	 	 

   def EvalValue(self, x):
       return [0,0,0]

class VectorPyCoefficientT(VectorPyCoefficientBase):
   def __init__(self, dim):
       self.sdim = dim  
       VectorPyCoefficientBase.__init__(self, dim, 1)
   def _EvalPy(self, x, V):
       v = self.EvalValue(x.GetDataArray(), 0)
       V.Assign(v)

   def _EvalPyT(self, x, t, V):
       v = self.EvalValue(x.GetDataArray(), t)
       V.Assign(v)	 	 	 

   def EvalValue(self, x, t):
       return [0.0,0.0,0.0]

class MatrixPyCoefficient(MatrixPyCoefficientBase):
   def __init__(self, dim):
       self.sdim = dim
       MatrixPyCoefficientBase.__init__(self, dim, 0)
   def _EvalPy(self, x, K):
       k = self.EvalValue(x.GetDataArray())
       K.Assign(k)	 	 	 	 	 	 

   def EvalValue(self, x):
       return np.array([[0,0,0], [0,0,0] [0,0,0]])

class MatrixPyCoefficientT(MatrixPyCoefficientBase):
   def __init__(self, dim):
       self.sdim = dim  
       MatrixPyCoefficientBase.__init__(self, dim, 1)
   def _EvalPyT(self, x, t, K):
       k = self.EvalValue(x.GetDataArray(), t)
       K.Assign(k)	 	 	 	 	 	 

   def EvalValue(self, x, t):
       return np.array([[0.0,0.0,0.0], [0.0,0.0,0.0] [0.0,0.0,0.0]])


# This file is compatible with both classic and new-style classes.


