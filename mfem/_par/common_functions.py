# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_common_functions')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_common_functions')
    _common_functions = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_common_functions', [dirname(__file__)])
        except ImportError:
            import _common_functions
            return _common_functions
        try:
            _mod = imp.load_module('_common_functions', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _common_functions = swig_import_helper()
    del swig_import_helper
else:
    import _common_functions
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

MFEM_VERSION = _common_functions.MFEM_VERSION
MFEM_VERSION_STRING = _common_functions.MFEM_VERSION_STRING
MFEM_VERSION_TYPE = _common_functions.MFEM_VERSION_TYPE
MFEM_VERSION_TYPE_RELEASE = _common_functions.MFEM_VERSION_TYPE_RELEASE
MFEM_VERSION_TYPE_DEVELOPMENT = _common_functions.MFEM_VERSION_TYPE_DEVELOPMENT
MFEM_VERSION_MAJOR = _common_functions.MFEM_VERSION_MAJOR
MFEM_VERSION_MINOR = _common_functions.MFEM_VERSION_MINOR
MFEM_VERSION_PATCH = _common_functions.MFEM_VERSION_PATCH
MFEM_SOURCE_DIR = _common_functions.MFEM_SOURCE_DIR
MFEM_INSTALL_DIR = _common_functions.MFEM_INSTALL_DIR
MFEM_GIT_STRING = _common_functions.MFEM_GIT_STRING
MFEM_TIMER_TYPE = _common_functions.MFEM_TIMER_TYPE
MFEM_HYPRE_VERSION = _common_functions.MFEM_HYPRE_VERSION
import mfem._par.array
import mfem._par.mem_manager

def Transpose(*args):
    """
    Transpose(mfem::Table const & A, mfem::Table & At, int _ncols_A=-1)
    Transpose(mfem::Table const & A, mfem::Table & At)
    Transpose(mfem::Table const & A) -> mfem::Table
    Transpose(intArray A, mfem::Table & At, int _ncols_A=-1)
    Transpose(intArray A, mfem::Table & At)
    Transpose(mfem::BlockMatrix const & A) -> mfem::BlockMatrix
    Transpose(mfem::SparseMatrix const & A) -> mfem::SparseMatrix *
    """
    return _common_functions.Transpose(*args)

def Mult(*args):
    """
    Mult(mfem::Table const & A, mfem::Table const & B, mfem::Table & C)
    Mult(mfem::Table const & A, mfem::Table const & B) -> mfem::Table
    Mult(mfem::BlockMatrix const & A, mfem::BlockMatrix const & B) -> mfem::BlockMatrix
    Mult(mfem::DenseMatrix const & b, mfem::DenseMatrix const & c, mfem::DenseMatrix & a)
    Mult(mfem::SparseMatrix const & A, mfem::SparseMatrix const & B, mfem::SparseMatrix * OAB=None) -> mfem::SparseMatrix
    Mult(mfem::SparseMatrix const & A, mfem::SparseMatrix const & B) -> mfem::SparseMatrix
    Mult(mfem::SparseMatrix const & A, mfem::DenseMatrix & B) -> mfem::DenseMatrix *
    """
    return _common_functions.Mult(*args)

def InnerProduct(*args):
    """
    InnerProduct(mfem::Vector const & x, mfem::Vector const & y) -> double
    InnerProduct(MPI_Comm comm, mfem::Vector const & x, mfem::Vector const & y) -> double
    InnerProduct(mfem::HypreParVector & x, mfem::HypreParVector & y) -> double
    InnerProduct(mfem::HypreParVector * x, mfem::HypreParVector * y) -> double
    """
    return _common_functions.InnerProduct(*args)

def Add(*args):
    """
    Add(mfem::DenseMatrix const & A, mfem::DenseMatrix const & B, double alpha, mfem::DenseMatrix & C)
    Add(double alpha, double const * A, double beta, double const * B, mfem::DenseMatrix & C)
    Add(double alpha, mfem::DenseMatrix const & A, double beta, mfem::DenseMatrix const & B, mfem::DenseMatrix & C)
    Add(mfem::SparseMatrix const & A, mfem::SparseMatrix const & B) -> mfem::SparseMatrix
    Add(double a, mfem::SparseMatrix const & A, double b, mfem::SparseMatrix const & B) -> mfem::SparseMatrix
    Add(mfem::Array< mfem::SparseMatrix * > & Ai) -> mfem::SparseMatrix
    Add(mfem::SparseMatrix const & A, double alpha, mfem::DenseMatrix & B)
    Add(double alpha, mfem::HypreParMatrix const & A, double beta, mfem::HypreParMatrix const & B) -> mfem::HypreParMatrix *
    """
    return _common_functions.Add(*args)

def RAP(*args):
    """
    RAP(mfem::SparseMatrix const & A, mfem::DenseMatrix & P) -> mfem::DenseMatrix
    RAP(mfem::DenseMatrix & A, mfem::SparseMatrix const & P) -> mfem::DenseMatrix
    RAP(mfem::SparseMatrix const & A, mfem::SparseMatrix const & R, mfem::SparseMatrix * ORAP=None) -> mfem::SparseMatrix
    RAP(mfem::SparseMatrix const & A, mfem::SparseMatrix const & R) -> mfem::SparseMatrix
    RAP(mfem::SparseMatrix const & Rt, mfem::SparseMatrix const & A, mfem::SparseMatrix const & P) -> mfem::SparseMatrix
    RAP(mfem::HypreParMatrix const * A, mfem::HypreParMatrix const * P) -> mfem::HypreParMatrix
    RAP(mfem::HypreParMatrix const * Rt, mfem::HypreParMatrix const * A, mfem::HypreParMatrix const * P) -> mfem::HypreParMatrix *
    """
    return _common_functions.RAP(*args)
# This file is compatible with both classic and new-style classes.


