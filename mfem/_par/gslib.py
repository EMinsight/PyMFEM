# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gslib
else:
    import _gslib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _gslib.SWIG_PyInstanceMethod_New
_swig_new_static_method = _gslib.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

MFEM_VERSION = _gslib.MFEM_VERSION
MFEM_VERSION_STRING = _gslib.MFEM_VERSION_STRING
MFEM_VERSION_TYPE = _gslib.MFEM_VERSION_TYPE
MFEM_VERSION_TYPE_RELEASE = _gslib.MFEM_VERSION_TYPE_RELEASE
MFEM_VERSION_TYPE_DEVELOPMENT = _gslib.MFEM_VERSION_TYPE_DEVELOPMENT
MFEM_VERSION_MAJOR = _gslib.MFEM_VERSION_MAJOR
MFEM_VERSION_MINOR = _gslib.MFEM_VERSION_MINOR
MFEM_VERSION_PATCH = _gslib.MFEM_VERSION_PATCH
import mfem._par.vector
import mfem._par.array
import mfem._par.mem_manager
import mfem._par.mesh
import mfem._par.matrix
import mfem._par.operators
import mfem._par.sort_pairs
import mfem._par.ncmesh
import mfem._par.globals
import mfem._par.vtk
import mfem._par.element
import mfem._par.densemat
import mfem._par.geom
import mfem._par.intrules
import mfem._par.table
import mfem._par.hash
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.coefficient
import mfem._par.symmat
import mfem._par.sparsemat
import mfem._par.eltrans
import mfem._par.fe
import mfem._par.fe_base
import mfem._par.fe_fixed_order
import mfem._par.fe_h1
import mfem._par.fe_nd
import mfem._par.fe_rt
import mfem._par.fe_l2
import mfem._par.fe_nurbs
import mfem._par.fe_pos
import mfem._par.fe_ser
import mfem._par.fespace
import mfem._par.fe_coll
import mfem._par.lininteg
import mfem._par.doftrans
import mfem._par.handle
import mfem._par.hypre
import mfem._par.restriction
import mfem._par.bilininteg
import mfem._par.linearform
import mfem._par.nonlininteg
class FindPointsGSLIB(object):
    r"""Proxy of C++ mfem::FindPointsGSLIB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NONE = _gslib.FindPointsGSLIB_NONE
    
    ARITHMETIC = _gslib.FindPointsGSLIB_ARITHMETIC
    
    HARMONIC = _gslib.FindPointsGSLIB_HARMONIC
    

    def __init__(self, *args):
        r"""
        __init__(FindPointsGSLIB self) -> FindPointsGSLIB
        __init__(FindPointsGSLIB self, MPI_Comm comm_) -> FindPointsGSLIB
        """
        _gslib.FindPointsGSLIB_swiginit(self, _gslib.new_FindPointsGSLIB(*args))
    __swig_destroy__ = _gslib.delete_FindPointsGSLIB

    def Setup(self, m, bb_t=0.1, newt_tol=1.0e-12, npt_max=256):
        r"""Setup(FindPointsGSLIB self, Mesh m, double const bb_t=0.1, double const newt_tol=1.0e-12, int const npt_max=256)"""
        return _gslib.FindPointsGSLIB_Setup(self, m, bb_t, newt_tol, npt_max)
    Setup = _swig_new_instance_method(_gslib.FindPointsGSLIB_Setup)

    def FindPoints(self, *args):
        r"""
        FindPoints(FindPointsGSLIB self, Vector point_pos)
        FindPoints(FindPointsGSLIB self, Mesh m, Vector point_pos, double const bb_t=0.1, double const newt_tol=1.0e-12, int const npt_max=256)
        """
        return _gslib.FindPointsGSLIB_FindPoints(self, *args)
    FindPoints = _swig_new_instance_method(_gslib.FindPointsGSLIB_FindPoints)

    def Interpolate(self, *args):
        r"""
        Interpolate(FindPointsGSLIB self, GridFunction field_in, Vector field_out)
        Interpolate(FindPointsGSLIB self, Vector point_pos, GridFunction field_in, Vector field_out)
        Interpolate(FindPointsGSLIB self, Mesh m, Vector point_pos, GridFunction field_in, Vector field_out)
        """
        return _gslib.FindPointsGSLIB_Interpolate(self, *args)
    Interpolate = _swig_new_instance_method(_gslib.FindPointsGSLIB_Interpolate)

    def SetL2AvgType(self, avgtype_):
        r"""SetL2AvgType(FindPointsGSLIB self, mfem::FindPointsGSLIB::AvgType avgtype_)"""
        return _gslib.FindPointsGSLIB_SetL2AvgType(self, avgtype_)
    SetL2AvgType = _swig_new_instance_method(_gslib.FindPointsGSLIB_SetL2AvgType)

    def SetDefaultInterpolationValue(self, interp_value_):
        r"""SetDefaultInterpolationValue(FindPointsGSLIB self, double interp_value_)"""
        return _gslib.FindPointsGSLIB_SetDefaultInterpolationValue(self, interp_value_)
    SetDefaultInterpolationValue = _swig_new_instance_method(_gslib.FindPointsGSLIB_SetDefaultInterpolationValue)

    def FreeData(self):
        r"""FreeData(FindPointsGSLIB self)"""
        return _gslib.FindPointsGSLIB_FreeData(self)
    FreeData = _swig_new_instance_method(_gslib.FindPointsGSLIB_FreeData)

    def GetCode(self):
        r"""GetCode(FindPointsGSLIB self) -> mfem::Array< unsigned int > const &"""
        return _gslib.FindPointsGSLIB_GetCode(self)
    GetCode = _swig_new_instance_method(_gslib.FindPointsGSLIB_GetCode)

    def GetElem(self):
        r"""GetElem(FindPointsGSLIB self) -> mfem::Array< unsigned int > const &"""
        return _gslib.FindPointsGSLIB_GetElem(self)
    GetElem = _swig_new_instance_method(_gslib.FindPointsGSLIB_GetElem)

    def GetProc(self):
        r"""GetProc(FindPointsGSLIB self) -> mfem::Array< unsigned int > const &"""
        return _gslib.FindPointsGSLIB_GetProc(self)
    GetProc = _swig_new_instance_method(_gslib.FindPointsGSLIB_GetProc)

    def GetReferencePosition(self):
        r"""GetReferencePosition(FindPointsGSLIB self) -> Vector"""
        return _gslib.FindPointsGSLIB_GetReferencePosition(self)
    GetReferencePosition = _swig_new_instance_method(_gslib.FindPointsGSLIB_GetReferencePosition)

    def GetDist(self):
        r"""GetDist(FindPointsGSLIB self) -> Vector"""
        return _gslib.FindPointsGSLIB_GetDist(self)
    GetDist = _swig_new_instance_method(_gslib.FindPointsGSLIB_GetDist)

    def GetGSLIBElem(self):
        r"""GetGSLIBElem(FindPointsGSLIB self) -> mfem::Array< unsigned int > const &"""
        return _gslib.FindPointsGSLIB_GetGSLIBElem(self)
    GetGSLIBElem = _swig_new_instance_method(_gslib.FindPointsGSLIB_GetGSLIBElem)

    def GetGSLIBReferencePosition(self):
        r"""GetGSLIBReferencePosition(FindPointsGSLIB self) -> Vector"""
        return _gslib.FindPointsGSLIB_GetGSLIBReferencePosition(self)
    GetGSLIBReferencePosition = _swig_new_instance_method(_gslib.FindPointsGSLIB_GetGSLIBReferencePosition)

# Register FindPointsGSLIB in _gslib:
_gslib.FindPointsGSLIB_swigregister(FindPointsGSLIB)

class OversetFindPointsGSLIB(FindPointsGSLIB):
    r"""Proxy of C++ mfem::OversetFindPointsGSLIB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OversetFindPointsGSLIB self) -> OversetFindPointsGSLIB
        __init__(OversetFindPointsGSLIB self, MPI_Comm comm_) -> OversetFindPointsGSLIB
        """
        _gslib.OversetFindPointsGSLIB_swiginit(self, _gslib.new_OversetFindPointsGSLIB(*args))

    def Setup(self, m, meshid, gfmax=None, bb_t=0.1, newt_tol=1.0e-12, npt_max=256):
        r"""Setup(OversetFindPointsGSLIB self, Mesh m, int const meshid, GridFunction gfmax=None, double const bb_t=0.1, double const newt_tol=1.0e-12, int const npt_max=256)"""
        return _gslib.OversetFindPointsGSLIB_Setup(self, m, meshid, gfmax, bb_t, newt_tol, npt_max)
    Setup = _swig_new_instance_method(_gslib.OversetFindPointsGSLIB_Setup)

    def FindPoints(self, point_pos, point_id):
        r"""FindPoints(OversetFindPointsGSLIB self, Vector point_pos, mfem::Array< unsigned int > & point_id)"""
        return _gslib.OversetFindPointsGSLIB_FindPoints(self, point_pos, point_id)
    FindPoints = _swig_new_instance_method(_gslib.OversetFindPointsGSLIB_FindPoints)

    def Interpolate(self, *args):
        r"""
        Interpolate(OversetFindPointsGSLIB self, Vector point_pos, mfem::Array< unsigned int > & point_id, GridFunction field_in, Vector field_out)
        Interpolate(OversetFindPointsGSLIB self, GridFunction field_in, Vector field_out)
        Interpolate(OversetFindPointsGSLIB self, Vector point_pos, GridFunction field_in, Vector field_out)
        Interpolate(OversetFindPointsGSLIB self, Mesh m, Vector point_pos, GridFunction field_in, Vector field_out)
        """
        return _gslib.OversetFindPointsGSLIB_Interpolate(self, *args)
    Interpolate = _swig_new_instance_method(_gslib.OversetFindPointsGSLIB_Interpolate)
    __swig_destroy__ = _gslib.delete_OversetFindPointsGSLIB

# Register OversetFindPointsGSLIB in _gslib:
_gslib.OversetFindPointsGSLIB_swigregister(OversetFindPointsGSLIB)



