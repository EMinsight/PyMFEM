# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pbilinearform')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pbilinearform')
    _pbilinearform = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pbilinearform', [dirname(__file__)])
        except ImportError:
            import _pbilinearform
            return _pbilinearform
        try:
            _mod = imp.load_module('_pbilinearform', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pbilinearform = swig_import_helper()
    del swig_import_helper
else:
    import _pbilinearform
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


MFEM_VERSION = _pbilinearform.MFEM_VERSION
MFEM_VERSION_STRING = _pbilinearform.MFEM_VERSION_STRING
MFEM_VERSION_TYPE = _pbilinearform.MFEM_VERSION_TYPE
MFEM_VERSION_TYPE_RELEASE = _pbilinearform.MFEM_VERSION_TYPE_RELEASE
MFEM_VERSION_TYPE_DEVELOPMENT = _pbilinearform.MFEM_VERSION_TYPE_DEVELOPMENT
MFEM_VERSION_MAJOR = _pbilinearform.MFEM_VERSION_MAJOR
MFEM_VERSION_MINOR = _pbilinearform.MFEM_VERSION_MINOR
MFEM_VERSION_PATCH = _pbilinearform.MFEM_VERSION_PATCH
MFEM_SOURCE_DIR = _pbilinearform.MFEM_SOURCE_DIR
MFEM_INSTALL_DIR = _pbilinearform.MFEM_INSTALL_DIR
MFEM_TIMER_TYPE = _pbilinearform.MFEM_TIMER_TYPE
MFEM_HYPRE_VERSION = _pbilinearform.MFEM_HYPRE_VERSION
import mfem._par.handle
import mfem._par.operators
import mfem._par.mem_manager
import mfem._par.vector
import mfem._par.array
import mfem._par.hypre
import mfem._par.sparsemat
import mfem._par.matrix
import mfem._par.densemat
import mfem._par.bilinearform
import mfem._par.fespace
import mfem._par.coefficient
import mfem._par.intrules
import mfem._par.eltrans
import mfem._par.fe
import mfem._par.geom
import mfem._par.mesh
import mfem._par.ncmesh
import mfem._par.element
import mfem._par.table
import mfem._par.hash
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.bilininteg
import mfem._par.fe_coll
import mfem._par.lininteg
import mfem._par.linearform
import mfem._par.pfespace
import mfem._par.pmesh
import mfem._par.pncmesh
import mfem._par.communication
import mfem._par.sets
import mfem._par.ostream_typemap
class ParBilinearForm(mfem._par.bilinearform.BilinearForm):
    """Proxy of C++ mfem::ParBilinearForm class."""

    __swig_setmethods__ = {}
    for _s in [mfem._par.bilinearform.BilinearForm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParBilinearForm, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._par.bilinearform.BilinearForm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParBilinearForm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::ParBilinearForm self, ParFiniteElementSpace pf) -> ParBilinearForm
        __init__(mfem::ParBilinearForm self, ParFiniteElementSpace pf, ParBilinearForm bf) -> ParBilinearForm
        """
        this = _pbilinearform.new_ParBilinearForm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def KeepNbrBlock(self, knb=True):
        """
        KeepNbrBlock(ParBilinearForm self, bool knb=True)
        KeepNbrBlock(ParBilinearForm self)
        """
        return _pbilinearform.ParBilinearForm_KeepNbrBlock(self, knb)


    def SetOperatorType(self, tid):
        """SetOperatorType(ParBilinearForm self, mfem::Operator::Type tid)"""
        return _pbilinearform.ParBilinearForm_SetOperatorType(self, tid)


    def Assemble(self, skip_zeros=1):
        """
        Assemble(ParBilinearForm self, int skip_zeros=1)
        Assemble(ParBilinearForm self)
        """
        return _pbilinearform.ParBilinearForm_Assemble(self, skip_zeros)


    def ParallelAssembleElim(self, *args):
        """
        ParallelAssembleElim(ParBilinearForm self) -> HypreParMatrix
        ParallelAssembleElim(ParBilinearForm self, OperatorHandle A_elim)
        """
        return _pbilinearform.ParBilinearForm_ParallelAssembleElim(self, *args)


    def ParallelAssemble(self, *args):
        """
        ParallelAssemble(ParBilinearForm self) -> HypreParMatrix
        ParallelAssemble(ParBilinearForm self, SparseMatrix m) -> HypreParMatrix
        ParallelAssemble(ParBilinearForm self, OperatorHandle A)
        ParallelAssemble(ParBilinearForm self, OperatorHandle A, SparseMatrix A_local)
        """
        return _pbilinearform.ParBilinearForm_ParallelAssemble(self, *args)


    def ParallelEliminateEssentialBC(self, *args):
        """
        ParallelEliminateEssentialBC(ParBilinearForm self, intArray bdr_attr_is_ess, HypreParMatrix A, HypreParVector X, HypreParVector B)
        ParallelEliminateEssentialBC(ParBilinearForm self, intArray bdr_attr_is_ess, HypreParMatrix A) -> HypreParMatrix
        """
        return _pbilinearform.ParBilinearForm_ParallelEliminateEssentialBC(self, *args)


    def ParallelEliminateTDofs(self, tdofs_list, A):
        """ParallelEliminateTDofs(ParBilinearForm self, intArray tdofs_list, HypreParMatrix A) -> HypreParMatrix"""
        return _pbilinearform.ParBilinearForm_ParallelEliminateTDofs(self, tdofs_list, A)


    def TrueAddMult(self, x, y, a=1.0):
        """
        TrueAddMult(ParBilinearForm self, Vector x, Vector y, double const a=1.0)
        TrueAddMult(ParBilinearForm self, Vector x, Vector y)
        """
        return _pbilinearform.ParBilinearForm_TrueAddMult(self, x, y, a)


    def ParFESpace(self):
        """ParFESpace(ParBilinearForm self) -> ParFiniteElementSpace"""
        return _pbilinearform.ParBilinearForm_ParFESpace(self)


    def SCParFESpace(self):
        """SCParFESpace(ParBilinearForm self) -> ParFiniteElementSpace"""
        return _pbilinearform.ParBilinearForm_SCParFESpace(self)


    def GetProlongation(self):
        """GetProlongation(ParBilinearForm self) -> Operator"""
        return _pbilinearform.ParBilinearForm_GetProlongation(self)


    def GetRestriction(self):
        """GetRestriction(ParBilinearForm self) -> Operator"""
        return _pbilinearform.ParBilinearForm_GetRestriction(self)


    def RecoverFEMSolution(self, X, b, x):
        """RecoverFEMSolution(ParBilinearForm self, Vector X, Vector b, Vector x)"""
        return _pbilinearform.ParBilinearForm_RecoverFEMSolution(self, X, b, x)


    def Update(self, nfes=None):
        """
        Update(ParBilinearForm self, FiniteElementSpace nfes=None)
        Update(ParBilinearForm self)
        """
        return _pbilinearform.ParBilinearForm_Update(self, nfes)

    __swig_destroy__ = _pbilinearform.delete_ParBilinearForm
    __del__ = lambda self: None

    def FormLinearSystem(self, *args):
        """
        FormLinearSystem(ParBilinearForm self)
        FormLinearSystem(ParBilinearForm self, intArray ess_tdof_list, Vector x, Vector b, OperatorHandle A, Vector X, Vector B, int copy_interior=0)
        FormLinearSystem(ParBilinearForm self, intArray ess_tdof_list, Vector x, Vector b, OperatorHandle A, Vector X, Vector B)
        FormLinearSystem(ParBilinearForm self, intArray ess_tdof_list, Vector x, Vector b, SparseMatrix A, Vector X, Vector B, int copy_interior=0)
        FormLinearSystem(ParBilinearForm self, intArray ess_tdof_list, Vector x, Vector b, SparseMatrix A, Vector X, Vector B)
        FormLinearSystem(ParBilinearForm self, intArray ess_tdof_list, Vector x, Vector b, HypreParMatrix A, Vector X, Vector B, int copy_interior=0)
        FormLinearSystem(ParBilinearForm self, intArray ess_tdof_list, Vector x, Vector b, HypreParMatrix A, Vector X, Vector B)
        """
        return _pbilinearform.ParBilinearForm_FormLinearSystem(self, *args)


    def FormSystemMatrix(self, *args):
        """
        FormSystemMatrix(ParBilinearForm self)
        FormSystemMatrix(ParBilinearForm self, intArray ess_tdof_list, OperatorHandle A)
        FormSystemMatrix(ParBilinearForm self, intArray ess_tdof_list, SparseMatrix A)
        FormSystemMatrix(ParBilinearForm self, intArray ess_tdof_list, HypreParMatrix A)
        """
        return _pbilinearform.ParBilinearForm_FormSystemMatrix(self, *args)

ParBilinearForm_swigregister = _pbilinearform.ParBilinearForm_swigregister
ParBilinearForm_swigregister(ParBilinearForm)

class ParMixedBilinearForm(mfem._par.bilinearform.MixedBilinearForm):
    """Proxy of C++ mfem::ParMixedBilinearForm class."""

    __swig_setmethods__ = {}
    for _s in [mfem._par.bilinearform.MixedBilinearForm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParMixedBilinearForm, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._par.bilinearform.MixedBilinearForm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParMixedBilinearForm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::ParMixedBilinearForm self, ParFiniteElementSpace trial_fes, ParFiniteElementSpace test_fes) -> ParMixedBilinearForm
        __init__(mfem::ParMixedBilinearForm self, ParFiniteElementSpace trial_fes, ParFiniteElementSpace test_fes, ParMixedBilinearForm mbf) -> ParMixedBilinearForm
        """
        this = _pbilinearform.new_ParMixedBilinearForm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ParallelAssemble(self, *args):
        """
        ParallelAssemble(ParMixedBilinearForm self) -> HypreParMatrix
        ParallelAssemble(ParMixedBilinearForm self, OperatorHandle A)
        """
        return _pbilinearform.ParMixedBilinearForm_ParallelAssemble(self, *args)


    def TrueAddMult(self, x, y, a=1.0):
        """
        TrueAddMult(ParMixedBilinearForm self, Vector x, Vector y, double const a=1.0)
        TrueAddMult(ParMixedBilinearForm self, Vector x, Vector y)
        """
        return _pbilinearform.ParMixedBilinearForm_TrueAddMult(self, x, y, a)

    __swig_destroy__ = _pbilinearform.delete_ParMixedBilinearForm
    __del__ = lambda self: None
ParMixedBilinearForm_swigregister = _pbilinearform.ParMixedBilinearForm_swigregister
ParMixedBilinearForm_swigregister(ParMixedBilinearForm)

class ParDiscreteLinearOperator(mfem._par.bilinearform.DiscreteLinearOperator):
    """Proxy of C++ mfem::ParDiscreteLinearOperator class."""

    __swig_setmethods__ = {}
    for _s in [mfem._par.bilinearform.DiscreteLinearOperator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParDiscreteLinearOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._par.bilinearform.DiscreteLinearOperator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParDiscreteLinearOperator, name)
    __repr__ = _swig_repr

    def __init__(self, dfes, rfes):
        """__init__(mfem::ParDiscreteLinearOperator self, ParFiniteElementSpace dfes, ParFiniteElementSpace rfes) -> ParDiscreteLinearOperator"""
        this = _pbilinearform.new_ParDiscreteLinearOperator(dfes, rfes)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ParallelAssemble(self):
        """ParallelAssemble(ParDiscreteLinearOperator self) -> HypreParMatrix"""
        return _pbilinearform.ParDiscreteLinearOperator_ParallelAssemble(self)


    def GetParBlocks(self, blocks):
        """GetParBlocks(ParDiscreteLinearOperator self, mfem::Array2D< mfem::HypreParMatrix * > & blocks)"""
        return _pbilinearform.ParDiscreteLinearOperator_GetParBlocks(self, blocks)

    __swig_destroy__ = _pbilinearform.delete_ParDiscreteLinearOperator
    __del__ = lambda self: None
ParDiscreteLinearOperator_swigregister = _pbilinearform.ParDiscreteLinearOperator_swigregister
ParDiscreteLinearOperator_swigregister(ParDiscreteLinearOperator)

# This file is compatible with both classic and new-style classes.


