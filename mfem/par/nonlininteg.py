# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nonlininteg', [dirname(__file__)])
        except ImportError:
            import _nonlininteg
            return _nonlininteg
        if fp is not None:
            try:
                _mod = imp.load_module('_nonlininteg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nonlininteg = swig_import_helper()
    del swig_import_helper
else:
    import _nonlininteg
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


import vector
import array
import operators
import fespace
import coefficient
import matrix
import intrules
import sparsemat
import densemat
import eltrans
import fe
import mesh
import ncmesh
import element
import geom
import table
import vertex
import fe_coll
import lininteg
class NonlinearFormIntegrator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonlinearFormIntegrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NonlinearFormIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def AssembleElementVector(self, el, Tr, elfun, elvect):
        return _nonlininteg.NonlinearFormIntegrator_AssembleElementVector(self, el, Tr, elfun, elvect)

    def AssembleElementGrad(self, el, Tr, elfun, elmat):
        return _nonlininteg.NonlinearFormIntegrator_AssembleElementGrad(self, el, Tr, elfun, elmat)

    def GetElementEnergy(self, el, Tr, elfun):
        return _nonlininteg.NonlinearFormIntegrator_GetElementEnergy(self, el, Tr, elfun)
    __swig_destroy__ = _nonlininteg.delete_NonlinearFormIntegrator
    __del__ = lambda self: None
NonlinearFormIntegrator_swigregister = _nonlininteg.NonlinearFormIntegrator_swigregister
NonlinearFormIntegrator_swigregister(NonlinearFormIntegrator)

class HyperelasticModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HyperelasticModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HyperelasticModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetTransformation(self, _T):
        return _nonlininteg.HyperelasticModel_SetTransformation(self, _T)

    def EvalW(self, J):
        return _nonlininteg.HyperelasticModel_EvalW(self, J)

    def EvalP(self, J, P):
        return _nonlininteg.HyperelasticModel_EvalP(self, J, P)

    def AssembleH(self, J, DS, weight, A):
        return _nonlininteg.HyperelasticModel_AssembleH(self, J, DS, weight, A)
    __swig_destroy__ = _nonlininteg.delete_HyperelasticModel
    __del__ = lambda self: None
HyperelasticModel_swigregister = _nonlininteg.HyperelasticModel_swigregister
HyperelasticModel_swigregister(HyperelasticModel)

class InverseHarmonicModel(HyperelasticModel):
    __swig_setmethods__ = {}
    for _s in [HyperelasticModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseHarmonicModel, name, value)
    __swig_getmethods__ = {}
    for _s in [HyperelasticModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseHarmonicModel, name)
    __repr__ = _swig_repr

    def EvalW(self, J):
        return _nonlininteg.InverseHarmonicModel_EvalW(self, J)

    def EvalP(self, J, P):
        return _nonlininteg.InverseHarmonicModel_EvalP(self, J, P)

    def AssembleH(self, J, DS, weight, A):
        return _nonlininteg.InverseHarmonicModel_AssembleH(self, J, DS, weight, A)

    def __init__(self):
        this = _nonlininteg.new_InverseHarmonicModel()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _nonlininteg.delete_InverseHarmonicModel
    __del__ = lambda self: None
InverseHarmonicModel_swigregister = _nonlininteg.InverseHarmonicModel_swigregister
InverseHarmonicModel_swigregister(InverseHarmonicModel)

class NeoHookeanModel(HyperelasticModel):
    __swig_setmethods__ = {}
    for _s in [HyperelasticModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeoHookeanModel, name, value)
    __swig_getmethods__ = {}
    for _s in [HyperelasticModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NeoHookeanModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nonlininteg.new_NeoHookeanModel(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def EvalW(self, J):
        return _nonlininteg.NeoHookeanModel_EvalW(self, J)

    def EvalP(self, J, P):
        return _nonlininteg.NeoHookeanModel_EvalP(self, J, P)

    def AssembleH(self, J, DS, weight, A):
        return _nonlininteg.NeoHookeanModel_AssembleH(self, J, DS, weight, A)
    __swig_destroy__ = _nonlininteg.delete_NeoHookeanModel
    __del__ = lambda self: None
NeoHookeanModel_swigregister = _nonlininteg.NeoHookeanModel_swigregister
NeoHookeanModel_swigregister(NeoHookeanModel)

class HyperelasticNLFIntegrator(NonlinearFormIntegrator):
    __swig_setmethods__ = {}
    for _s in [NonlinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HyperelasticNLFIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [NonlinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HyperelasticNLFIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, m):
        this = _nonlininteg.new_HyperelasticNLFIntegrator(m)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def GetElementEnergy(self, el, Tr, elfun):
        return _nonlininteg.HyperelasticNLFIntegrator_GetElementEnergy(self, el, Tr, elfun)

    def AssembleElementVector(self, el, Tr, elfun, elvect):
        return _nonlininteg.HyperelasticNLFIntegrator_AssembleElementVector(self, el, Tr, elfun, elvect)

    def AssembleElementGrad(self, el, Tr, elfun, elmat):
        return _nonlininteg.HyperelasticNLFIntegrator_AssembleElementGrad(self, el, Tr, elfun, elmat)
    __swig_destroy__ = _nonlininteg.delete_HyperelasticNLFIntegrator
    __del__ = lambda self: None
HyperelasticNLFIntegrator_swigregister = _nonlininteg.HyperelasticNLFIntegrator_swigregister
HyperelasticNLFIntegrator_swigregister(HyperelasticNLFIntegrator)

# This file is compatible with both classic and new-style classes.


