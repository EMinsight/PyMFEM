# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_operators')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_operators')
    _operators = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_operators', [dirname(__file__)])
        except ImportError:
            import _operators
            return _operators
        try:
            _mod = imp.load_module('_operators', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _operators = swig_import_helper()
    del swig_import_helper
else:
    import _operators
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import vector
import array
import ostream_typemap
class Operator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Operator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Operator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == Operator:
            _self = None
        else:
            _self = self
        this = _operators.new_Operator(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Height(self):
        return _operators.Operator_Height(self)

    def NumRows(self):
        return _operators.Operator_NumRows(self)

    def Width(self):
        return _operators.Operator_Width(self)

    def NumCols(self):
        return _operators.Operator_NumCols(self)

    def Mult(self, x, y):
        return _operators.Operator_Mult(self, x, y)

    def MultTranspose(self, x, y):
        return _operators.Operator_MultTranspose(self, x, y)

    def GetGradient(self, x):
        return _operators.Operator_GetGradient(self, x)

    def GetProlongation(self):
        return _operators.Operator_GetProlongation(self)

    def GetRestriction(self):
        return _operators.Operator_GetRestriction(self)

    def FormLinearSystem(self, ess_tdof_list, x, b, A, X, B, copy_interior=0):
        return _operators.Operator_FormLinearSystem(self, ess_tdof_list, x, b, A, X, B, copy_interior)

    def RecoverFEMSolution(self, X, b, x):
        return _operators.Operator_RecoverFEMSolution(self, X, b, x)

    def PrintMatlab(self, out, n=0, m=0):
        return _operators.Operator_PrintMatlab(self, out, n, m)
    __swig_destroy__ = _operators.delete_Operator
    __del__ = lambda self: None
    MFEM_SPARSEMAT = _operators.Operator_MFEM_SPARSEMAT
    Hypre_ParCSR = _operators.Operator_Hypre_ParCSR
    PETSC_MATAIJ = _operators.Operator_PETSC_MATAIJ
    PETSC_MATIS = _operators.Operator_PETSC_MATIS
    PETSC_MATSHELL = _operators.Operator_PETSC_MATSHELL
    PETSC_MATNEST = _operators.Operator_PETSC_MATNEST
    PETSC_MATHYPRE = _operators.Operator_PETSC_MATHYPRE
    PETSC_MATGENERIC = _operators.Operator_PETSC_MATGENERIC
    def __disown__(self):
        self.this.disown()
        _operators.disown_Operator(self)
        return weakref_proxy(self)
Operator_swigregister = _operators.Operator_swigregister
Operator_swigregister(Operator)

class TimeDependentOperator(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeDependentOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeDependentOperator, name)
    __repr__ = _swig_repr
    EXPLICIT = _operators.TimeDependentOperator_EXPLICIT
    IMPLICIT = _operators.TimeDependentOperator_IMPLICIT
    HOMOGENEOUS = _operators.TimeDependentOperator_HOMOGENEOUS

    def __init__(self, *args):
        if self.__class__ == TimeDependentOperator:
            _self = None
        else:
            _self = self
        this = _operators.new_TimeDependentOperator(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetTime(self):
        return _operators.TimeDependentOperator_GetTime(self)

    def SetTime(self, _t):
        return _operators.TimeDependentOperator_SetTime(self, _t)

    def isExplicit(self):
        return _operators.TimeDependentOperator_isExplicit(self)

    def isImplicit(self):
        return _operators.TimeDependentOperator_isImplicit(self)

    def isHomogeneous(self):
        return _operators.TimeDependentOperator_isHomogeneous(self)

    def ExplicitMult(self, x, y):
        return _operators.TimeDependentOperator_ExplicitMult(self, x, y)

    def ImplicitMult(self, x, k, y):
        return _operators.TimeDependentOperator_ImplicitMult(self, x, k, y)

    def Mult(self, x, y):
        return _operators.TimeDependentOperator_Mult(self, x, y)

    def ImplicitSolve(self, dt, x, k):
        return _operators.TimeDependentOperator_ImplicitSolve(self, dt, x, k)

    def GetImplicitGradient(self, x, k, shift):
        return _operators.TimeDependentOperator_GetImplicitGradient(self, x, k, shift)

    def GetExplicitGradient(self, x):
        return _operators.TimeDependentOperator_GetExplicitGradient(self, x)
    __swig_destroy__ = _operators.delete_TimeDependentOperator
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _operators.disown_TimeDependentOperator(self)
        return weakref_proxy(self)
TimeDependentOperator_swigregister = _operators.TimeDependentOperator_swigregister
TimeDependentOperator_swigregister(TimeDependentOperator)

class Solver(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["iterative_mode"] = _operators.Solver_iterative_mode_set
    __swig_getmethods__["iterative_mode"] = _operators.Solver_iterative_mode_get
    if _newclass:
        iterative_mode = _swig_property(_operators.Solver_iterative_mode_get, _operators.Solver_iterative_mode_set)

    def SetOperator(self, op):
        return _operators.Solver_SetOperator(self, op)
    __swig_destroy__ = _operators.delete_Solver
    __del__ = lambda self: None
Solver_swigregister = _operators.Solver_swigregister
Solver_swigregister(Solver)

class IdentityOperator(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentityOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdentityOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n):
        this = _operators.new_IdentityOperator(n)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Mult(self, x, y):
        return _operators.IdentityOperator_Mult(self, x, y)
    __swig_destroy__ = _operators.delete_IdentityOperator
    __del__ = lambda self: None
IdentityOperator_swigregister = _operators.IdentityOperator_swigregister
IdentityOperator_swigregister(IdentityOperator)

class TransposeOperator(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransposeOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransposeOperator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _operators.new_TransposeOperator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Mult(self, x, y):
        return _operators.TransposeOperator_Mult(self, x, y)

    def MultTranspose(self, x, y):
        return _operators.TransposeOperator_MultTranspose(self, x, y)
    __swig_destroy__ = _operators.delete_TransposeOperator
    __del__ = lambda self: None
TransposeOperator_swigregister = _operators.TransposeOperator_swigregister
TransposeOperator_swigregister(TransposeOperator)

class RAPOperator(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RAPOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RAPOperator, name)
    __repr__ = _swig_repr

    def __init__(self, Rt_, A_, P_):
        this = _operators.new_RAPOperator(Rt_, A_, P_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Mult(self, x, y):
        return _operators.RAPOperator_Mult(self, x, y)

    def MultTranspose(self, x, y):
        return _operators.RAPOperator_MultTranspose(self, x, y)
    __swig_destroy__ = _operators.delete_RAPOperator
    __del__ = lambda self: None
RAPOperator_swigregister = _operators.RAPOperator_swigregister
RAPOperator_swigregister(RAPOperator)

class TripleProductOperator(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TripleProductOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TripleProductOperator, name)
    __repr__ = _swig_repr

    def __init__(self, A, B, C, ownA, ownB, ownC):
        this = _operators.new_TripleProductOperator(A, B, C, ownA, ownB, ownC)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Mult(self, x, y):
        return _operators.TripleProductOperator_Mult(self, x, y)

    def MultTranspose(self, x, y):
        return _operators.TripleProductOperator_MultTranspose(self, x, y)
    __swig_destroy__ = _operators.delete_TripleProductOperator
    __del__ = lambda self: None
TripleProductOperator_swigregister = _operators.TripleProductOperator_swigregister
TripleProductOperator_swigregister(TripleProductOperator)

class ConstrainedOperator(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstrainedOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstrainedOperator, name)
    __repr__ = _swig_repr

    def __init__(self, A, list, own_A=False):
        this = _operators.new_ConstrainedOperator(A, list, own_A)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def EliminateRHS(self, x, b):
        return _operators.ConstrainedOperator_EliminateRHS(self, x, b)

    def Mult(self, x, y):
        return _operators.ConstrainedOperator_Mult(self, x, y)
    __swig_destroy__ = _operators.delete_ConstrainedOperator
    __del__ = lambda self: None
ConstrainedOperator_swigregister = _operators.ConstrainedOperator_swigregister
ConstrainedOperator_swigregister(ConstrainedOperator)

class PyOperatorBase(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyOperatorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyOperatorBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == PyOperatorBase:
            _self = None
        else:
            _self = self
        this = _operators.new_PyOperatorBase(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Mult(self, x, y):
        return _operators.PyOperatorBase_Mult(self, x, y)

    def _EvalMult(self, arg0):
        return _operators.PyOperatorBase__EvalMult(self, arg0)
    __swig_destroy__ = _operators.delete_PyOperatorBase
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _operators.disown_PyOperatorBase(self)
        return weakref_proxy(self)
PyOperatorBase_swigregister = _operators.PyOperatorBase_swigregister
PyOperatorBase_swigregister(PyOperatorBase)

class PyTimeDependentOperatorBase(TimeDependentOperator):
    __swig_setmethods__ = {}
    for _s in [TimeDependentOperator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PyTimeDependentOperatorBase, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeDependentOperator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PyTimeDependentOperatorBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == PyTimeDependentOperatorBase:
            _self = None
        else:
            _self = self
        this = _operators.new_PyTimeDependentOperatorBase(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Mult(self, x, y):
        return _operators.PyTimeDependentOperatorBase_Mult(self, x, y)

    def _EvalMult(self, arg0):
        return _operators.PyTimeDependentOperatorBase__EvalMult(self, arg0)
    __swig_destroy__ = _operators.delete_PyTimeDependentOperatorBase
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _operators.disown_PyTimeDependentOperatorBase(self)
        return weakref_proxy(self)
PyTimeDependentOperatorBase_swigregister = _operators.PyTimeDependentOperatorBase_swigregister
PyTimeDependentOperatorBase_swigregister(PyTimeDependentOperatorBase)


class PyOperator(PyOperatorBase):
   def __init__(self, *args):
       PyOperatorBase.__init__(self, *args)
   def _EvalMult(self, x):
       return self.EvalMult(x.GetDataArray())
   def EvalMult(self, x):
       raise NotImplementedError('you must specify this method')

class PyTimeDependentOperator(PyTimeDependentOperatorBase):
   def __init__(self, *args):  
       PyTimeDependentOperatorBase.__init__(self, *args)
   def _EvalMult(self, x):
       return self.EvalMult(x.GetDataArray())
   def EvalMult(self, x):
       raise NotImplementedError('you must specify this method')


# This file is compatible with both classic and new-style classes.


