# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_operators', [dirname(__file__)])
        except ImportError:
            import _operators
            return _operators
        if fp is not None:
            try:
                _mod = imp.load_module('_operators', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _operators = swig_import_helper()
    del swig_import_helper
else:
    import _operators
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


import vector
import array
class Operator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Operator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Operator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Height(self):
        return _operators.Operator_Height(self)

    def NumRows(self):
        return _operators.Operator_NumRows(self)

    def Width(self):
        return _operators.Operator_Width(self)

    def NumCols(self):
        return _operators.Operator_NumCols(self)

    def Mult(self, x, y):
        return _operators.Operator_Mult(self, x, y)

    def MultTranspose(self, x, y):
        return _operators.Operator_MultTranspose(self, x, y)

    def GetGradient(self, x):
        return _operators.Operator_GetGradient(self, x)

    def PrintMatlab(self, out, n=0, m=0):
        return _operators.Operator_PrintMatlab(self, out, n, m)
    __swig_destroy__ = _operators.delete_Operator
    __del__ = lambda self: None
Operator_swigregister = _operators.Operator_swigregister
Operator_swigregister(Operator)

class TimeDependentOperator(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeDependentOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeDependentOperator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetTime(self):
        return _operators.TimeDependentOperator_GetTime(self)

    def SetTime(self, _t):
        return _operators.TimeDependentOperator_SetTime(self, _t)

    def ImplicitSolve(self, dt, x, k):
        return _operators.TimeDependentOperator_ImplicitSolve(self, dt, x, k)
    __swig_destroy__ = _operators.delete_TimeDependentOperator
    __del__ = lambda self: None
TimeDependentOperator_swigregister = _operators.TimeDependentOperator_swigregister
TimeDependentOperator_swigregister(TimeDependentOperator)

class Solver(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["iterative_mode"] = _operators.Solver_iterative_mode_set
    __swig_getmethods__["iterative_mode"] = _operators.Solver_iterative_mode_get
    if _newclass:
        iterative_mode = _swig_property(_operators.Solver_iterative_mode_get, _operators.Solver_iterative_mode_set)

    def SetOperator(self, op):
        return _operators.Solver_SetOperator(self, op)
    __swig_destroy__ = _operators.delete_Solver
    __del__ = lambda self: None
Solver_swigregister = _operators.Solver_swigregister
Solver_swigregister(Solver)

class IdentityOperator(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentityOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdentityOperator, name)
    __repr__ = _swig_repr

    def __init__(self, n):
        this = _operators.new_IdentityOperator(n)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Mult(self, x, y):
        return _operators.IdentityOperator_Mult(self, x, y)
    __swig_destroy__ = _operators.delete_IdentityOperator
    __del__ = lambda self: None
IdentityOperator_swigregister = _operators.IdentityOperator_swigregister
IdentityOperator_swigregister(IdentityOperator)

class TransposeOperator(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransposeOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransposeOperator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _operators.new_TransposeOperator(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Mult(self, x, y):
        return _operators.TransposeOperator_Mult(self, x, y)

    def MultTranspose(self, x, y):
        return _operators.TransposeOperator_MultTranspose(self, x, y)
    __swig_destroy__ = _operators.delete_TransposeOperator
    __del__ = lambda self: None
TransposeOperator_swigregister = _operators.TransposeOperator_swigregister
TransposeOperator_swigregister(TransposeOperator)

class RAPOperator(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RAPOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RAPOperator, name)
    __repr__ = _swig_repr

    def __init__(self, Rt_, A_, P_):
        this = _operators.new_RAPOperator(Rt_, A_, P_)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Mult(self, x, y):
        return _operators.RAPOperator_Mult(self, x, y)

    def MultTranspose(self, x, y):
        return _operators.RAPOperator_MultTranspose(self, x, y)
    __swig_destroy__ = _operators.delete_RAPOperator
    __del__ = lambda self: None
RAPOperator_swigregister = _operators.RAPOperator_swigregister
RAPOperator_swigregister(RAPOperator)

class TripleProductOperator(Operator):
    __swig_setmethods__ = {}
    for _s in [Operator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TripleProductOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [Operator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TripleProductOperator, name)
    __repr__ = _swig_repr

    def __init__(self, A, B, C, ownA, ownB, ownC):
        this = _operators.new_TripleProductOperator(A, B, C, ownA, ownB, ownC)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def Mult(self, x, y):
        return _operators.TripleProductOperator_Mult(self, x, y)

    def MultTranspose(self, x, y):
        return _operators.TripleProductOperator_MultTranspose(self, x, y)
    __swig_destroy__ = _operators.delete_TripleProductOperator
    __del__ = lambda self: None
TripleProductOperator_swigregister = _operators.TripleProductOperator_swigregister
TripleProductOperator_swigregister(TripleProductOperator)

# This file is compatible with both classic and new-style classes.


