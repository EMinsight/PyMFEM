# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_stable3d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_stable3d')
    _stable3d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_stable3d', [dirname(__file__)])
        except ImportError:
            import _stable3d
            return _stable3d
        try:
            _mod = imp.load_module('_stable3d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _stable3d = swig_import_helper()
    del swig_import_helper
else:
    import _stable3d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import mfem._ser.element
import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.densemat
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.geom
import mfem._ser.intrules
import mfem._ser.table
import mfem._ser.hash
class STable3DNode(_object):
    """Proxy of C++ mfem::STable3DNode class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STable3DNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STable3DNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Prev"] = _stable3d.STable3DNode_Prev_set
    __swig_getmethods__["Prev"] = _stable3d.STable3DNode_Prev_get
    if _newclass:
        Prev = _swig_property(_stable3d.STable3DNode_Prev_get, _stable3d.STable3DNode_Prev_set)
    __swig_setmethods__["Column"] = _stable3d.STable3DNode_Column_set
    __swig_getmethods__["Column"] = _stable3d.STable3DNode_Column_get
    if _newclass:
        Column = _swig_property(_stable3d.STable3DNode_Column_get, _stable3d.STable3DNode_Column_set)
    __swig_setmethods__["Floor"] = _stable3d.STable3DNode_Floor_set
    __swig_getmethods__["Floor"] = _stable3d.STable3DNode_Floor_get
    if _newclass:
        Floor = _swig_property(_stable3d.STable3DNode_Floor_get, _stable3d.STable3DNode_Floor_set)
    __swig_setmethods__["Number"] = _stable3d.STable3DNode_Number_set
    __swig_getmethods__["Number"] = _stable3d.STable3DNode_Number_get
    if _newclass:
        Number = _swig_property(_stable3d.STable3DNode_Number_get, _stable3d.STable3DNode_Number_set)

    def __init__(self):
        """__init__(mfem::STable3DNode self) -> STable3DNode"""
        this = _stable3d.new_STable3DNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _stable3d.delete_STable3DNode
    __del__ = lambda self: None
STable3DNode_swigregister = _stable3d.STable3DNode_swigregister
STable3DNode_swigregister(STable3DNode)

class STable3D(_object):
    """Proxy of C++ mfem::STable3D class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, STable3D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, STable3D, name)
    __repr__ = _swig_repr

    def __init__(self, nr):
        """__init__(mfem::STable3D self, int nr) -> STable3D"""
        this = _stable3d.new_STable3D(nr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Push(self, r, c, f):
        """Push(STable3D self, int r, int c, int f) -> int"""
        return _stable3d.STable3D_Push(self, r, c, f)


    def Index(self, r, c, f):
        """Index(STable3D self, int r, int c, int f) -> int"""
        return _stable3d.STable3D_Index(self, r, c, f)


    def Push4(self, r, c, f, t):
        """Push4(STable3D self, int r, int c, int f, int t) -> int"""
        return _stable3d.STable3D_Push4(self, r, c, f, t)


    def __call__(self, *args):
        """
        __call__(STable3D self, int r, int c, int f) -> int
        __call__(STable3D self, int r, int c, int f, int t) -> int
        """
        return _stable3d.STable3D___call__(self, *args)


    def NumberOfElements(self):
        """NumberOfElements(STable3D self) -> int"""
        return _stable3d.STable3D_NumberOfElements(self)

    __swig_destroy__ = _stable3d.delete_STable3D
    __del__ = lambda self: None

    def Print(self, *args):
        """
        Print(STable3D self, std::ostream & out)
        Print(STable3D self)
        Print(STable3D self, char const * file, int precision=8)
        Print(STable3D self, char const * file)
        """
        return _stable3d.STable3D_Print(self, *args)

STable3D_swigregister = _stable3d.STable3D_swigregister
STable3D_swigregister(STable3D)

# This file is compatible with both classic and new-style classes.


