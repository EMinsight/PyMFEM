# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mesh')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mesh')
    _mesh = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mesh', [dirname(__file__)])
        except ImportError:
            import _mesh
            return _mesh
        try:
            _mod = imp.load_module('_mesh', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mesh = swig_import_helper()
    del swig_import_helper
else:
    import _mesh
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _mesh.new_intp()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mesh.delete_intp
    __del__ = lambda self: None

    def assign(self, value):
        return _mesh.intp_assign(self, value)

    def value(self):
        return _mesh.intp_value(self)

    def cast(self):
        return _mesh.intp_cast(self)
    if _newclass:
        frompointer = staticmethod(_mesh.intp_frompointer)
    else:
        frompointer = _mesh.intp_frompointer
intp_swigregister = _mesh.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(t):
    return _mesh.intp_frompointer(t)
intp_frompointer = _mesh.intp_frompointer

class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _mesh.new_doublep()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mesh.delete_doublep
    __del__ = lambda self: None

    def assign(self, value):
        return _mesh.doublep_assign(self, value)

    def value(self):
        return _mesh.doublep_value(self)

    def cast(self):
        return _mesh.doublep_cast(self)
    if _newclass:
        frompointer = staticmethod(_mesh.doublep_frompointer)
    else:
        frompointer = _mesh.doublep_frompointer
doublep_swigregister = _mesh.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(t):
    return _mesh.doublep_frompointer(t)
doublep_frompointer = _mesh.doublep_frompointer

import mfem._ser.matrix
import mfem._ser.vector
import mfem._ser.array
import mfem._ser.ostream_typemap
import mfem._ser.operators
import mfem._ser.ncmesh
import mfem._ser.gridfunc
import mfem._ser.coefficient
import mfem._ser.intrules
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.fespace
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.handle
import mfem._ser.bilininteg
import mfem._ser.linearform
import mfem._ser.element
import mfem._ser.geom
import mfem._ser.table
import mfem._ser.vertex
class Mesh(_object):
    """Proxy of C++ mfem::Mesh class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)
    __repr__ = _swig_repr
    NONE = _mesh.Mesh_NONE
    REFINE = _mesh.Mesh_REFINE
    DEREFINE = _mesh.Mesh_DEREFINE
    REBALANCE = _mesh.Mesh_REBALANCE
    __swig_getmethods__["attributes"] = _mesh.Mesh_attributes_get
    if _newclass:
        attributes = _swig_property(_mesh.Mesh_attributes_get)
    __swig_getmethods__["bdr_attributes"] = _mesh.Mesh_bdr_attributes_get
    if _newclass:
        bdr_attributes = _swig_property(_mesh.Mesh_bdr_attributes_get)
    __swig_setmethods__["NURBSext"] = _mesh.Mesh_NURBSext_set
    __swig_getmethods__["NURBSext"] = _mesh.Mesh_NURBSext_get
    if _newclass:
        NURBSext = _swig_property(_mesh.Mesh_NURBSext_get, _mesh.Mesh_NURBSext_set)
    __swig_setmethods__["ncmesh"] = _mesh.Mesh_ncmesh_set
    __swig_getmethods__["ncmesh"] = _mesh.Mesh_ncmesh_get
    if _newclass:
        ncmesh = _swig_property(_mesh.Mesh_ncmesh_get, _mesh.Mesh_ncmesh_set)
    __swig_setmethods__["remove_unused_vertices"] = _mesh.Mesh_remove_unused_vertices_set
    __swig_getmethods__["remove_unused_vertices"] = _mesh.Mesh_remove_unused_vertices_get
    if _newclass:
        remove_unused_vertices = _swig_property(_mesh.Mesh_remove_unused_vertices_get, _mesh.Mesh_remove_unused_vertices_set)

    def NewElement(self, geom):
        """NewElement(Mesh self, int geom) -> Element"""
        return _mesh.Mesh_NewElement(self, geom)


    def AddVertex(self, arg2):
        """AddVertex(Mesh self, double const * arg2)"""
        return _mesh.Mesh_AddVertex(self, arg2)


    def AddTri(self, vi, attr=1):
        """
        AddTri(Mesh self, int const * vi, int attr=1)
        AddTri(Mesh self, int const * vi)
        """
        return _mesh.Mesh_AddTri(self, vi, attr)


    def AddTriangle(self, vi, attr=1):
        """
        AddTriangle(Mesh self, int const * vi, int attr=1)
        AddTriangle(Mesh self, int const * vi)
        """
        return _mesh.Mesh_AddTriangle(self, vi, attr)


    def AddQuad(self, vi, attr=1):
        """
        AddQuad(Mesh self, int const * vi, int attr=1)
        AddQuad(Mesh self, int const * vi)
        """
        return _mesh.Mesh_AddQuad(self, vi, attr)


    def AddTet(self, vi, attr=1):
        """
        AddTet(Mesh self, int const * vi, int attr=1)
        AddTet(Mesh self, int const * vi)
        """
        return _mesh.Mesh_AddTet(self, vi, attr)


    def AddHex(self, vi, attr=1):
        """
        AddHex(Mesh self, int const * vi, int attr=1)
        AddHex(Mesh self, int const * vi)
        """
        return _mesh.Mesh_AddHex(self, vi, attr)


    def AddHexAsTets(self, vi, attr=1):
        """
        AddHexAsTets(Mesh self, int const * vi, int attr=1)
        AddHexAsTets(Mesh self, int const * vi)
        """
        return _mesh.Mesh_AddHexAsTets(self, vi, attr)


    def AddElement(self, elem):
        """AddElement(Mesh self, Element elem)"""
        return _mesh.Mesh_AddElement(self, elem)


    def AddBdrElement(self, elem):
        """AddBdrElement(Mesh self, Element elem)"""
        return _mesh.Mesh_AddBdrElement(self, elem)


    def AddBdrSegment(self, vi, attr=1):
        """
        AddBdrSegment(Mesh self, int const * vi, int attr=1)
        AddBdrSegment(Mesh self, int const * vi)
        """
        return _mesh.Mesh_AddBdrSegment(self, vi, attr)


    def AddBdrTriangle(self, vi, attr=1):
        """
        AddBdrTriangle(Mesh self, int const * vi, int attr=1)
        AddBdrTriangle(Mesh self, int const * vi)
        """
        return _mesh.Mesh_AddBdrTriangle(self, vi, attr)


    def AddBdrQuad(self, vi, attr=1):
        """
        AddBdrQuad(Mesh self, int const * vi, int attr=1)
        AddBdrQuad(Mesh self, int const * vi)
        """
        return _mesh.Mesh_AddBdrQuad(self, vi, attr)


    def AddBdrQuadAsTriangles(self, vi, attr=1):
        """
        AddBdrQuadAsTriangles(Mesh self, int const * vi, int attr=1)
        AddBdrQuadAsTriangles(Mesh self, int const * vi)
        """
        return _mesh.Mesh_AddBdrQuadAsTriangles(self, vi, attr)


    def GenerateBoundaryElements(self):
        """GenerateBoundaryElements(Mesh self)"""
        return _mesh.Mesh_GenerateBoundaryElements(self)


    def FinalizeTriMesh(self, generate_edges=0, refine=0, fix_orientation=True):
        """
        FinalizeTriMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)
        FinalizeTriMesh(Mesh self, int generate_edges=0, int refine=0)
        FinalizeTriMesh(Mesh self, int generate_edges=0)
        FinalizeTriMesh(Mesh self)
        """
        return _mesh.Mesh_FinalizeTriMesh(self, generate_edges, refine, fix_orientation)


    def FinalizeQuadMesh(self, generate_edges=0, refine=0, fix_orientation=True):
        """
        FinalizeQuadMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)
        FinalizeQuadMesh(Mesh self, int generate_edges=0, int refine=0)
        FinalizeQuadMesh(Mesh self, int generate_edges=0)
        FinalizeQuadMesh(Mesh self)
        """
        return _mesh.Mesh_FinalizeQuadMesh(self, generate_edges, refine, fix_orientation)


    def FinalizeTetMesh(self, generate_edges=0, refine=0, fix_orientation=True):
        """
        FinalizeTetMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)
        FinalizeTetMesh(Mesh self, int generate_edges=0, int refine=0)
        FinalizeTetMesh(Mesh self, int generate_edges=0)
        FinalizeTetMesh(Mesh self)
        """
        return _mesh.Mesh_FinalizeTetMesh(self, generate_edges, refine, fix_orientation)


    def FinalizeHexMesh(self, generate_edges=0, refine=0, fix_orientation=True):
        """
        FinalizeHexMesh(Mesh self, int generate_edges=0, int refine=0, bool fix_orientation=True)
        FinalizeHexMesh(Mesh self, int generate_edges=0, int refine=0)
        FinalizeHexMesh(Mesh self, int generate_edges=0)
        FinalizeHexMesh(Mesh self)
        """
        return _mesh.Mesh_FinalizeHexMesh(self, generate_edges, refine, fix_orientation)


    def FinalizeTopology(self):
        """FinalizeTopology(Mesh self)"""
        return _mesh.Mesh_FinalizeTopology(self)


    def Finalize(self, refine=False, fix_orientation=False):
        """
        Finalize(Mesh self, bool refine=False, bool fix_orientation=False)
        Finalize(Mesh self, bool refine=False)
        Finalize(Mesh self)
        """
        return _mesh.Mesh_Finalize(self, refine, fix_orientation)


    def SetAttributes(self):
        """SetAttributes(Mesh self)"""
        return _mesh.Mesh_SetAttributes(self)


    def ReorderElements(self, ordering, reorder_vertices=True):
        """
        ReorderElements(Mesh self, intArray ordering, bool reorder_vertices=True)
        ReorderElements(Mesh self, intArray ordering)
        """
        return _mesh.Mesh_ReorderElements(self, ordering, reorder_vertices)


    def Load(self, input, generate_edges=0, refine=1, fix_orientation=True):
        """
        Load(Mesh self, std::istream & input, int generate_edges=0, int refine=1, bool fix_orientation=True)
        Load(Mesh self, std::istream & input, int generate_edges=0, int refine=1)
        Load(Mesh self, std::istream & input, int generate_edges=0)
        Load(Mesh self, std::istream & input)
        """
        return _mesh.Mesh_Load(self, input, generate_edges, refine, fix_orientation)


    def Clear(self):
        """Clear(Mesh self)"""
        return _mesh.Mesh_Clear(self)


    def MeshGenerator(self):
        """MeshGenerator(Mesh self) -> int"""
        return _mesh.Mesh_MeshGenerator(self)


    def GetNV(self):
        """GetNV(Mesh self) -> int"""
        return _mesh.Mesh_GetNV(self)


    def GetNE(self):
        """GetNE(Mesh self) -> int"""
        return _mesh.Mesh_GetNE(self)


    def GetNBE(self):
        """GetNBE(Mesh self) -> int"""
        return _mesh.Mesh_GetNBE(self)


    def GetNEdges(self):
        """GetNEdges(Mesh self) -> int"""
        return _mesh.Mesh_GetNEdges(self)


    def GetNFaces(self):
        """GetNFaces(Mesh self) -> int"""
        return _mesh.Mesh_GetNFaces(self)


    def GetNumFaces(self):
        """GetNumFaces(Mesh self) -> int"""
        return _mesh.Mesh_GetNumFaces(self)


    def ReduceInt(self, value):
        """ReduceInt(Mesh self, int value) -> long"""
        return _mesh.Mesh_ReduceInt(self, value)


    def GetGlobalNE(self):
        """GetGlobalNE(Mesh self) -> long"""
        return _mesh.Mesh_GetGlobalNE(self)


    def EulerNumber(self):
        """EulerNumber(Mesh self) -> int"""
        return _mesh.Mesh_EulerNumber(self)


    def EulerNumber2D(self):
        """EulerNumber2D(Mesh self) -> int"""
        return _mesh.Mesh_EulerNumber2D(self)


    def Dimension(self):
        """Dimension(Mesh self) -> int"""
        return _mesh.Mesh_Dimension(self)


    def SpaceDimension(self):
        """SpaceDimension(Mesh self) -> int"""
        return _mesh.Mesh_SpaceDimension(self)


    def GetVertex(self, *args):
        """
        GetVertex(Mesh self, int i) -> double const
        GetVertex(Mesh self, int i) -> double *
        """
        return _mesh.Mesh_GetVertex(self, *args)


    def GetElementData(self, geom, elem_vtx, attr):
        """GetElementData(Mesh self, int geom, intArray elem_vtx, intArray attr)"""
        return _mesh.Mesh_GetElementData(self, geom, elem_vtx, attr)


    def GetBdrElementData(self, geom, bdr_elem_vtx, bdr_attr):
        """GetBdrElementData(Mesh self, int geom, intArray bdr_elem_vtx, intArray bdr_attr)"""
        return _mesh.Mesh_GetBdrElementData(self, geom, bdr_elem_vtx, bdr_attr)


    def ChangeVertexDataOwnership(self, vertices, len_vertices, zerocopy=False):
        """
        ChangeVertexDataOwnership(Mesh self, double * vertices, int len_vertices, bool zerocopy=False)
        ChangeVertexDataOwnership(Mesh self, double * vertices, int len_vertices)
        """
        return _mesh.Mesh_ChangeVertexDataOwnership(self, vertices, len_vertices, zerocopy)


    def GetElementsArray(self):
        """GetElementsArray(Mesh self) -> mfem::Element const *const *"""
        return _mesh.Mesh_GetElementsArray(self)


    def GetElement(self, *args):
        """
        GetElement(Mesh self, int i) -> Element
        GetElement(Mesh self, int i) -> Element
        """
        return _mesh.Mesh_GetElement(self, *args)


    def GetBdrElement(self, *args):
        """
        GetBdrElement(Mesh self, int i) -> Element
        GetBdrElement(Mesh self, int i) -> Element
        """
        return _mesh.Mesh_GetBdrElement(self, *args)


    def GetFace(self, i):
        """GetFace(Mesh self, int i) -> Element"""
        return _mesh.Mesh_GetFace(self, i)


    def GetFaceBaseGeometry(self, i):
        """GetFaceBaseGeometry(Mesh self, int i) -> int"""
        return _mesh.Mesh_GetFaceBaseGeometry(self, i)


    def GetElementBaseGeometry(self, i=0):
        """
        GetElementBaseGeometry(Mesh self, int i=0) -> int
        GetElementBaseGeometry(Mesh self) -> int
        """
        return _mesh.Mesh_GetElementBaseGeometry(self, i)


    def GetBdrElementBaseGeometry(self, i=0):
        """
        GetBdrElementBaseGeometry(Mesh self, int i=0) -> int
        GetBdrElementBaseGeometry(Mesh self) -> int
        """
        return _mesh.Mesh_GetBdrElementBaseGeometry(self, i)


    def GetElementVertices(self, i):
        from  .array import intArray
        ivert = intArray()
        _mesh.Mesh_GetElementVertices(self, i, ivert)
        return ivert.ToList()



    def GetBdrElementVertices(self, i):
        from  .array import intArray
        ivert = intArray()
        _mesh.Mesh_GetBdrElementVertices(self, i, ivert)
        return ivert.ToList()



    def GetElementEdges(self, i):
        from  .array import intArray
        ia = intArray()
        ib = intArray()      
        _mesh.Mesh_GetElementEdges(self, i, ia, ib)
        return ia.ToList(), ib.ToList()      



    def GetBdrElementEdges(self, i):
        from  .array import intArray
        ia = intArray()
        ib = intArray()      
        _mesh.Mesh_GetBdrElementEdges(self, i, ia, ib)
        return ia.ToList(), ib.ToList()



    def GetFaceEdges(self, i):
        from  .array import intArray
        ia = intArray()
        ib = intArray()      
        _mesh.Mesh_GetFaceEdges(self, i, ia, ib)
        return ia.ToList(), ib.ToList()



    def GetFaceVertices(self, i):
        from  .array import intArray
        ia = intArray()
        _mesh.Mesh_GetFaceVertices(self, i, ia)
        return ia.ToList()



    def GetEdgeVertices(self, i):
        from  .array import intArray
        ia = intArray()
        _mesh.Mesh_GetEdgeVertices(self, i, ia)
        return ia.ToList()



    def GetFaceEdgeTable(self):
        """GetFaceEdgeTable(Mesh self) -> Table"""
        return _mesh.Mesh_GetFaceEdgeTable(self)


    def GetEdgeVertexTable(self):
        """GetEdgeVertexTable(Mesh self) -> Table"""
        return _mesh.Mesh_GetEdgeVertexTable(self)


    def GetElementFaces(self, i):
        from  .array import intArray
        ia = intArray()
        ib = intArray()      
        _mesh.Mesh_GetElementFaces(self, i, ia, ib)
        return ia.ToList(), ib.ToList()



    def GetBdrElementEdgeIndex(self, i):
        """GetBdrElementEdgeIndex(Mesh self, int i) -> int"""
        return _mesh.Mesh_GetBdrElementEdgeIndex(self, i)


    def GetBdrElementAdjacentElement(self, bdr_el):
        from mfem.ser import intp
        el = intp()
        info = intp()  
        _mesh.Mesh_GetBdrElementAdjacentElement(self, bdr_el, el, info)
        return el.value(), info.value()



    def GetElementType(self, i):
        """GetElementType(Mesh self, int i) -> int"""
        return _mesh.Mesh_GetElementType(self, i)


    def GetBdrElementType(self, i):
        """GetBdrElementType(Mesh self, int i) -> int"""
        return _mesh.Mesh_GetBdrElementType(self, i)


    def GetPointMatrix(self, i, pointmat):
        """GetPointMatrix(Mesh self, int i, DenseMatrix pointmat)"""
        return _mesh.Mesh_GetPointMatrix(self, i, pointmat)


    def GetBdrPointMatrix(self, i, pointmat):
        """GetBdrPointMatrix(Mesh self, int i, DenseMatrix pointmat)"""
        return _mesh.Mesh_GetBdrPointMatrix(self, i, pointmat)


    def GetTransformationFEforElementType(arg1):
        """GetTransformationFEforElementType(int arg1) -> FiniteElement"""
        return _mesh.Mesh_GetTransformationFEforElementType(arg1)

    GetTransformationFEforElementType = staticmethod(GetTransformationFEforElementType)

    def GetElementTransformation(self, i):
        from mfem.ser import IsoparametricTransformation
        Tr = IsoparametricTransformation()
        _mesh.Mesh_GetElementTransformation(self, i, Tr)
        return Tr



    def GetBdrElementTransformation(self, i):
        from mfem.ser import IsoparametricTransformation
        Tr = IsoparametricTransformation()
        _mesh.Mesh_GetBdrElementTransformation(self, i, Tr)
        return Tr



    def GetLocalFaceTransformation(self, face_type, elem_type, Transf, info):
        """GetLocalFaceTransformation(Mesh self, int face_type, int elem_type, IsoparametricTransformation Transf, int info)"""
        return _mesh.Mesh_GetLocalFaceTransformation(self, face_type, elem_type, Transf, info)


    def GetFaceTransformation(self, i):
        from mfem.ser import IsoparametricTransformation
        Tr = IsoparametricTransformation()
        _mesh.Mesh_GetFaceTransformation(self, i, Tr)
        return Tr



    def GetEdgeTransformation(self, i):
        from mfem.ser import IsoparametricTransformation
        Tr = IsoparametricTransformation()
        _mesh.Mesh_GetEdgeTransformation(self, i, Tr)
        return Tr



    def GetFaceElementTransformations(self, FaceNo, mask=31):
        """
        GetFaceElementTransformations(Mesh self, int FaceNo, int mask=31) -> FaceElementTransformations
        GetFaceElementTransformations(Mesh self, int FaceNo) -> FaceElementTransformations
        """
        return _mesh.Mesh_GetFaceElementTransformations(self, FaceNo, mask)


    def GetInteriorFaceTransformations(self, FaceNo):
        """GetInteriorFaceTransformations(Mesh self, int FaceNo) -> FaceElementTransformations"""
        return _mesh.Mesh_GetInteriorFaceTransformations(self, FaceNo)


    def GetBdrFaceTransformations(self, BdrElemNo):
        """GetBdrFaceTransformations(Mesh self, int BdrElemNo) -> FaceElementTransformations"""
        return _mesh.Mesh_GetBdrFaceTransformations(self, BdrElemNo)


    def FaceIsInterior(self, FaceNo):
        """FaceIsInterior(Mesh self, int FaceNo) -> bool"""
        return _mesh.Mesh_FaceIsInterior(self, FaceNo)


    def GetFaceElements(self, Face):
        from mfem.ser import intp
        Elem1 = intp()
        Elem2 = intp()  
        val = _mesh.Mesh_GetFaceElements(self, Face, Elem1, Elem2)
        return Elem1.value(), Elem2.value()



    def GetFaceInfos(self, Face, Inf1, Inf2):
        """GetFaceInfos(Mesh self, int Face, int * Inf1, int * Inf2)"""
        return _mesh.Mesh_GetFaceInfos(self, Face, Inf1, Inf2)


    def GetFaceGeometryType(self, Face):
        """GetFaceGeometryType(Mesh self, int Face) -> int"""
        return _mesh.Mesh_GetFaceGeometryType(self, Face)


    def GetFaceElementType(self, Face):
        """GetFaceElementType(Mesh self, int Face) -> int"""
        return _mesh.Mesh_GetFaceElementType(self, Face)


    def CheckElementOrientation(self, fix_it=True):
        """
        CheckElementOrientation(Mesh self, bool fix_it=True) -> int
        CheckElementOrientation(Mesh self) -> int
        """
        return _mesh.Mesh_CheckElementOrientation(self, fix_it)


    def CheckBdrElementOrientation(self, fix_it=True):
        """
        CheckBdrElementOrientation(Mesh self, bool fix_it=True) -> int
        CheckBdrElementOrientation(Mesh self) -> int
        """
        return _mesh.Mesh_CheckBdrElementOrientation(self, fix_it)


    def GetAttribute(self, i):
        """GetAttribute(Mesh self, int i) -> int"""
        return _mesh.Mesh_GetAttribute(self, i)


    def SetAttribute(self, i, attr):
        """SetAttribute(Mesh self, int i, int attr)"""
        return _mesh.Mesh_SetAttribute(self, i, attr)


    def GetBdrAttribute(self, i):
        """GetBdrAttribute(Mesh self, int i) -> int"""
        return _mesh.Mesh_GetBdrAttribute(self, i)


    def ElementToElementTable(self):
        """ElementToElementTable(Mesh self) -> Table"""
        return _mesh.Mesh_ElementToElementTable(self)


    def ElementToFaceTable(self):
        """ElementToFaceTable(Mesh self) -> Table"""
        return _mesh.Mesh_ElementToFaceTable(self)


    def ElementToEdgeTable(self):
        """ElementToEdgeTable(Mesh self) -> Table"""
        return _mesh.Mesh_ElementToEdgeTable(self)


    def GetVertexToElementTable(self):
        """GetVertexToElementTable(Mesh self) -> Table"""
        return _mesh.Mesh_GetVertexToElementTable(self)


    def GetFaceToElementTable(self):
        """GetFaceToElementTable(Mesh self) -> Table"""
        return _mesh.Mesh_GetFaceToElementTable(self)


    def ReorientTetMesh(self):
        """ReorientTetMesh(Mesh self)"""
        return _mesh.Mesh_ReorientTetMesh(self)


    def CartesianPartitioning(self, nxyz):
        """CartesianPartitioning(Mesh self, int [] nxyz) -> int *"""
        return _mesh.Mesh_CartesianPartitioning(self, nxyz)


    def GeneratePartitioning(self, nparts, part_method=1):
        """
        GeneratePartitioning(Mesh self, int nparts, int part_method=1) -> int
        GeneratePartitioning(Mesh self, int nparts) -> int *
        """
        return _mesh.Mesh_GeneratePartitioning(self, nparts, part_method)


    def CheckPartitioning(self, partitioning):
        """CheckPartitioning(Mesh self, int * partitioning)"""
        return _mesh.Mesh_CheckPartitioning(self, partitioning)


    def CheckDisplacements(self, displacements, tmax):
        """CheckDisplacements(Mesh self, Vector displacements, double & tmax)"""
        return _mesh.Mesh_CheckDisplacements(self, displacements, tmax)


    def MoveVertices(self, displacements):
        """MoveVertices(Mesh self, Vector displacements)"""
        return _mesh.Mesh_MoveVertices(self, displacements)


    def GetVertices(self, vert_coord):
        """GetVertices(Mesh self, Vector vert_coord)"""
        return _mesh.Mesh_GetVertices(self, vert_coord)


    def SetVertices(self, vert_coord):
        """SetVertices(Mesh self, Vector vert_coord)"""
        return _mesh.Mesh_SetVertices(self, vert_coord)


    def GetNode(self, i, coord):
        """GetNode(Mesh self, int i, double * coord)"""
        return _mesh.Mesh_GetNode(self, i, coord)


    def SetNode(self, i, coord):
        """SetNode(Mesh self, int i, double const * coord)"""
        return _mesh.Mesh_SetNode(self, i, coord)


    def MoveNodes(self, displacements):
        """MoveNodes(Mesh self, Vector displacements)"""
        return _mesh.Mesh_MoveNodes(self, displacements)


    def SetNodes(self, node_coord):
        """SetNodes(Mesh self, Vector node_coord)"""
        return _mesh.Mesh_SetNodes(self, node_coord)


    def OwnsNodes(self):
        """OwnsNodes(Mesh self) -> bool"""
        return _mesh.Mesh_OwnsNodes(self)


    def SetNodesOwner(self, nodes_owner):
        """SetNodesOwner(Mesh self, bool nodes_owner)"""
        return _mesh.Mesh_SetNodesOwner(self, nodes_owner)


    def NewNodes(self, nodes, make_owner=False):
        """
        NewNodes(Mesh self, GridFunction nodes, bool make_owner=False)
        NewNodes(Mesh self, GridFunction nodes)
        """
        return _mesh.Mesh_NewNodes(self, nodes, make_owner)


    def SwapNodes(self, nodes, own_nodes_):
        """SwapNodes(Mesh self, mfem::GridFunction *& nodes, int & own_nodes_)"""
        return _mesh.Mesh_SwapNodes(self, nodes, own_nodes_)


    def GetNodes(self, *args):
        """
        GetNodes(Mesh self, Vector node_coord)
        GetNodes(Mesh self) -> GridFunction
        GetNodes(Mesh self) -> GridFunction
        GetNodes(Mesh self, GridFunction nodes)
        """
        return _mesh.Mesh_GetNodes(self, *args)


    def SetNodalFESpace(self, nfes):
        """SetNodalFESpace(Mesh self, FiniteElementSpace nfes)"""
        return _mesh.Mesh_SetNodalFESpace(self, nfes)


    def SetNodalGridFunction(self, nodes, make_owner=False):
        """
        SetNodalGridFunction(Mesh self, GridFunction nodes, bool make_owner=False)
        SetNodalGridFunction(Mesh self, GridFunction nodes)
        """
        return _mesh.Mesh_SetNodalGridFunction(self, nodes, make_owner)


    def GetNodalFESpace(self):
        """GetNodalFESpace(Mesh self) -> FiniteElementSpace"""
        return _mesh.Mesh_GetNodalFESpace(self)


    def SetCurvature(self, order, discont=False, space_dim=-1, ordering=1):
        """
        SetCurvature(Mesh self, int order, bool discont=False, int space_dim=-1, int ordering=1)
        SetCurvature(Mesh self, int order, bool discont=False, int space_dim=-1)
        SetCurvature(Mesh self, int order, bool discont=False)
        SetCurvature(Mesh self, int order)
        """
        return _mesh.Mesh_SetCurvature(self, order, discont, space_dim, ordering)


    def UniformRefinement(self):
        """UniformRefinement(Mesh self)"""
        return _mesh.Mesh_UniformRefinement(self)


    def GeneralRefinement(self, *args):
        """
        GeneralRefinement(Mesh self, mfem::Array< mfem::Refinement > const & refinements, int nonconforming=-1, int nc_limit=0)
        GeneralRefinement(Mesh self, mfem::Array< mfem::Refinement > const & refinements, int nonconforming=-1)
        GeneralRefinement(Mesh self, mfem::Array< mfem::Refinement > const & refinements)
        GeneralRefinement(Mesh self, intArray el_to_refine, int nonconforming=-1, int nc_limit=0)
        GeneralRefinement(Mesh self, intArray el_to_refine, int nonconforming=-1)
        GeneralRefinement(Mesh self, intArray el_to_refine)
        """
        return _mesh.Mesh_GeneralRefinement(self, *args)


    def RandomRefinement(self, prob, aniso=False, nonconforming=-1, nc_limit=0):
        """
        RandomRefinement(Mesh self, double prob, bool aniso=False, int nonconforming=-1, int nc_limit=0)
        RandomRefinement(Mesh self, double prob, bool aniso=False, int nonconforming=-1)
        RandomRefinement(Mesh self, double prob, bool aniso=False)
        RandomRefinement(Mesh self, double prob)
        """
        return _mesh.Mesh_RandomRefinement(self, prob, aniso, nonconforming, nc_limit)


    def RefineAtVertex(self, vert, eps=0.0, nonconforming=-1):
        """
        RefineAtVertex(Mesh self, Vertex vert, double eps=0.0, int nonconforming=-1)
        RefineAtVertex(Mesh self, Vertex vert, double eps=0.0)
        RefineAtVertex(Mesh self, Vertex vert)
        """
        return _mesh.Mesh_RefineAtVertex(self, vert, eps, nonconforming)


    def RefineByError(self, *args):
        """
        RefineByError(Mesh self, doubleArray elem_error, double threshold, int nonconforming=-1, int nc_limit=0) -> bool
        RefineByError(Mesh self, doubleArray elem_error, double threshold, int nonconforming=-1) -> bool
        RefineByError(Mesh self, doubleArray elem_error, double threshold) -> bool
        RefineByError(Mesh self, Vector elem_error, double threshold, int nonconforming=-1, int nc_limit=0) -> bool
        RefineByError(Mesh self, Vector elem_error, double threshold, int nonconforming=-1) -> bool
        RefineByError(Mesh self, Vector elem_error, double threshold) -> bool
        """
        return _mesh.Mesh_RefineByError(self, *args)


    def DerefineByError(self, *args):
        """
        DerefineByError(Mesh self, doubleArray elem_error, double threshold, int nc_limit=0, int op=1) -> bool
        DerefineByError(Mesh self, doubleArray elem_error, double threshold, int nc_limit=0) -> bool
        DerefineByError(Mesh self, doubleArray elem_error, double threshold) -> bool
        DerefineByError(Mesh self, Vector elem_error, double threshold, int nc_limit=0, int op=1) -> bool
        DerefineByError(Mesh self, Vector elem_error, double threshold, int nc_limit=0) -> bool
        DerefineByError(Mesh self, Vector elem_error, double threshold) -> bool
        """
        return _mesh.Mesh_DerefineByError(self, *args)


    def KnotInsert(self, kv):
        """KnotInsert(Mesh self, mfem::Array< mfem::KnotVector * > & kv)"""
        return _mesh.Mesh_KnotInsert(self, kv)


    def DegreeElevate(self, rel_degree, degree=16):
        """
        DegreeElevate(Mesh self, int rel_degree, int degree=16)
        DegreeElevate(Mesh self, int rel_degree)
        """
        return _mesh.Mesh_DegreeElevate(self, rel_degree, degree)


    def EnsureNCMesh(self, triangles_nonconforming=False):
        """
        EnsureNCMesh(Mesh self, bool triangles_nonconforming=False)
        EnsureNCMesh(Mesh self)
        """
        return _mesh.Mesh_EnsureNCMesh(self, triangles_nonconforming)


    def Conforming(self):
        """Conforming(Mesh self) -> bool"""
        return _mesh.Mesh_Conforming(self)


    def Nonconforming(self):
        """Nonconforming(Mesh self) -> bool"""
        return _mesh.Mesh_Nonconforming(self)


    def GetRefinementTransforms(self):
        """GetRefinementTransforms(Mesh self) -> CoarseFineTransformations"""
        return _mesh.Mesh_GetRefinementTransforms(self)


    def GetLastOperation(self):
        """GetLastOperation(Mesh self) -> mfem::Mesh::Operation"""
        return _mesh.Mesh_GetLastOperation(self)


    def GetSequence(self):
        """GetSequence(Mesh self) -> long"""
        return _mesh.Mesh_GetSequence(self)


    def PrintXG(self, *args):
        """
        PrintXG(Mesh self, std::ostream & out)
        PrintXG(Mesh self)
        """
        return _mesh.Mesh_PrintXG(self, *args)


    def Print(self, *args):
        """
        Print(Mesh self, std::ostream & out)
        Print(Mesh self)
        """
        return _mesh.Mesh_Print(self, *args)


    def PrintVTK(self, *args):
        """
        PrintVTK(Mesh self, std::ostream & out)
        PrintVTK(Mesh self, std::ostream & out, int ref, int field_data=0)
        PrintVTK(Mesh self, std::ostream & out, int ref)
        """
        return _mesh.Mesh_PrintVTK(self, *args)


    def GetElementColoring(self, colors, el0=0):
        """
        GetElementColoring(Mesh self, intArray colors, int el0=0)
        GetElementColoring(Mesh self, intArray colors)
        """
        return _mesh.Mesh_GetElementColoring(self, colors, el0)


    def PrintWithPartitioning(self, partitioning, out, elem_attr=0):
        """
        PrintWithPartitioning(Mesh self, int * partitioning, std::ostream & out, int elem_attr=0)
        PrintWithPartitioning(Mesh self, int * partitioning, std::ostream & out)
        """
        return _mesh.Mesh_PrintWithPartitioning(self, partitioning, out, elem_attr)


    def PrintElementsWithPartitioning(self, partitioning, out, interior_faces=0):
        """
        PrintElementsWithPartitioning(Mesh self, int * partitioning, std::ostream & out, int interior_faces=0)
        PrintElementsWithPartitioning(Mesh self, int * partitioning, std::ostream & out)
        """
        return _mesh.Mesh_PrintElementsWithPartitioning(self, partitioning, out, interior_faces)


    def PrintSurfaces(self, Aface_face, out):
        """PrintSurfaces(Mesh self, Table Aface_face, std::ostream & out)"""
        return _mesh.Mesh_PrintSurfaces(self, Aface_face, out)


    def ScaleSubdomains(self, sf):
        """ScaleSubdomains(Mesh self, double sf)"""
        return _mesh.Mesh_ScaleSubdomains(self, sf)


    def ScaleElements(self, sf):
        """ScaleElements(Mesh self, double sf)"""
        return _mesh.Mesh_ScaleElements(self, sf)


    def Transform(self, *args):
        """
        Transform(Mesh self, void (*)(mfem::Vector const &,mfem::Vector &) f)
        Transform(Mesh self, VectorCoefficient deformation)
        """
        return _mesh.Mesh_Transform(self, *args)


    def RemoveUnusedVertices(self):
        """RemoveUnusedVertices(Mesh self)"""
        return _mesh.Mesh_RemoveUnusedVertices(self)


    def RemoveInternalBoundaries(self):
        """RemoveInternalBoundaries(Mesh self)"""
        return _mesh.Mesh_RemoveInternalBoundaries(self)


    def GetElementSize(self, *args):
        """
        GetElementSize(Mesh self, int i, int type=0) -> double
        GetElementSize(Mesh self, int i) -> double
        GetElementSize(Mesh self, int i, Vector dir) -> double
        """
        return _mesh.Mesh_GetElementSize(self, *args)


    def GetElementVolume(self, i):
        """GetElementVolume(Mesh self, int i) -> double"""
        return _mesh.Mesh_GetElementVolume(self, i)


    def GetBoundingBox(self, ref = 2):
        from  .vector import Vector
        min = Vector()
        max = Vector()      
        _mesh.Mesh_GetBoundingBox(self, min, max, ref)      
        return min.GetDataArray().copy(), max.GetDataArray().copy()



    def GetCharacteristics(self, h_min, h_max, kappa_min, kappa_max, Vh=None, Vk=None):
        """
        GetCharacteristics(Mesh self, double & h_min, double & h_max, double & kappa_min, double & kappa_max, Vector Vh=None, Vector Vk=None)
        GetCharacteristics(Mesh self, double & h_min, double & h_max, double & kappa_min, double & kappa_max, Vector Vh=None)
        GetCharacteristics(Mesh self, double & h_min, double & h_max, double & kappa_min, double & kappa_max)
        """
        return _mesh.Mesh_GetCharacteristics(self, h_min, h_max, kappa_min, kappa_max, Vh, Vk)


    def PrintCharacteristics(self, *args):
        """
        PrintCharacteristics(Mesh self, Vector Vh=None, Vector Vk=None, std::ostream & out)
        PrintCharacteristics(Mesh self, Vector Vh=None, Vector Vk=None)
        PrintCharacteristics(Mesh self, Vector Vh=None)
        PrintCharacteristics(Mesh self)
        """
        return _mesh.Mesh_PrintCharacteristics(self, *args)


    def PrintInfo(self, *args):
        """
        PrintInfo(Mesh self, std::ostream & out)
        PrintInfo(Mesh self)
        """
        return _mesh.Mesh_PrintInfo(self, *args)


    def FindPoints(self, point_mat, elem_ids, ips, warn=True, inv_trans=None):
        """
        FindPoints(Mesh self, DenseMatrix point_mat, intArray elem_ids, IntegrationPointArray ips, bool warn=True, InverseElementTransformation inv_trans=None) -> int
        FindPoints(Mesh self, DenseMatrix point_mat, intArray elem_ids, IntegrationPointArray ips, bool warn=True) -> int
        FindPoints(Mesh self, DenseMatrix point_mat, intArray elem_ids, IntegrationPointArray ips) -> int
        """
        return _mesh.Mesh_FindPoints(self, point_mat, elem_ids, ips, warn, inv_trans)

    __swig_destroy__ = _mesh.delete_Mesh
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(mfem::Mesh self) -> Mesh
        __init__(mfem::Mesh self, Mesh mesh, bool copy_nodes=True) -> Mesh
        __init__(mfem::Mesh self, Mesh mesh) -> Mesh
        __init__(mfem::Mesh self, double * vertices, int num_vertices, int * element_indices, mfem::Geometry::Type element_type, int * element_attributes, int num_elements, int * boundary_indices, mfem::Geometry::Type boundary_type, int * boundary_attributes, int num_boundary_elements, int dimension, int space_dimension=-1) -> Mesh
        __init__(mfem::Mesh self, double * vertices, int num_vertices, int * element_indices, mfem::Geometry::Type element_type, int * element_attributes, int num_elements, int * boundary_indices, mfem::Geometry::Type boundary_type, int * boundary_attributes, int num_boundary_elements, int dimension) -> Mesh
        __init__(mfem::Mesh self, int _Dim, int NVert, int NElem, int NBdrElem=0, int _spaceDim=-1) -> Mesh
        __init__(mfem::Mesh self, int _Dim, int NVert, int NElem, int NBdrElem=0) -> Mesh
        __init__(mfem::Mesh self, int _Dim, int NVert, int NElem) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, int nz, mfem::Element::Type type, int generate_edges=0, double sx=1.0, double sy=1.0, double sz=1.0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, int nz, mfem::Element::Type type, int generate_edges=0, double sx=1.0, double sy=1.0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, int nz, mfem::Element::Type type, int generate_edges=0, double sx=1.0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, int nz, mfem::Element::Type type, int generate_edges=0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, int nz, mfem::Element::Type type) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, mfem::Element::Type type, int generate_edges=0, double sx=1.0, double sy=1.0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, mfem::Element::Type type, int generate_edges=0, double sx=1.0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, mfem::Element::Type type, int generate_edges=0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, mfem::Element::Type type) -> Mesh
        __init__(mfem::Mesh self, int n, double sx=1.0) -> Mesh
        __init__(mfem::Mesh self, int n) -> Mesh
        __init__(mfem::Mesh self, char const * filename, int generate_edges=0, int refine=1, bool fix_orientation=True) -> Mesh
        __init__(mfem::Mesh self, char const * filename, int generate_edges=0, int refine=1) -> Mesh
        __init__(mfem::Mesh self, char const * filename, int generate_edges=0) -> Mesh
        __init__(mfem::Mesh self, char const * filename) -> Mesh
        __init__(mfem::Mesh self, std::istream & input, int generate_edges=0, int refine=1, bool fix_orientation=True) -> Mesh
        __init__(mfem::Mesh self, std::istream & input, int generate_edges=0, int refine=1) -> Mesh
        __init__(mfem::Mesh self, std::istream & input, int generate_edges=0) -> Mesh
        __init__(mfem::Mesh self, std::istream & input) -> Mesh
        __init__(mfem::Mesh self, mfem::Mesh *[] mesh_array, int num_pieces) -> Mesh
        __init__(mfem::Mesh self, Mesh orig_mesh, int ref_factor, int ref_type) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, int nz, char const * type, int generate_edges=0, double sx=1.0, double sy=1.0, double sz=1.0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, int nz, char const * type, int generate_edges=0, double sx=1.0, double sy=1.0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, int nz, char const * type, int generate_edges=0, double sx=1.0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, int nz, char const * type, int generate_edges=0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, int nz, char const * type) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, char const * type, int generate_edges=0, double sx=1.0, double sy=1.0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, char const * type, int generate_edges=0, double sx=1.0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, char const * type, int generate_edges=0) -> Mesh
        __init__(mfem::Mesh self, int nx, int ny, char const * type) -> Mesh
        """
        this = _mesh.new_Mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def PrintToFile(self, mesh_file, precision):
        """PrintToFile(Mesh self, char const * mesh_file, int const precision)"""
        return _mesh.Mesh_PrintToFile(self, mesh_file, precision)


    def GetAttributeArray(self):
        """GetAttributeArray(Mesh self) -> PyObject *"""
        return _mesh.Mesh_GetAttributeArray(self)


    def GetVertexArray(self, i):
        """GetVertexArray(Mesh self, int i) -> PyObject *"""
        return _mesh.Mesh_GetVertexArray(self, i)


    def GetBdrElementFace(self, *args):
        """
        GetBdrElementFace(Mesh self, int i, int * arg3, int * arg4)
        GetBdrElementFace(Mesh self, int i) -> PyObject *
        """
        return _mesh.Mesh_GetBdrElementFace(self, *args)


    def GetBdrAttributeArray(self):
        """GetBdrAttributeArray(Mesh self) -> PyObject *"""
        return _mesh.Mesh_GetBdrAttributeArray(self)


    def GetBdrArray(self, idx):
        """GetBdrArray(Mesh self, int idx) -> PyObject *"""
        return _mesh.Mesh_GetBdrArray(self, idx)


    def GetDomainArray(self, idx):
        """GetDomainArray(Mesh self, int idx) -> PyObject *"""
        return _mesh.Mesh_GetDomainArray(self, idx)

Mesh_swigregister = _mesh.Mesh_swigregister
Mesh_swigregister(Mesh)
cvar = _mesh.cvar

def Mesh_GetTransformationFEforElementType(arg2):
    """Mesh_GetTransformationFEforElementType(int arg2) -> FiniteElement"""
    return _mesh.Mesh_GetTransformationFEforElementType(arg2)


def __lshift__(*args):
    """
    __lshift__(std::ostream & out, GridFunction sol) -> std::ostream
    __lshift__(std::ostream & out, QuadratureFunction qf) -> std::ostream
    __lshift__(std::ostream & out, Mesh mesh) -> std::ostream &
    """
    return _mesh.__lshift__(*args)
class NodeExtrudeCoefficient(mfem._ser.coefficient.VectorCoefficient):
    """Proxy of C++ mfem::NodeExtrudeCoefficient class."""

    __swig_setmethods__ = {}
    for _s in [mfem._ser.coefficient.VectorCoefficient]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeExtrudeCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [mfem._ser.coefficient.VectorCoefficient]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeExtrudeCoefficient, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetLayer(self, l):
        """SetLayer(NodeExtrudeCoefficient self, int const l)"""
        return _mesh.NodeExtrudeCoefficient_SetLayer(self, l)


    def Eval(self, *args):
        """
        Eval(NodeExtrudeCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(NodeExtrudeCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(NodeExtrudeCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _mesh.NodeExtrudeCoefficient_Eval(self, *args)

    __swig_destroy__ = _mesh.delete_NodeExtrudeCoefficient
    __del__ = lambda self: None
NodeExtrudeCoefficient_swigregister = _mesh.NodeExtrudeCoefficient_swigregister
NodeExtrudeCoefficient_swigregister(NodeExtrudeCoefficient)


def Extrude1D(mesh, ny, sy, closed=False):
    """
    Extrude1D(Mesh mesh, int const ny, double const sy, bool const closed=False) -> Mesh
    Extrude1D(Mesh mesh, int const ny, double const sy) -> Mesh
    """
    return _mesh.Extrude1D(mesh, ny, sy, closed)
class named_ifgzstream(_object):
    """Proxy of C++ mfem::named_ifgzstream class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, named_ifgzstream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, named_ifgzstream, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _mesh.named_ifgzstream_filename_set
    __swig_getmethods__["filename"] = _mesh.named_ifgzstream_filename_get
    if _newclass:
        filename = _swig_property(_mesh.named_ifgzstream_filename_get, _mesh.named_ifgzstream_filename_set)

    def __init__(self, mesh_name):
        """__init__(mfem::named_ifgzstream self, char const * mesh_name) -> named_ifgzstream"""
        this = _mesh.new_named_ifgzstream(mesh_name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mesh.delete_named_ifgzstream
    __del__ = lambda self: None
named_ifgzstream_swigregister = _mesh.named_ifgzstream_swigregister
named_ifgzstream_swigregister(named_ifgzstream)

# This file is compatible with both classic and new-style classes.


