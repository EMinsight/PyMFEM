# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_fe')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_fe')
    _fe = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fe', [dirname(__file__)])
        except ImportError:
            import _fe
            return _fe
        try:
            _mod = imp.load_module('_fe', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _fe = swig_import_helper()
    del swig_import_helper
else:
    import _fe
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import mfem._ser.array
import mfem._ser.ostream_typemap
import mfem._ser.mem_manager
import mfem._ser.vector
import mfem._ser.geom
import mfem._ser.intrules
import mfem._ser.densemat
import mfem._ser.operators
import mfem._ser.matrix
import mfem._ser.sparsemat
class BasisType(_object):
    """Proxy of C++ mfem::BasisType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasisType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BasisType, name)
    __repr__ = _swig_repr
    Invalid = _fe.BasisType_Invalid
    GaussLegendre = _fe.BasisType_GaussLegendre
    GaussLobatto = _fe.BasisType_GaussLobatto
    Positive = _fe.BasisType_Positive
    OpenUniform = _fe.BasisType_OpenUniform
    ClosedUniform = _fe.BasisType_ClosedUniform
    OpenHalfUniform = _fe.BasisType_OpenHalfUniform
    NumBasisTypes = _fe.BasisType_NumBasisTypes

    def Check(b_type):
        """Check(int b_type) -> int"""
        return _fe.BasisType_Check(b_type)

    Check = staticmethod(Check)

    def CheckNodal(b_type):
        """CheckNodal(int b_type) -> int"""
        return _fe.BasisType_CheckNodal(b_type)

    CheckNodal = staticmethod(CheckNodal)

    def GetQuadrature1D(b_type):
        """GetQuadrature1D(int b_type) -> int"""
        return _fe.BasisType_GetQuadrature1D(b_type)

    GetQuadrature1D = staticmethod(GetQuadrature1D)

    def GetNodalBasis(qpt_type):
        """GetNodalBasis(int qpt_type) -> int"""
        return _fe.BasisType_GetNodalBasis(qpt_type)

    GetNodalBasis = staticmethod(GetNodalBasis)

    def Name(b_type):
        """Name(int b_type) -> char const *"""
        return _fe.BasisType_Name(b_type)

    Name = staticmethod(Name)

    def GetChar(b_type):
        """GetChar(int b_type) -> char"""
        return _fe.BasisType_GetChar(b_type)

    GetChar = staticmethod(GetChar)

    def GetType(b_ident):
        """GetType(char b_ident) -> int"""
        return _fe.BasisType_GetType(b_ident)

    GetType = staticmethod(GetType)

    def __init__(self):
        """__init__(mfem::BasisType self) -> BasisType"""
        this = _fe.new_BasisType()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe.delete_BasisType
    __del__ = lambda self: None
BasisType_swigregister = _fe.BasisType_swigregister
BasisType_swigregister(BasisType)

def BasisType_Check(b_type):
    """BasisType_Check(int b_type) -> int"""
    return _fe.BasisType_Check(b_type)

def BasisType_CheckNodal(b_type):
    """BasisType_CheckNodal(int b_type) -> int"""
    return _fe.BasisType_CheckNodal(b_type)

def BasisType_GetQuadrature1D(b_type):
    """BasisType_GetQuadrature1D(int b_type) -> int"""
    return _fe.BasisType_GetQuadrature1D(b_type)

def BasisType_GetNodalBasis(qpt_type):
    """BasisType_GetNodalBasis(int qpt_type) -> int"""
    return _fe.BasisType_GetNodalBasis(qpt_type)

def BasisType_Name(b_type):
    """BasisType_Name(int b_type) -> char const *"""
    return _fe.BasisType_Name(b_type)

def BasisType_GetChar(b_type):
    """BasisType_GetChar(int b_type) -> char"""
    return _fe.BasisType_GetChar(b_type)

def BasisType_GetType(b_ident):
    """BasisType_GetType(char b_ident) -> int"""
    return _fe.BasisType_GetType(b_ident)

class DofToQuad(_object):
    """Proxy of C++ mfem::DofToQuad class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DofToQuad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DofToQuad, name)
    __repr__ = _swig_repr
    __swig_setmethods__["IntRule"] = _fe.DofToQuad_IntRule_set
    __swig_getmethods__["IntRule"] = _fe.DofToQuad_IntRule_get
    if _newclass:
        IntRule = _swig_property(_fe.DofToQuad_IntRule_get, _fe.DofToQuad_IntRule_set)
    FULL = _fe.DofToQuad_FULL
    TENSOR = _fe.DofToQuad_TENSOR
    __swig_setmethods__["mode"] = _fe.DofToQuad_mode_set
    __swig_getmethods__["mode"] = _fe.DofToQuad_mode_get
    if _newclass:
        mode = _swig_property(_fe.DofToQuad_mode_get, _fe.DofToQuad_mode_set)
    __swig_setmethods__["ndof"] = _fe.DofToQuad_ndof_set
    __swig_getmethods__["ndof"] = _fe.DofToQuad_ndof_get
    if _newclass:
        ndof = _swig_property(_fe.DofToQuad_ndof_get, _fe.DofToQuad_ndof_set)
    __swig_setmethods__["nqpt"] = _fe.DofToQuad_nqpt_set
    __swig_getmethods__["nqpt"] = _fe.DofToQuad_nqpt_get
    if _newclass:
        nqpt = _swig_property(_fe.DofToQuad_nqpt_get, _fe.DofToQuad_nqpt_set)
    __swig_setmethods__["B"] = _fe.DofToQuad_B_set
    __swig_getmethods__["B"] = _fe.DofToQuad_B_get
    if _newclass:
        B = _swig_property(_fe.DofToQuad_B_get, _fe.DofToQuad_B_set)
    __swig_setmethods__["Bt"] = _fe.DofToQuad_Bt_set
    __swig_getmethods__["Bt"] = _fe.DofToQuad_Bt_get
    if _newclass:
        Bt = _swig_property(_fe.DofToQuad_Bt_get, _fe.DofToQuad_Bt_set)
    __swig_setmethods__["G"] = _fe.DofToQuad_G_set
    __swig_getmethods__["G"] = _fe.DofToQuad_G_get
    if _newclass:
        G = _swig_property(_fe.DofToQuad_G_get, _fe.DofToQuad_G_set)
    __swig_setmethods__["Gt"] = _fe.DofToQuad_Gt_set
    __swig_getmethods__["Gt"] = _fe.DofToQuad_Gt_get
    if _newclass:
        Gt = _swig_property(_fe.DofToQuad_Gt_get, _fe.DofToQuad_Gt_set)

    def __init__(self):
        """__init__(mfem::DofToQuad self) -> DofToQuad"""
        this = _fe.new_DofToQuad()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe.delete_DofToQuad
    __del__ = lambda self: None
DofToQuad_swigregister = _fe.DofToQuad_swigregister
DofToQuad_swigregister(DofToQuad)

class FunctionSpace(_object):
    """Proxy of C++ mfem::FunctionSpace class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionSpace, name)
    __repr__ = _swig_repr
    Pk = _fe.FunctionSpace_Pk
    Qk = _fe.FunctionSpace_Qk
    rQk = _fe.FunctionSpace_rQk

    def __init__(self):
        """__init__(mfem::FunctionSpace self) -> FunctionSpace"""
        this = _fe.new_FunctionSpace()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe.delete_FunctionSpace
    __del__ = lambda self: None
FunctionSpace_swigregister = _fe.FunctionSpace_swigregister
FunctionSpace_swigregister(FunctionSpace)

class FiniteElement(_object):
    """Proxy of C++ mfem::FiniteElement class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FiniteElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FiniteElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SCALAR = _fe.FiniteElement_SCALAR
    VECTOR = _fe.FiniteElement_VECTOR
    VALUE = _fe.FiniteElement_VALUE
    INTEGRAL = _fe.FiniteElement_INTEGRAL
    H_DIV = _fe.FiniteElement_H_DIV
    H_CURL = _fe.FiniteElement_H_CURL
    NONE = _fe.FiniteElement_NONE
    GRAD = _fe.FiniteElement_GRAD
    DIV = _fe.FiniteElement_DIV
    CURL = _fe.FiniteElement_CURL

    def GetDim(self):
        """GetDim(FiniteElement self) -> int"""
        return _fe.FiniteElement_GetDim(self)


    def GetGeomType(self):
        """GetGeomType(FiniteElement self) -> mfem::Geometry::Type"""
        return _fe.FiniteElement_GetGeomType(self)


    def GetDof(self):
        """GetDof(FiniteElement self) -> int"""
        return _fe.FiniteElement_GetDof(self)


    def GetOrder(self):
        """GetOrder(FiniteElement self) -> int"""
        return _fe.FiniteElement_GetOrder(self)


    def HasAnisotropicOrders(self):
        """HasAnisotropicOrders(FiniteElement self) -> bool"""
        return _fe.FiniteElement_HasAnisotropicOrders(self)


    def GetAnisotropicOrders(self):
        """GetAnisotropicOrders(FiniteElement self) -> int const *"""
        return _fe.FiniteElement_GetAnisotropicOrders(self)


    def Space(self):
        """Space(FiniteElement self) -> int"""
        return _fe.FiniteElement_Space(self)


    def GetRangeType(self):
        """GetRangeType(FiniteElement self) -> int"""
        return _fe.FiniteElement_GetRangeType(self)


    def GetDerivRangeType(self):
        """GetDerivRangeType(FiniteElement self) -> int"""
        return _fe.FiniteElement_GetDerivRangeType(self)


    def GetMapType(self):
        """GetMapType(FiniteElement self) -> int"""
        return _fe.FiniteElement_GetMapType(self)


    def GetDerivType(self):
        """GetDerivType(FiniteElement self) -> int"""
        return _fe.FiniteElement_GetDerivType(self)


    def GetDerivMapType(self):
        """GetDerivMapType(FiniteElement self) -> int"""
        return _fe.FiniteElement_GetDerivMapType(self)


    def CalcShape(self, ip, shape):
        """CalcShape(FiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.FiniteElement_CalcShape(self, ip, shape)


    def CalcPhysShape(self, Trans, shape):
        """CalcPhysShape(FiniteElement self, mfem::ElementTransformation & Trans, Vector shape)"""
        return _fe.FiniteElement_CalcPhysShape(self, Trans, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(FiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.FiniteElement_CalcDShape(self, ip, dshape)


    def CalcPhysDShape(self, Trans, dshape):
        """CalcPhysDShape(FiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix dshape)"""
        return _fe.FiniteElement_CalcPhysDShape(self, Trans, dshape)


    def GetNodes(self):
        """GetNodes(FiniteElement self) -> IntegrationRule"""
        return _fe.FiniteElement_GetNodes(self)


    def CalcVShape(self, *args):
        """
        CalcVShape(FiniteElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(FiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.FiniteElement_CalcVShape(self, *args)


    def CalcPhysVShape(self, Trans, shape):
        """CalcPhysVShape(FiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)"""
        return _fe.FiniteElement_CalcPhysVShape(self, Trans, shape)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(FiniteElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.FiniteElement_CalcDivShape(self, ip, divshape)


    def CalcPhysDivShape(self, Trans, divshape):
        """CalcPhysDivShape(FiniteElement self, mfem::ElementTransformation & Trans, Vector divshape)"""
        return _fe.FiniteElement_CalcPhysDivShape(self, Trans, divshape)


    def CalcCurlShape(self, ip, curl_shape):
        """CalcCurlShape(FiniteElement self, IntegrationPoint ip, DenseMatrix curl_shape)"""
        return _fe.FiniteElement_CalcCurlShape(self, ip, curl_shape)


    def CalcPhysCurlShape(self, Trans, curl_shape):
        """CalcPhysCurlShape(FiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix curl_shape)"""
        return _fe.FiniteElement_CalcPhysCurlShape(self, Trans, curl_shape)


    def GetFaceDofs(self, face, dofs, ndofs):
        """GetFaceDofs(FiniteElement self, int face, int ** dofs, int * ndofs)"""
        return _fe.FiniteElement_GetFaceDofs(self, face, dofs, ndofs)


    def CalcHessian(self, ip, h):
        """CalcHessian(FiniteElement self, IntegrationPoint ip, DenseMatrix h)"""
        return _fe.FiniteElement_CalcHessian(self, ip, h)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(FiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.FiniteElement_GetLocalInterpolation(self, Trans, I)


    def GetLocalRestriction(self, Trans, R):
        """GetLocalRestriction(FiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe.FiniteElement_GetLocalRestriction(self, Trans, R)


    def GetTransferMatrix(self, fe, Trans, I):
        """GetTransferMatrix(FiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.FiniteElement_GetTransferMatrix(self, fe, Trans, I)


    def ProjectMatrixCoefficient(self, mc, T, dofs):
        """ProjectMatrixCoefficient(FiniteElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe.FiniteElement_ProjectMatrixCoefficient(self, mc, T, dofs)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(FiniteElement self, int vertex, Vector dofs)"""
        return _fe.FiniteElement_ProjectDelta(self, vertex, dofs)


    def Project(self, *args):
        """
        Project(FiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(FiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(FiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe.FiniteElement_Project(self, *args)


    def ProjectGrad(self, fe, Trans, grad):
        """ProjectGrad(FiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe.FiniteElement_ProjectGrad(self, fe, Trans, grad)


    def ProjectCurl(self, fe, Trans, curl):
        """ProjectCurl(FiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe.FiniteElement_ProjectCurl(self, fe, Trans, curl)


    def ProjectDiv(self, fe, Trans, div):
        """ProjectDiv(FiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix div)"""
        return _fe.FiniteElement_ProjectDiv(self, fe, Trans, div)


    def GetDofToQuad(self, ir, mode):
        """GetDofToQuad(FiniteElement self, IntegrationRule ir, mfem::DofToQuad::Mode mode) -> DofToQuad"""
        return _fe.FiniteElement_GetDofToQuad(self, ir, mode)

    __swig_destroy__ = _fe.delete_FiniteElement
    __del__ = lambda self: None

    def IsClosedType(b_type):
        """IsClosedType(int b_type) -> bool"""
        return _fe.FiniteElement_IsClosedType(b_type)

    IsClosedType = staticmethod(IsClosedType)

    def IsOpenType(b_type):
        """IsOpenType(int b_type) -> bool"""
        return _fe.FiniteElement_IsOpenType(b_type)

    IsOpenType = staticmethod(IsOpenType)

    def VerifyClosed(b_type):
        """VerifyClosed(int b_type) -> int"""
        return _fe.FiniteElement_VerifyClosed(b_type)

    VerifyClosed = staticmethod(VerifyClosed)

    def VerifyOpen(b_type):
        """VerifyOpen(int b_type) -> int"""
        return _fe.FiniteElement_VerifyOpen(b_type)

    VerifyOpen = staticmethod(VerifyOpen)

    def VerifyNodal(b_type):
        """VerifyNodal(int b_type) -> int"""
        return _fe.FiniteElement_VerifyNodal(b_type)

    VerifyNodal = staticmethod(VerifyNodal)
FiniteElement_swigregister = _fe.FiniteElement_swigregister
FiniteElement_swigregister(FiniteElement)

def FiniteElement_IsClosedType(b_type):
    """FiniteElement_IsClosedType(int b_type) -> bool"""
    return _fe.FiniteElement_IsClosedType(b_type)

def FiniteElement_IsOpenType(b_type):
    """FiniteElement_IsOpenType(int b_type) -> bool"""
    return _fe.FiniteElement_IsOpenType(b_type)

def FiniteElement_VerifyClosed(b_type):
    """FiniteElement_VerifyClosed(int b_type) -> int"""
    return _fe.FiniteElement_VerifyClosed(b_type)

def FiniteElement_VerifyOpen(b_type):
    """FiniteElement_VerifyOpen(int b_type) -> int"""
    return _fe.FiniteElement_VerifyOpen(b_type)

def FiniteElement_VerifyNodal(b_type):
    """FiniteElement_VerifyNodal(int b_type) -> int"""
    return _fe.FiniteElement_VerifyNodal(b_type)

class ScalarFiniteElement(FiniteElement):
    """Proxy of C++ mfem::ScalarFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarFiniteElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetMapType(self, M):
        """SetMapType(ScalarFiniteElement self, int M)"""
        return _fe.ScalarFiniteElement_SetMapType(self, M)


    def NodalLocalInterpolation(self, Trans, I, fine_fe):
        """NodalLocalInterpolation(ScalarFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I, ScalarFiniteElement fine_fe)"""
        return _fe.ScalarFiniteElement_NodalLocalInterpolation(self, Trans, I, fine_fe)


    def ScalarLocalInterpolation(self, Trans, I, fine_fe):
        """ScalarLocalInterpolation(ScalarFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I, ScalarFiniteElement fine_fe)"""
        return _fe.ScalarFiniteElement_ScalarLocalInterpolation(self, Trans, I, fine_fe)


    def GetDofToQuad(self, ir, mode):
        """GetDofToQuad(ScalarFiniteElement self, IntegrationRule ir, mfem::DofToQuad::Mode mode) -> DofToQuad"""
        return _fe.ScalarFiniteElement_GetDofToQuad(self, ir, mode)

    __swig_destroy__ = _fe.delete_ScalarFiniteElement
    __del__ = lambda self: None
ScalarFiniteElement_swigregister = _fe.ScalarFiniteElement_swigregister
ScalarFiniteElement_swigregister(ScalarFiniteElement)

class NodalFiniteElement(ScalarFiniteElement):
    """Proxy of C++ mfem::NodalFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [ScalarFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodalFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodalFiniteElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(NodalFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.NodalFiniteElement_GetLocalInterpolation(self, Trans, I)


    def GetLocalRestriction(self, Trans, R):
        """GetLocalRestriction(NodalFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe.NodalFiniteElement_GetLocalRestriction(self, Trans, R)


    def GetTransferMatrix(self, fe, Trans, I):
        """GetTransferMatrix(NodalFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.NodalFiniteElement_GetTransferMatrix(self, fe, Trans, I)


    def ProjectMatrixCoefficient(self, mc, T, dofs):
        """ProjectMatrixCoefficient(NodalFiniteElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe.NodalFiniteElement_ProjectMatrixCoefficient(self, mc, T, dofs)


    def Project(self, *args):
        """
        Project(NodalFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(NodalFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(NodalFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe.NodalFiniteElement_Project(self, *args)


    def ProjectGrad(self, fe, Trans, grad):
        """ProjectGrad(NodalFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe.NodalFiniteElement_ProjectGrad(self, fe, Trans, grad)


    def ProjectDiv(self, fe, Trans, div):
        """ProjectDiv(NodalFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix div)"""
        return _fe.NodalFiniteElement_ProjectDiv(self, fe, Trans, div)

    __swig_destroy__ = _fe.delete_NodalFiniteElement
    __del__ = lambda self: None
NodalFiniteElement_swigregister = _fe.NodalFiniteElement_swigregister
NodalFiniteElement_swigregister(NodalFiniteElement)

class PositiveFiniteElement(ScalarFiniteElement):
    """Proxy of C++ mfem::PositiveFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [ScalarFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositiveFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositiveFiniteElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(PositiveFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.PositiveFiniteElement_GetLocalInterpolation(self, Trans, I)


    def GetTransferMatrix(self, fe, Trans, I):
        """GetTransferMatrix(PositiveFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.PositiveFiniteElement_GetTransferMatrix(self, fe, Trans, I)


    def Project(self, *args):
        """
        Project(PositiveFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(PositiveFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(PositiveFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(PositiveFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(PositiveFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(PositiveFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe.PositiveFiniteElement_Project(self, *args)

    __swig_destroy__ = _fe.delete_PositiveFiniteElement
    __del__ = lambda self: None
PositiveFiniteElement_swigregister = _fe.PositiveFiniteElement_swigregister
PositiveFiniteElement_swigregister(PositiveFiniteElement)

class VectorFiniteElement(FiniteElement):
    """Proxy of C++ mfem::VectorFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [FiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [FiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::VectorFiniteElement self, int D, mfem::Geometry::Type G, int Do, int O, int M, int F) -> VectorFiniteElement
        __init__(mfem::VectorFiniteElement self, int D, mfem::Geometry::Type G, int Do, int O, int M) -> VectorFiniteElement
        """
        this = _fe.new_VectorFiniteElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe.delete_VectorFiniteElement
    __del__ = lambda self: None
VectorFiniteElement_swigregister = _fe.VectorFiniteElement_swigregister
VectorFiniteElement_swigregister(VectorFiniteElement)

class PointFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::PointFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::PointFiniteElement self) -> PointFiniteElement"""
        this = _fe.new_PointFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(PointFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.PointFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(PointFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.PointFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_PointFiniteElement
    __del__ = lambda self: None
PointFiniteElement_swigregister = _fe.PointFiniteElement_swigregister
PointFiniteElement_swigregister(PointFiniteElement)

class Linear1DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::Linear1DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Linear1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Linear1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Linear1DFiniteElement self) -> Linear1DFiniteElement"""
        this = _fe.new_Linear1DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(Linear1DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.Linear1DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(Linear1DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.Linear1DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_Linear1DFiniteElement
    __del__ = lambda self: None
Linear1DFiniteElement_swigregister = _fe.Linear1DFiniteElement_swigregister
Linear1DFiniteElement_swigregister(Linear1DFiniteElement)

class Linear2DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::Linear2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Linear2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Linear2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Linear2DFiniteElement self) -> Linear2DFiniteElement"""
        this = _fe.new_Linear2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(Linear2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.Linear2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(Linear2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.Linear2DFiniteElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(Linear2DFiniteElement self, int vertex, Vector dofs)"""
        return _fe.Linear2DFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_Linear2DFiniteElement
    __del__ = lambda self: None
Linear2DFiniteElement_swigregister = _fe.Linear2DFiniteElement_swigregister
Linear2DFiniteElement_swigregister(Linear2DFiniteElement)

class BiLinear2DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::BiLinear2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiLinear2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiLinear2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::BiLinear2DFiniteElement self) -> BiLinear2DFiniteElement"""
        this = _fe.new_BiLinear2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(BiLinear2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.BiLinear2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(BiLinear2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.BiLinear2DFiniteElement_CalcDShape(self, ip, dshape)


    def CalcHessian(self, ip, h):
        """CalcHessian(BiLinear2DFiniteElement self, IntegrationPoint ip, DenseMatrix h)"""
        return _fe.BiLinear2DFiniteElement_CalcHessian(self, ip, h)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(BiLinear2DFiniteElement self, int vertex, Vector dofs)"""
        return _fe.BiLinear2DFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_BiLinear2DFiniteElement
    __del__ = lambda self: None
BiLinear2DFiniteElement_swigregister = _fe.BiLinear2DFiniteElement_swigregister
BiLinear2DFiniteElement_swigregister(BiLinear2DFiniteElement)

class GaussLinear2DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::GaussLinear2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussLinear2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussLinear2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::GaussLinear2DFiniteElement self) -> GaussLinear2DFiniteElement"""
        this = _fe.new_GaussLinear2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(GaussLinear2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.GaussLinear2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(GaussLinear2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.GaussLinear2DFiniteElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(GaussLinear2DFiniteElement self, int vertex, Vector dofs)"""
        return _fe.GaussLinear2DFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_GaussLinear2DFiniteElement
    __del__ = lambda self: None
GaussLinear2DFiniteElement_swigregister = _fe.GaussLinear2DFiniteElement_swigregister
GaussLinear2DFiniteElement_swigregister(GaussLinear2DFiniteElement)

class GaussBiLinear2DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::GaussBiLinear2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussBiLinear2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussBiLinear2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::GaussBiLinear2DFiniteElement self) -> GaussBiLinear2DFiniteElement"""
        this = _fe.new_GaussBiLinear2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(GaussBiLinear2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.GaussBiLinear2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(GaussBiLinear2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.GaussBiLinear2DFiniteElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(GaussBiLinear2DFiniteElement self, int vertex, Vector dofs)"""
        return _fe.GaussBiLinear2DFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_GaussBiLinear2DFiniteElement
    __del__ = lambda self: None
GaussBiLinear2DFiniteElement_swigregister = _fe.GaussBiLinear2DFiniteElement_swigregister
GaussBiLinear2DFiniteElement_swigregister(GaussBiLinear2DFiniteElement)

class P1OnQuadFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::P1OnQuadFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P1OnQuadFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P1OnQuadFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::P1OnQuadFiniteElement self) -> P1OnQuadFiniteElement"""
        this = _fe.new_P1OnQuadFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(P1OnQuadFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.P1OnQuadFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(P1OnQuadFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.P1OnQuadFiniteElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(P1OnQuadFiniteElement self, int vertex, Vector dofs)"""
        return _fe.P1OnQuadFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_P1OnQuadFiniteElement
    __del__ = lambda self: None
P1OnQuadFiniteElement_swigregister = _fe.P1OnQuadFiniteElement_swigregister
P1OnQuadFiniteElement_swigregister(P1OnQuadFiniteElement)

class Quad1DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::Quad1DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quad1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quad1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Quad1DFiniteElement self) -> Quad1DFiniteElement"""
        this = _fe.new_Quad1DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(Quad1DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.Quad1DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(Quad1DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.Quad1DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_Quad1DFiniteElement
    __del__ = lambda self: None
Quad1DFiniteElement_swigregister = _fe.Quad1DFiniteElement_swigregister
Quad1DFiniteElement_swigregister(Quad1DFiniteElement)

class QuadPos1DFiniteElement(PositiveFiniteElement):
    """Proxy of C++ mfem::QuadPos1DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuadPos1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuadPos1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::QuadPos1DFiniteElement self) -> QuadPos1DFiniteElement"""
        this = _fe.new_QuadPos1DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(QuadPos1DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.QuadPos1DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(QuadPos1DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.QuadPos1DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_QuadPos1DFiniteElement
    __del__ = lambda self: None
QuadPos1DFiniteElement_swigregister = _fe.QuadPos1DFiniteElement_swigregister
QuadPos1DFiniteElement_swigregister(QuadPos1DFiniteElement)

class Quad2DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::Quad2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quad2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quad2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Quad2DFiniteElement self) -> Quad2DFiniteElement"""
        this = _fe.new_Quad2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(Quad2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.Quad2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(Quad2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.Quad2DFiniteElement_CalcDShape(self, ip, dshape)


    def CalcHessian(self, ip, h):
        """CalcHessian(Quad2DFiniteElement self, IntegrationPoint ip, DenseMatrix h)"""
        return _fe.Quad2DFiniteElement_CalcHessian(self, ip, h)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(Quad2DFiniteElement self, int vertex, Vector dofs)"""
        return _fe.Quad2DFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_Quad2DFiniteElement
    __del__ = lambda self: None
Quad2DFiniteElement_swigregister = _fe.Quad2DFiniteElement_swigregister
Quad2DFiniteElement_swigregister(Quad2DFiniteElement)

class GaussQuad2DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::GaussQuad2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussQuad2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussQuad2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::GaussQuad2DFiniteElement self) -> GaussQuad2DFiniteElement"""
        this = _fe.new_GaussQuad2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(GaussQuad2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.GaussQuad2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(GaussQuad2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.GaussQuad2DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_GaussQuad2DFiniteElement
    __del__ = lambda self: None
GaussQuad2DFiniteElement_swigregister = _fe.GaussQuad2DFiniteElement_swigregister
GaussQuad2DFiniteElement_swigregister(GaussQuad2DFiniteElement)

class BiQuad2DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::BiQuad2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiQuad2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiQuad2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::BiQuad2DFiniteElement self) -> BiQuad2DFiniteElement"""
        this = _fe.new_BiQuad2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(BiQuad2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.BiQuad2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(BiQuad2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.BiQuad2DFiniteElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(BiQuad2DFiniteElement self, int vertex, Vector dofs)"""
        return _fe.BiQuad2DFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_BiQuad2DFiniteElement
    __del__ = lambda self: None
BiQuad2DFiniteElement_swigregister = _fe.BiQuad2DFiniteElement_swigregister
BiQuad2DFiniteElement_swigregister(BiQuad2DFiniteElement)

class BiQuadPos2DFiniteElement(PositiveFiniteElement):
    """Proxy of C++ mfem::BiQuadPos2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiQuadPos2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiQuadPos2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::BiQuadPos2DFiniteElement self) -> BiQuadPos2DFiniteElement"""
        this = _fe.new_BiQuadPos2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(BiQuadPos2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.BiQuadPos2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(BiQuadPos2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.BiQuadPos2DFiniteElement_CalcDShape(self, ip, dshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(BiQuadPos2DFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.BiQuadPos2DFiniteElement_GetLocalInterpolation(self, Trans, I)


    def Project(self, *args):
        """
        Project(BiQuadPos2DFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(BiQuadPos2DFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(BiQuadPos2DFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(BiQuadPos2DFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(BiQuadPos2DFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe.BiQuadPos2DFiniteElement_Project(self, *args)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(BiQuadPos2DFiniteElement self, int vertex, Vector dofs)"""
        return _fe.BiQuadPos2DFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_BiQuadPos2DFiniteElement
    __del__ = lambda self: None
BiQuadPos2DFiniteElement_swigregister = _fe.BiQuadPos2DFiniteElement_swigregister
BiQuadPos2DFiniteElement_swigregister(BiQuadPos2DFiniteElement)

class GaussBiQuad2DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::GaussBiQuad2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussBiQuad2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaussBiQuad2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::GaussBiQuad2DFiniteElement self) -> GaussBiQuad2DFiniteElement"""
        this = _fe.new_GaussBiQuad2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(GaussBiQuad2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.GaussBiQuad2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(GaussBiQuad2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.GaussBiQuad2DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_GaussBiQuad2DFiniteElement
    __del__ = lambda self: None
GaussBiQuad2DFiniteElement_swigregister = _fe.GaussBiQuad2DFiniteElement_swigregister
GaussBiQuad2DFiniteElement_swigregister(GaussBiQuad2DFiniteElement)

class BiCubic2DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::BiCubic2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiCubic2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiCubic2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::BiCubic2DFiniteElement self) -> BiCubic2DFiniteElement"""
        this = _fe.new_BiCubic2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(BiCubic2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.BiCubic2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(BiCubic2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.BiCubic2DFiniteElement_CalcDShape(self, ip, dshape)


    def CalcHessian(self, ip, h):
        """CalcHessian(BiCubic2DFiniteElement self, IntegrationPoint ip, DenseMatrix h)"""
        return _fe.BiCubic2DFiniteElement_CalcHessian(self, ip, h)

    __swig_destroy__ = _fe.delete_BiCubic2DFiniteElement
    __del__ = lambda self: None
BiCubic2DFiniteElement_swigregister = _fe.BiCubic2DFiniteElement_swigregister
BiCubic2DFiniteElement_swigregister(BiCubic2DFiniteElement)

class Cubic1DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::Cubic1DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cubic1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cubic1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Cubic1DFiniteElement self) -> Cubic1DFiniteElement"""
        this = _fe.new_Cubic1DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(Cubic1DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.Cubic1DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(Cubic1DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.Cubic1DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_Cubic1DFiniteElement
    __del__ = lambda self: None
Cubic1DFiniteElement_swigregister = _fe.Cubic1DFiniteElement_swigregister
Cubic1DFiniteElement_swigregister(Cubic1DFiniteElement)

class Cubic2DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::Cubic2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cubic2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cubic2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Cubic2DFiniteElement self) -> Cubic2DFiniteElement"""
        this = _fe.new_Cubic2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(Cubic2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.Cubic2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(Cubic2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.Cubic2DFiniteElement_CalcDShape(self, ip, dshape)


    def CalcHessian(self, ip, h):
        """CalcHessian(Cubic2DFiniteElement self, IntegrationPoint ip, DenseMatrix h)"""
        return _fe.Cubic2DFiniteElement_CalcHessian(self, ip, h)

    __swig_destroy__ = _fe.delete_Cubic2DFiniteElement
    __del__ = lambda self: None
Cubic2DFiniteElement_swigregister = _fe.Cubic2DFiniteElement_swigregister
Cubic2DFiniteElement_swigregister(Cubic2DFiniteElement)

class Cubic3DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::Cubic3DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cubic3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cubic3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Cubic3DFiniteElement self) -> Cubic3DFiniteElement"""
        this = _fe.new_Cubic3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(Cubic3DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.Cubic3DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(Cubic3DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.Cubic3DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_Cubic3DFiniteElement
    __del__ = lambda self: None
Cubic3DFiniteElement_swigregister = _fe.Cubic3DFiniteElement_swigregister
Cubic3DFiniteElement_swigregister(Cubic3DFiniteElement)

class P0TriangleFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::P0TriangleFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P0TriangleFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P0TriangleFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::P0TriangleFiniteElement self) -> P0TriangleFiniteElement"""
        this = _fe.new_P0TriangleFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(P0TriangleFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.P0TriangleFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(P0TriangleFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.P0TriangleFiniteElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(P0TriangleFiniteElement self, int vertex, Vector dofs)"""
        return _fe.P0TriangleFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_P0TriangleFiniteElement
    __del__ = lambda self: None
P0TriangleFiniteElement_swigregister = _fe.P0TriangleFiniteElement_swigregister
P0TriangleFiniteElement_swigregister(P0TriangleFiniteElement)

class P0QuadFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::P0QuadFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P0QuadFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P0QuadFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::P0QuadFiniteElement self) -> P0QuadFiniteElement"""
        this = _fe.new_P0QuadFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(P0QuadFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.P0QuadFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(P0QuadFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.P0QuadFiniteElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(P0QuadFiniteElement self, int vertex, Vector dofs)"""
        return _fe.P0QuadFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_P0QuadFiniteElement
    __del__ = lambda self: None
P0QuadFiniteElement_swigregister = _fe.P0QuadFiniteElement_swigregister
P0QuadFiniteElement_swigregister(P0QuadFiniteElement)

class Linear3DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::Linear3DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Linear3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Linear3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Linear3DFiniteElement self) -> Linear3DFiniteElement"""
        this = _fe.new_Linear3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(Linear3DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.Linear3DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(Linear3DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.Linear3DFiniteElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(Linear3DFiniteElement self, int vertex, Vector dofs)"""
        return _fe.Linear3DFiniteElement_ProjectDelta(self, vertex, dofs)


    def GetFaceDofs(self, face, dofs, ndofs):
        """GetFaceDofs(Linear3DFiniteElement self, int face, int ** dofs, int * ndofs)"""
        return _fe.Linear3DFiniteElement_GetFaceDofs(self, face, dofs, ndofs)

    __swig_destroy__ = _fe.delete_Linear3DFiniteElement
    __del__ = lambda self: None
Linear3DFiniteElement_swigregister = _fe.Linear3DFiniteElement_swigregister
Linear3DFiniteElement_swigregister(Linear3DFiniteElement)

class Quadratic3DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::Quadratic3DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quadratic3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quadratic3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Quadratic3DFiniteElement self) -> Quadratic3DFiniteElement"""
        this = _fe.new_Quadratic3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(Quadratic3DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.Quadratic3DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(Quadratic3DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.Quadratic3DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_Quadratic3DFiniteElement
    __del__ = lambda self: None
Quadratic3DFiniteElement_swigregister = _fe.Quadratic3DFiniteElement_swigregister
Quadratic3DFiniteElement_swigregister(Quadratic3DFiniteElement)

class TriLinear3DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::TriLinear3DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriLinear3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TriLinear3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::TriLinear3DFiniteElement self) -> TriLinear3DFiniteElement"""
        this = _fe.new_TriLinear3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(TriLinear3DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.TriLinear3DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(TriLinear3DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.TriLinear3DFiniteElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(TriLinear3DFiniteElement self, int vertex, Vector dofs)"""
        return _fe.TriLinear3DFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_TriLinear3DFiniteElement
    __del__ = lambda self: None
TriLinear3DFiniteElement_swigregister = _fe.TriLinear3DFiniteElement_swigregister
TriLinear3DFiniteElement_swigregister(TriLinear3DFiniteElement)

class CrouzeixRaviartFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::CrouzeixRaviartFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrouzeixRaviartFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrouzeixRaviartFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::CrouzeixRaviartFiniteElement self) -> CrouzeixRaviartFiniteElement"""
        this = _fe.new_CrouzeixRaviartFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(CrouzeixRaviartFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.CrouzeixRaviartFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(CrouzeixRaviartFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.CrouzeixRaviartFiniteElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(CrouzeixRaviartFiniteElement self, int vertex, Vector dofs)"""
        return _fe.CrouzeixRaviartFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_CrouzeixRaviartFiniteElement
    __del__ = lambda self: None
CrouzeixRaviartFiniteElement_swigregister = _fe.CrouzeixRaviartFiniteElement_swigregister
CrouzeixRaviartFiniteElement_swigregister(CrouzeixRaviartFiniteElement)

class CrouzeixRaviartQuadFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::CrouzeixRaviartQuadFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrouzeixRaviartQuadFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CrouzeixRaviartQuadFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::CrouzeixRaviartQuadFiniteElement self) -> CrouzeixRaviartQuadFiniteElement"""
        this = _fe.new_CrouzeixRaviartQuadFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(CrouzeixRaviartQuadFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.CrouzeixRaviartQuadFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(CrouzeixRaviartQuadFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.CrouzeixRaviartQuadFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_CrouzeixRaviartQuadFiniteElement
    __del__ = lambda self: None
CrouzeixRaviartQuadFiniteElement_swigregister = _fe.CrouzeixRaviartQuadFiniteElement_swigregister
CrouzeixRaviartQuadFiniteElement_swigregister(CrouzeixRaviartQuadFiniteElement)

class P0SegmentFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::P0SegmentFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P0SegmentFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P0SegmentFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, Ord=0):
        """
        __init__(mfem::P0SegmentFiniteElement self, int Ord=0) -> P0SegmentFiniteElement
        __init__(mfem::P0SegmentFiniteElement self) -> P0SegmentFiniteElement
        """
        this = _fe.new_P0SegmentFiniteElement(Ord)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(P0SegmentFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.P0SegmentFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(P0SegmentFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.P0SegmentFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_P0SegmentFiniteElement
    __del__ = lambda self: None
P0SegmentFiniteElement_swigregister = _fe.P0SegmentFiniteElement_swigregister
P0SegmentFiniteElement_swigregister(P0SegmentFiniteElement)

class RT0TriangleFiniteElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT0TriangleFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT0TriangleFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT0TriangleFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT0TriangleFiniteElement self) -> RT0TriangleFiniteElement"""
        this = _fe.new_RT0TriangleFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT0TriangleFiniteElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT0TriangleFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT0TriangleFiniteElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT0TriangleFiniteElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT0TriangleFiniteElement_CalcDivShape(self, ip, divshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(RT0TriangleFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT0TriangleFiniteElement_GetLocalInterpolation(self, Trans, I)


    def Project(self, *args):
        """
        Project(RT0TriangleFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT0TriangleFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT0TriangleFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(RT0TriangleFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe.RT0TriangleFiniteElement_Project(self, *args)

    __swig_destroy__ = _fe.delete_RT0TriangleFiniteElement
    __del__ = lambda self: None
RT0TriangleFiniteElement_swigregister = _fe.RT0TriangleFiniteElement_swigregister
RT0TriangleFiniteElement_swigregister(RT0TriangleFiniteElement)

class RT0QuadFiniteElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT0QuadFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT0QuadFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT0QuadFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT0QuadFiniteElement self) -> RT0QuadFiniteElement"""
        this = _fe.new_RT0QuadFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT0QuadFiniteElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT0QuadFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT0QuadFiniteElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT0QuadFiniteElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT0QuadFiniteElement_CalcDivShape(self, ip, divshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(RT0QuadFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT0QuadFiniteElement_GetLocalInterpolation(self, Trans, I)


    def Project(self, *args):
        """
        Project(RT0QuadFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT0QuadFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT0QuadFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(RT0QuadFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe.RT0QuadFiniteElement_Project(self, *args)

    __swig_destroy__ = _fe.delete_RT0QuadFiniteElement
    __del__ = lambda self: None
RT0QuadFiniteElement_swigregister = _fe.RT0QuadFiniteElement_swigregister
RT0QuadFiniteElement_swigregister(RT0QuadFiniteElement)

class RT1TriangleFiniteElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT1TriangleFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT1TriangleFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT1TriangleFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT1TriangleFiniteElement self) -> RT1TriangleFiniteElement"""
        this = _fe.new_RT1TriangleFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT1TriangleFiniteElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT1TriangleFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT1TriangleFiniteElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT1TriangleFiniteElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT1TriangleFiniteElement_CalcDivShape(self, ip, divshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(RT1TriangleFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT1TriangleFiniteElement_GetLocalInterpolation(self, Trans, I)


    def Project(self, *args):
        """
        Project(RT1TriangleFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT1TriangleFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT1TriangleFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(RT1TriangleFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe.RT1TriangleFiniteElement_Project(self, *args)

    __swig_destroy__ = _fe.delete_RT1TriangleFiniteElement
    __del__ = lambda self: None
RT1TriangleFiniteElement_swigregister = _fe.RT1TriangleFiniteElement_swigregister
RT1TriangleFiniteElement_swigregister(RT1TriangleFiniteElement)

class RT1QuadFiniteElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT1QuadFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT1QuadFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT1QuadFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT1QuadFiniteElement self) -> RT1QuadFiniteElement"""
        this = _fe.new_RT1QuadFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT1QuadFiniteElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT1QuadFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT1QuadFiniteElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT1QuadFiniteElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT1QuadFiniteElement_CalcDivShape(self, ip, divshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(RT1QuadFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT1QuadFiniteElement_GetLocalInterpolation(self, Trans, I)


    def Project(self, *args):
        """
        Project(RT1QuadFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT1QuadFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT1QuadFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(RT1QuadFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe.RT1QuadFiniteElement_Project(self, *args)

    __swig_destroy__ = _fe.delete_RT1QuadFiniteElement
    __del__ = lambda self: None
RT1QuadFiniteElement_swigregister = _fe.RT1QuadFiniteElement_swigregister
RT1QuadFiniteElement_swigregister(RT1QuadFiniteElement)

class RT2TriangleFiniteElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT2TriangleFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT2TriangleFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT2TriangleFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT2TriangleFiniteElement self) -> RT2TriangleFiniteElement"""
        this = _fe.new_RT2TriangleFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT2TriangleFiniteElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT2TriangleFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT2TriangleFiniteElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT2TriangleFiniteElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT2TriangleFiniteElement_CalcDivShape(self, ip, divshape)

    __swig_destroy__ = _fe.delete_RT2TriangleFiniteElement
    __del__ = lambda self: None
RT2TriangleFiniteElement_swigregister = _fe.RT2TriangleFiniteElement_swigregister
RT2TriangleFiniteElement_swigregister(RT2TriangleFiniteElement)

class RT2QuadFiniteElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT2QuadFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT2QuadFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT2QuadFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT2QuadFiniteElement self) -> RT2QuadFiniteElement"""
        this = _fe.new_RT2QuadFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT2QuadFiniteElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT2QuadFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT2QuadFiniteElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT2QuadFiniteElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT2QuadFiniteElement_CalcDivShape(self, ip, divshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(RT2QuadFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT2QuadFiniteElement_GetLocalInterpolation(self, Trans, I)


    def Project(self, *args):
        """
        Project(RT2QuadFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT2QuadFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT2QuadFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(RT2QuadFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe.RT2QuadFiniteElement_Project(self, *args)

    __swig_destroy__ = _fe.delete_RT2QuadFiniteElement
    __del__ = lambda self: None
RT2QuadFiniteElement_swigregister = _fe.RT2QuadFiniteElement_swigregister
RT2QuadFiniteElement_swigregister(RT2QuadFiniteElement)

class P1SegmentFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::P1SegmentFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P1SegmentFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P1SegmentFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::P1SegmentFiniteElement self) -> P1SegmentFiniteElement"""
        this = _fe.new_P1SegmentFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(P1SegmentFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.P1SegmentFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(P1SegmentFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.P1SegmentFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_P1SegmentFiniteElement
    __del__ = lambda self: None
P1SegmentFiniteElement_swigregister = _fe.P1SegmentFiniteElement_swigregister
P1SegmentFiniteElement_swigregister(P1SegmentFiniteElement)

class P2SegmentFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::P2SegmentFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P2SegmentFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P2SegmentFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::P2SegmentFiniteElement self) -> P2SegmentFiniteElement"""
        this = _fe.new_P2SegmentFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(P2SegmentFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.P2SegmentFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(P2SegmentFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.P2SegmentFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_P2SegmentFiniteElement
    __del__ = lambda self: None
P2SegmentFiniteElement_swigregister = _fe.P2SegmentFiniteElement_swigregister
P2SegmentFiniteElement_swigregister(P2SegmentFiniteElement)

class Lagrange1DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::Lagrange1DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lagrange1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lagrange1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, degree):
        """__init__(mfem::Lagrange1DFiniteElement self, int degree) -> Lagrange1DFiniteElement"""
        this = _fe.new_Lagrange1DFiniteElement(degree)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(Lagrange1DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.Lagrange1DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(Lagrange1DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.Lagrange1DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_Lagrange1DFiniteElement
    __del__ = lambda self: None
Lagrange1DFiniteElement_swigregister = _fe.Lagrange1DFiniteElement_swigregister
Lagrange1DFiniteElement_swigregister(Lagrange1DFiniteElement)

class P1TetNonConfFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::P1TetNonConfFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P1TetNonConfFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P1TetNonConfFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::P1TetNonConfFiniteElement self) -> P1TetNonConfFiniteElement"""
        this = _fe.new_P1TetNonConfFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(P1TetNonConfFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.P1TetNonConfFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(P1TetNonConfFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.P1TetNonConfFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_P1TetNonConfFiniteElement
    __del__ = lambda self: None
P1TetNonConfFiniteElement_swigregister = _fe.P1TetNonConfFiniteElement_swigregister
P1TetNonConfFiniteElement_swigregister(P1TetNonConfFiniteElement)

class P0TetFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::P0TetFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P0TetFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P0TetFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::P0TetFiniteElement self) -> P0TetFiniteElement"""
        this = _fe.new_P0TetFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(P0TetFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.P0TetFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(P0TetFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.P0TetFiniteElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(P0TetFiniteElement self, int vertex, Vector dofs)"""
        return _fe.P0TetFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_P0TetFiniteElement
    __del__ = lambda self: None
P0TetFiniteElement_swigregister = _fe.P0TetFiniteElement_swigregister
P0TetFiniteElement_swigregister(P0TetFiniteElement)

class P0HexFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::P0HexFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P0HexFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P0HexFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::P0HexFiniteElement self) -> P0HexFiniteElement"""
        this = _fe.new_P0HexFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(P0HexFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.P0HexFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(P0HexFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.P0HexFiniteElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(P0HexFiniteElement self, int vertex, Vector dofs)"""
        return _fe.P0HexFiniteElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_P0HexFiniteElement
    __del__ = lambda self: None
P0HexFiniteElement_swigregister = _fe.P0HexFiniteElement_swigregister
P0HexFiniteElement_swigregister(P0HexFiniteElement)

class LagrangeHexFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::LagrangeHexFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LagrangeHexFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LagrangeHexFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, degree):
        """__init__(mfem::LagrangeHexFiniteElement self, int degree) -> LagrangeHexFiniteElement"""
        this = _fe.new_LagrangeHexFiniteElement(degree)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(LagrangeHexFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.LagrangeHexFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(LagrangeHexFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.LagrangeHexFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_LagrangeHexFiniteElement
    __del__ = lambda self: None
LagrangeHexFiniteElement_swigregister = _fe.LagrangeHexFiniteElement_swigregister
LagrangeHexFiniteElement_swigregister(LagrangeHexFiniteElement)

class RefinedLinear1DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::RefinedLinear1DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedLinear1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedLinear1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RefinedLinear1DFiniteElement self) -> RefinedLinear1DFiniteElement"""
        this = _fe.new_RefinedLinear1DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(RefinedLinear1DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.RefinedLinear1DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(RefinedLinear1DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.RefinedLinear1DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_RefinedLinear1DFiniteElement
    __del__ = lambda self: None
RefinedLinear1DFiniteElement_swigregister = _fe.RefinedLinear1DFiniteElement_swigregister
RefinedLinear1DFiniteElement_swigregister(RefinedLinear1DFiniteElement)

class RefinedLinear2DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::RefinedLinear2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedLinear2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedLinear2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RefinedLinear2DFiniteElement self) -> RefinedLinear2DFiniteElement"""
        this = _fe.new_RefinedLinear2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(RefinedLinear2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.RefinedLinear2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(RefinedLinear2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.RefinedLinear2DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_RefinedLinear2DFiniteElement
    __del__ = lambda self: None
RefinedLinear2DFiniteElement_swigregister = _fe.RefinedLinear2DFiniteElement_swigregister
RefinedLinear2DFiniteElement_swigregister(RefinedLinear2DFiniteElement)

class RefinedLinear3DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::RefinedLinear3DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedLinear3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedLinear3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RefinedLinear3DFiniteElement self) -> RefinedLinear3DFiniteElement"""
        this = _fe.new_RefinedLinear3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(RefinedLinear3DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.RefinedLinear3DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(RefinedLinear3DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.RefinedLinear3DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_RefinedLinear3DFiniteElement
    __del__ = lambda self: None
RefinedLinear3DFiniteElement_swigregister = _fe.RefinedLinear3DFiniteElement_swigregister
RefinedLinear3DFiniteElement_swigregister(RefinedLinear3DFiniteElement)

class RefinedBiLinear2DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::RefinedBiLinear2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedBiLinear2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedBiLinear2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RefinedBiLinear2DFiniteElement self) -> RefinedBiLinear2DFiniteElement"""
        this = _fe.new_RefinedBiLinear2DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(RefinedBiLinear2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.RefinedBiLinear2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(RefinedBiLinear2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.RefinedBiLinear2DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_RefinedBiLinear2DFiniteElement
    __del__ = lambda self: None
RefinedBiLinear2DFiniteElement_swigregister = _fe.RefinedBiLinear2DFiniteElement_swigregister
RefinedBiLinear2DFiniteElement_swigregister(RefinedBiLinear2DFiniteElement)

class RefinedTriLinear3DFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::RefinedTriLinear3DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefinedTriLinear3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefinedTriLinear3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RefinedTriLinear3DFiniteElement self) -> RefinedTriLinear3DFiniteElement"""
        this = _fe.new_RefinedTriLinear3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(RefinedTriLinear3DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.RefinedTriLinear3DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(RefinedTriLinear3DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.RefinedTriLinear3DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_RefinedTriLinear3DFiniteElement
    __del__ = lambda self: None
RefinedTriLinear3DFiniteElement_swigregister = _fe.RefinedTriLinear3DFiniteElement_swigregister
RefinedTriLinear3DFiniteElement_swigregister(RefinedTriLinear3DFiniteElement)

class Nedelec1HexFiniteElement(VectorFiniteElement):
    """Proxy of C++ mfem::Nedelec1HexFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nedelec1HexFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nedelec1HexFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Nedelec1HexFiniteElement self) -> Nedelec1HexFiniteElement"""
        this = _fe.new_Nedelec1HexFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(Nedelec1HexFiniteElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(Nedelec1HexFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.Nedelec1HexFiniteElement_CalcVShape(self, *args)


    def CalcCurlShape(self, ip, curl_shape):
        """CalcCurlShape(Nedelec1HexFiniteElement self, IntegrationPoint ip, DenseMatrix curl_shape)"""
        return _fe.Nedelec1HexFiniteElement_CalcCurlShape(self, ip, curl_shape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(Nedelec1HexFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.Nedelec1HexFiniteElement_GetLocalInterpolation(self, Trans, I)


    def Project(self, *args):
        """
        Project(Nedelec1HexFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(Nedelec1HexFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(Nedelec1HexFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(Nedelec1HexFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe.Nedelec1HexFiniteElement_Project(self, *args)

    __swig_destroy__ = _fe.delete_Nedelec1HexFiniteElement
    __del__ = lambda self: None
Nedelec1HexFiniteElement_swigregister = _fe.Nedelec1HexFiniteElement_swigregister
Nedelec1HexFiniteElement_swigregister(Nedelec1HexFiniteElement)

class Nedelec1TetFiniteElement(VectorFiniteElement):
    """Proxy of C++ mfem::Nedelec1TetFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Nedelec1TetFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Nedelec1TetFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::Nedelec1TetFiniteElement self) -> Nedelec1TetFiniteElement"""
        this = _fe.new_Nedelec1TetFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(Nedelec1TetFiniteElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(Nedelec1TetFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.Nedelec1TetFiniteElement_CalcVShape(self, *args)


    def CalcCurlShape(self, ip, curl_shape):
        """CalcCurlShape(Nedelec1TetFiniteElement self, IntegrationPoint ip, DenseMatrix curl_shape)"""
        return _fe.Nedelec1TetFiniteElement_CalcCurlShape(self, ip, curl_shape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(Nedelec1TetFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.Nedelec1TetFiniteElement_GetLocalInterpolation(self, Trans, I)


    def Project(self, *args):
        """
        Project(Nedelec1TetFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(Nedelec1TetFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(Nedelec1TetFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(Nedelec1TetFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe.Nedelec1TetFiniteElement_Project(self, *args)

    __swig_destroy__ = _fe.delete_Nedelec1TetFiniteElement
    __del__ = lambda self: None
Nedelec1TetFiniteElement_swigregister = _fe.Nedelec1TetFiniteElement_swigregister
Nedelec1TetFiniteElement_swigregister(Nedelec1TetFiniteElement)

class RT0HexFiniteElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT0HexFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT0HexFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT0HexFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT0HexFiniteElement self) -> RT0HexFiniteElement"""
        this = _fe.new_RT0HexFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT0HexFiniteElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT0HexFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT0HexFiniteElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT0HexFiniteElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT0HexFiniteElement_CalcDivShape(self, ip, divshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(RT0HexFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT0HexFiniteElement_GetLocalInterpolation(self, Trans, I)


    def Project(self, *args):
        """
        Project(RT0HexFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT0HexFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT0HexFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(RT0HexFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe.RT0HexFiniteElement_Project(self, *args)

    __swig_destroy__ = _fe.delete_RT0HexFiniteElement
    __del__ = lambda self: None
RT0HexFiniteElement_swigregister = _fe.RT0HexFiniteElement_swigregister
RT0HexFiniteElement_swigregister(RT0HexFiniteElement)

class RT1HexFiniteElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT1HexFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT1HexFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT1HexFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT1HexFiniteElement self) -> RT1HexFiniteElement"""
        this = _fe.new_RT1HexFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT1HexFiniteElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT1HexFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT1HexFiniteElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT1HexFiniteElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT1HexFiniteElement_CalcDivShape(self, ip, divshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(RT1HexFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT1HexFiniteElement_GetLocalInterpolation(self, Trans, I)


    def Project(self, *args):
        """
        Project(RT1HexFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT1HexFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT1HexFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(RT1HexFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe.RT1HexFiniteElement_Project(self, *args)

    __swig_destroy__ = _fe.delete_RT1HexFiniteElement
    __del__ = lambda self: None
RT1HexFiniteElement_swigregister = _fe.RT1HexFiniteElement_swigregister
RT1HexFiniteElement_swigregister(RT1HexFiniteElement)

class RT0TetFiniteElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT0TetFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT0TetFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT0TetFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RT0TetFiniteElement self) -> RT0TetFiniteElement"""
        this = _fe.new_RT0TetFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT0TetFiniteElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT0TetFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT0TetFiniteElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT0TetFiniteElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT0TetFiniteElement_CalcDivShape(self, ip, divshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(RT0TetFiniteElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT0TetFiniteElement_GetLocalInterpolation(self, Trans, I)


    def Project(self, *args):
        """
        Project(RT0TetFiniteElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT0TetFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT0TetFiniteElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(RT0TetFiniteElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        """
        return _fe.RT0TetFiniteElement_Project(self, *args)

    __swig_destroy__ = _fe.delete_RT0TetFiniteElement
    __del__ = lambda self: None
RT0TetFiniteElement_swigregister = _fe.RT0TetFiniteElement_swigregister
RT0TetFiniteElement_swigregister(RT0TetFiniteElement)

class RotTriLinearHexFiniteElement(NodalFiniteElement):
    """Proxy of C++ mfem::RotTriLinearHexFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RotTriLinearHexFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RotTriLinearHexFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::RotTriLinearHexFiniteElement self) -> RotTriLinearHexFiniteElement"""
        this = _fe.new_RotTriLinearHexFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(RotTriLinearHexFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.RotTriLinearHexFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(RotTriLinearHexFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.RotTriLinearHexFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_RotTriLinearHexFiniteElement
    __del__ = lambda self: None
RotTriLinearHexFiniteElement_swigregister = _fe.RotTriLinearHexFiniteElement_swigregister
RotTriLinearHexFiniteElement_swigregister(RotTriLinearHexFiniteElement)

class Poly_1D(_object):
    """Proxy of C++ mfem::Poly_1D class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poly_1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Poly_1D, name)
    __repr__ = _swig_repr
    ChangeOfBasis = _fe.Poly_1D_ChangeOfBasis
    Barycentric = _fe.Poly_1D_Barycentric
    Positive = _fe.Poly_1D_Positive
    NumEvalTypes = _fe.Poly_1D_NumEvalTypes

    def __init__(self):
        """__init__(mfem::Poly_1D self) -> Poly_1D"""
        this = _fe.new_Poly_1D()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Binom(p):
        """Binom(int const p) -> int const *"""
        return _fe.Poly_1D_Binom(p)

    Binom = staticmethod(Binom)

    def GetPoints(self, p, btype):
        """GetPoints(Poly_1D self, int const p, int const btype) -> double const *"""
        return _fe.Poly_1D_GetPoints(self, p, btype)


    def OpenPoints(self, *args):
        """
        OpenPoints(Poly_1D self, int const p, int const btype) -> double const
        OpenPoints(Poly_1D self, int const p) -> double const *
        """
        return _fe.Poly_1D_OpenPoints(self, *args)


    def ClosedPoints(self, *args):
        """
        ClosedPoints(Poly_1D self, int const p, int const btype) -> double const
        ClosedPoints(Poly_1D self, int const p) -> double const *
        """
        return _fe.Poly_1D_ClosedPoints(self, *args)


    def GetBasis(self, p, btype):
        """GetBasis(Poly_1D self, int const p, int const btype) -> mfem::Poly_1D::Basis &"""
        return _fe.Poly_1D_GetBasis(self, p, btype)


    def CalcBasis(*args):
        """
        CalcBasis(int const p, double const x, double * u)
        CalcBasis(int const p, double const x, double * u, double * d)
        CalcBasis(int const p, double const x, double * u, double * d, double * dd)
        """
        return _fe.Poly_1D_CalcBasis(*args)

    CalcBasis = staticmethod(CalcBasis)

    def CalcDelta(p, x):
        """CalcDelta(int const p, double const x) -> double"""
        return _fe.Poly_1D_CalcDelta(p, x)

    CalcDelta = staticmethod(CalcDelta)

    def ChebyshevPoints(p, x):
        """ChebyshevPoints(int const p, double * x)"""
        return _fe.Poly_1D_ChebyshevPoints(p, x)

    ChebyshevPoints = staticmethod(ChebyshevPoints)

    def CalcBinomTerms(*args):
        """
        CalcBinomTerms(int const p, double const x, double const y, double * u)
        CalcBinomTerms(int const p, double const x, double const y, double * u, double * d)
        """
        return _fe.Poly_1D_CalcBinomTerms(*args)

    CalcBinomTerms = staticmethod(CalcBinomTerms)

    def CalcDBinomTerms(p, x, y, d):
        """CalcDBinomTerms(int const p, double const x, double const y, double * d)"""
        return _fe.Poly_1D_CalcDBinomTerms(p, x, y, d)

    CalcDBinomTerms = staticmethod(CalcDBinomTerms)

    def CalcBernstein(*args):
        """
        CalcBernstein(int const p, double const x, double * u)
        CalcBernstein(int const p, double const x, double * u, double * d)
        """
        return _fe.Poly_1D_CalcBernstein(*args)

    CalcBernstein = staticmethod(CalcBernstein)
    __swig_destroy__ = _fe.delete_Poly_1D
    __del__ = lambda self: None
Poly_1D_swigregister = _fe.Poly_1D_swigregister
Poly_1D_swigregister(Poly_1D)

def Poly_1D_Binom(p):
    """Poly_1D_Binom(int const p) -> int const *"""
    return _fe.Poly_1D_Binom(p)

def Poly_1D_CalcBasis(*args):
    """
    CalcBasis(int const p, double const x, double * u)
    CalcBasis(int const p, double const x, double * u, double * d)
    Poly_1D_CalcBasis(int const p, double const x, double * u, double * d, double * dd)
    """
    return _fe.Poly_1D_CalcBasis(*args)

def Poly_1D_CalcDelta(p, x):
    """Poly_1D_CalcDelta(int const p, double const x) -> double"""
    return _fe.Poly_1D_CalcDelta(p, x)

def Poly_1D_ChebyshevPoints(p, x):
    """Poly_1D_ChebyshevPoints(int const p, double * x)"""
    return _fe.Poly_1D_ChebyshevPoints(p, x)

def Poly_1D_CalcBinomTerms(*args):
    """
    CalcBinomTerms(int const p, double const x, double const y, double * u)
    Poly_1D_CalcBinomTerms(int const p, double const x, double const y, double * u, double * d)
    """
    return _fe.Poly_1D_CalcBinomTerms(*args)

def Poly_1D_CalcDBinomTerms(p, x, y, d):
    """Poly_1D_CalcDBinomTerms(int const p, double const x, double const y, double * d)"""
    return _fe.Poly_1D_CalcDBinomTerms(p, x, y, d)

def Poly_1D_CalcBernstein(*args):
    """
    CalcBernstein(int const p, double const x, double * u)
    Poly_1D_CalcBernstein(int const p, double const x, double * u, double * d)
    """
    return _fe.Poly_1D_CalcBernstein(*args)

class TensorBasisElement(_object):
    """Proxy of C++ mfem::TensorBasisElement class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TensorBasisElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TensorBasisElement, name)
    __repr__ = _swig_repr
    L2_DOF_MAP = _fe.TensorBasisElement_L2_DOF_MAP
    H1_DOF_MAP = _fe.TensorBasisElement_H1_DOF_MAP

    def __init__(self, dims, p, btype, dmtype):
        """__init__(mfem::TensorBasisElement self, int const dims, int const p, int const btype, mfem::TensorBasisElement::DofMapType const dmtype) -> TensorBasisElement"""
        this = _fe.new_TensorBasisElement(dims, p, btype, dmtype)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetBasisType(self):
        """GetBasisType(TensorBasisElement self) -> int"""
        return _fe.TensorBasisElement_GetBasisType(self)


    def GetBasis1D(self):
        """GetBasis1D(TensorBasisElement self) -> mfem::Poly_1D::Basis const &"""
        return _fe.TensorBasisElement_GetBasis1D(self)


    def GetDofMap(self):
        """GetDofMap(TensorBasisElement self) -> intArray"""
        return _fe.TensorBasisElement_GetDofMap(self)


    def GetTensorProductGeometry(dim):
        """GetTensorProductGeometry(int dim) -> mfem::Geometry::Type"""
        return _fe.TensorBasisElement_GetTensorProductGeometry(dim)

    GetTensorProductGeometry = staticmethod(GetTensorProductGeometry)

    def Pow(base, dim):
        """Pow(int base, int dim) -> int"""
        return _fe.TensorBasisElement_Pow(base, dim)

    Pow = staticmethod(Pow)
    __swig_destroy__ = _fe.delete_TensorBasisElement
    __del__ = lambda self: None
TensorBasisElement_swigregister = _fe.TensorBasisElement_swigregister
TensorBasisElement_swigregister(TensorBasisElement)

def TensorBasisElement_GetTensorProductGeometry(dim):
    """TensorBasisElement_GetTensorProductGeometry(int dim) -> mfem::Geometry::Type"""
    return _fe.TensorBasisElement_GetTensorProductGeometry(dim)

def TensorBasisElement_Pow(base, dim):
    """TensorBasisElement_Pow(int base, int dim) -> int"""
    return _fe.TensorBasisElement_Pow(base, dim)

class NodalTensorFiniteElement(NodalFiniteElement, TensorBasisElement):
    """Proxy of C++ mfem::NodalTensorFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement, TensorBasisElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodalTensorFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement, TensorBasisElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodalTensorFiniteElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetDofToQuad(self, ir, mode):
        """GetDofToQuad(NodalTensorFiniteElement self, IntegrationRule ir, mfem::DofToQuad::Mode mode) -> DofToQuad"""
        return _fe.NodalTensorFiniteElement_GetDofToQuad(self, ir, mode)

    __swig_destroy__ = _fe.delete_NodalTensorFiniteElement
    __del__ = lambda self: None
NodalTensorFiniteElement_swigregister = _fe.NodalTensorFiniteElement_swigregister
NodalTensorFiniteElement_swigregister(NodalTensorFiniteElement)

class PositiveTensorFiniteElement(PositiveFiniteElement, TensorBasisElement):
    """Proxy of C++ mfem::PositiveTensorFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement, TensorBasisElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositiveTensorFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement, TensorBasisElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositiveTensorFiniteElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetDofToQuad(self, ir, mode):
        """GetDofToQuad(PositiveTensorFiniteElement self, IntegrationRule ir, mfem::DofToQuad::Mode mode) -> DofToQuad"""
        return _fe.PositiveTensorFiniteElement_GetDofToQuad(self, ir, mode)

    __swig_destroy__ = _fe.delete_PositiveTensorFiniteElement
    __del__ = lambda self: None
PositiveTensorFiniteElement_swigregister = _fe.PositiveTensorFiniteElement_swigregister
PositiveTensorFiniteElement_swigregister(PositiveTensorFiniteElement)

class H1_SegmentElement(NodalTensorFiniteElement):
    """Proxy of C++ mfem::H1_SegmentElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalTensorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_SegmentElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalTensorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_SegmentElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::H1_SegmentElement self, int const p, int const btype) -> H1_SegmentElement
        __init__(mfem::H1_SegmentElement self, int const p) -> H1_SegmentElement
        """
        this = _fe.new_H1_SegmentElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(H1_SegmentElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.H1_SegmentElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(H1_SegmentElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.H1_SegmentElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(H1_SegmentElement self, int vertex, Vector dofs)"""
        return _fe.H1_SegmentElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_H1_SegmentElement
    __del__ = lambda self: None
H1_SegmentElement_swigregister = _fe.H1_SegmentElement_swigregister
H1_SegmentElement_swigregister(H1_SegmentElement)

class H1_QuadrilateralElement(NodalTensorFiniteElement):
    """Proxy of C++ mfem::H1_QuadrilateralElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalTensorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_QuadrilateralElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalTensorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_QuadrilateralElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::H1_QuadrilateralElement self, int const p, int const btype) -> H1_QuadrilateralElement
        __init__(mfem::H1_QuadrilateralElement self, int const p) -> H1_QuadrilateralElement
        """
        this = _fe.new_H1_QuadrilateralElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(H1_QuadrilateralElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.H1_QuadrilateralElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(H1_QuadrilateralElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.H1_QuadrilateralElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(H1_QuadrilateralElement self, int vertex, Vector dofs)"""
        return _fe.H1_QuadrilateralElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_H1_QuadrilateralElement
    __del__ = lambda self: None
H1_QuadrilateralElement_swigregister = _fe.H1_QuadrilateralElement_swigregister
H1_QuadrilateralElement_swigregister(H1_QuadrilateralElement)

class H1_HexahedronElement(NodalTensorFiniteElement):
    """Proxy of C++ mfem::H1_HexahedronElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalTensorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_HexahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalTensorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_HexahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::H1_HexahedronElement self, int const p, int const btype) -> H1_HexahedronElement
        __init__(mfem::H1_HexahedronElement self, int const p) -> H1_HexahedronElement
        """
        this = _fe.new_H1_HexahedronElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(H1_HexahedronElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.H1_HexahedronElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(H1_HexahedronElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.H1_HexahedronElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(H1_HexahedronElement self, int vertex, Vector dofs)"""
        return _fe.H1_HexahedronElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_H1_HexahedronElement
    __del__ = lambda self: None
H1_HexahedronElement_swigregister = _fe.H1_HexahedronElement_swigregister
H1_HexahedronElement_swigregister(H1_HexahedronElement)

class H1Pos_SegmentElement(PositiveTensorFiniteElement):
    """Proxy of C++ mfem::H1Pos_SegmentElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveTensorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_SegmentElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveTensorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_SegmentElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::H1Pos_SegmentElement self, int const p) -> H1Pos_SegmentElement"""
        this = _fe.new_H1Pos_SegmentElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(H1Pos_SegmentElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.H1Pos_SegmentElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(H1Pos_SegmentElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.H1Pos_SegmentElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(H1Pos_SegmentElement self, int vertex, Vector dofs)"""
        return _fe.H1Pos_SegmentElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_H1Pos_SegmentElement
    __del__ = lambda self: None
H1Pos_SegmentElement_swigregister = _fe.H1Pos_SegmentElement_swigregister
H1Pos_SegmentElement_swigregister(H1Pos_SegmentElement)

class H1Pos_QuadrilateralElement(PositiveTensorFiniteElement):
    """Proxy of C++ mfem::H1Pos_QuadrilateralElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveTensorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_QuadrilateralElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveTensorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_QuadrilateralElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::H1Pos_QuadrilateralElement self, int const p) -> H1Pos_QuadrilateralElement"""
        this = _fe.new_H1Pos_QuadrilateralElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(H1Pos_QuadrilateralElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.H1Pos_QuadrilateralElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(H1Pos_QuadrilateralElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.H1Pos_QuadrilateralElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(H1Pos_QuadrilateralElement self, int vertex, Vector dofs)"""
        return _fe.H1Pos_QuadrilateralElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_H1Pos_QuadrilateralElement
    __del__ = lambda self: None
H1Pos_QuadrilateralElement_swigregister = _fe.H1Pos_QuadrilateralElement_swigregister
H1Pos_QuadrilateralElement_swigregister(H1Pos_QuadrilateralElement)

class H1Pos_HexahedronElement(PositiveTensorFiniteElement):
    """Proxy of C++ mfem::H1Pos_HexahedronElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveTensorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_HexahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveTensorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_HexahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::H1Pos_HexahedronElement self, int const p) -> H1Pos_HexahedronElement"""
        this = _fe.new_H1Pos_HexahedronElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(H1Pos_HexahedronElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.H1Pos_HexahedronElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(H1Pos_HexahedronElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.H1Pos_HexahedronElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(H1Pos_HexahedronElement self, int vertex, Vector dofs)"""
        return _fe.H1Pos_HexahedronElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_H1Pos_HexahedronElement
    __del__ = lambda self: None
H1Pos_HexahedronElement_swigregister = _fe.H1Pos_HexahedronElement_swigregister
H1Pos_HexahedronElement_swigregister(H1Pos_HexahedronElement)

class H1_TriangleElement(NodalFiniteElement):
    """Proxy of C++ mfem::H1_TriangleElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_TriangleElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_TriangleElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::H1_TriangleElement self, int const p, int const btype) -> H1_TriangleElement
        __init__(mfem::H1_TriangleElement self, int const p) -> H1_TriangleElement
        """
        this = _fe.new_H1_TriangleElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(H1_TriangleElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.H1_TriangleElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(H1_TriangleElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.H1_TriangleElement_CalcDShape(self, ip, dshape)


    def CalcHessian(self, ip, ddshape):
        """CalcHessian(H1_TriangleElement self, IntegrationPoint ip, DenseMatrix ddshape)"""
        return _fe.H1_TriangleElement_CalcHessian(self, ip, ddshape)

    __swig_destroy__ = _fe.delete_H1_TriangleElement
    __del__ = lambda self: None
H1_TriangleElement_swigregister = _fe.H1_TriangleElement_swigregister
H1_TriangleElement_swigregister(H1_TriangleElement)

class H1_TetrahedronElement(NodalFiniteElement):
    """Proxy of C++ mfem::H1_TetrahedronElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_TetrahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_TetrahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::H1_TetrahedronElement self, int const p, int const btype) -> H1_TetrahedronElement
        __init__(mfem::H1_TetrahedronElement self, int const p) -> H1_TetrahedronElement
        """
        this = _fe.new_H1_TetrahedronElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(H1_TetrahedronElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.H1_TetrahedronElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(H1_TetrahedronElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.H1_TetrahedronElement_CalcDShape(self, ip, dshape)


    def CalcHessian(self, ip, ddshape):
        """CalcHessian(H1_TetrahedronElement self, IntegrationPoint ip, DenseMatrix ddshape)"""
        return _fe.H1_TetrahedronElement_CalcHessian(self, ip, ddshape)

    __swig_destroy__ = _fe.delete_H1_TetrahedronElement
    __del__ = lambda self: None
H1_TetrahedronElement_swigregister = _fe.H1_TetrahedronElement_swigregister
H1_TetrahedronElement_swigregister(H1_TetrahedronElement)

class H1Pos_TriangleElement(PositiveFiniteElement):
    """Proxy of C++ mfem::H1Pos_TriangleElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_TriangleElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_TriangleElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::H1Pos_TriangleElement self, int const p) -> H1Pos_TriangleElement"""
        this = _fe.new_H1Pos_TriangleElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, *args):
        """
        CalcShape(H1Pos_TriangleElement self, int const p, double const x, double const y, double * shape)
        CalcShape(H1Pos_TriangleElement self, IntegrationPoint ip, Vector shape)
        """
        return _fe.H1Pos_TriangleElement_CalcShape(self, *args)


    def CalcDShape(self, *args):
        """
        CalcDShape(H1Pos_TriangleElement self, int const p, double const x, double const y, double * dshape_1d, double * dshape)
        CalcDShape(H1Pos_TriangleElement self, IntegrationPoint ip, DenseMatrix dshape)
        """
        return _fe.H1Pos_TriangleElement_CalcDShape(self, *args)

    __swig_destroy__ = _fe.delete_H1Pos_TriangleElement
    __del__ = lambda self: None
H1Pos_TriangleElement_swigregister = _fe.H1Pos_TriangleElement_swigregister
H1Pos_TriangleElement_swigregister(H1Pos_TriangleElement)

class H1Pos_TetrahedronElement(PositiveFiniteElement):
    """Proxy of C++ mfem::H1Pos_TetrahedronElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_TetrahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_TetrahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::H1Pos_TetrahedronElement self, int const p) -> H1Pos_TetrahedronElement"""
        this = _fe.new_H1Pos_TetrahedronElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, *args):
        """
        CalcShape(H1Pos_TetrahedronElement self, int const p, double const x, double const y, double const z, double * shape)
        CalcShape(H1Pos_TetrahedronElement self, IntegrationPoint ip, Vector shape)
        """
        return _fe.H1Pos_TetrahedronElement_CalcShape(self, *args)


    def CalcDShape(self, *args):
        """
        CalcDShape(H1Pos_TetrahedronElement self, int const p, double const x, double const y, double const z, double * dshape_1d, double * dshape)
        CalcDShape(H1Pos_TetrahedronElement self, IntegrationPoint ip, DenseMatrix dshape)
        """
        return _fe.H1Pos_TetrahedronElement_CalcDShape(self, *args)

    __swig_destroy__ = _fe.delete_H1Pos_TetrahedronElement
    __del__ = lambda self: None
H1Pos_TetrahedronElement_swigregister = _fe.H1Pos_TetrahedronElement_swigregister
H1Pos_TetrahedronElement_swigregister(H1Pos_TetrahedronElement)

class H1_WedgeElement(NodalFiniteElement):
    """Proxy of C++ mfem::H1_WedgeElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1_WedgeElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1_WedgeElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::H1_WedgeElement self, int const p, int const btype) -> H1_WedgeElement
        __init__(mfem::H1_WedgeElement self, int const p) -> H1_WedgeElement
        """
        this = _fe.new_H1_WedgeElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(H1_WedgeElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.H1_WedgeElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(H1_WedgeElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.H1_WedgeElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_H1_WedgeElement
    __del__ = lambda self: None
H1_WedgeElement_swigregister = _fe.H1_WedgeElement_swigregister
H1_WedgeElement_swigregister(H1_WedgeElement)

class BiLinear3DFiniteElement(H1_WedgeElement):
    """Proxy of C++ mfem::BiLinear3DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [H1_WedgeElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiLinear3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [H1_WedgeElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiLinear3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::BiLinear3DFiniteElement self) -> BiLinear3DFiniteElement"""
        this = _fe.new_BiLinear3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe.delete_BiLinear3DFiniteElement
    __del__ = lambda self: None
BiLinear3DFiniteElement_swigregister = _fe.BiLinear3DFiniteElement_swigregister
BiLinear3DFiniteElement_swigregister(BiLinear3DFiniteElement)

class BiQuadratic3DFiniteElement(H1_WedgeElement):
    """Proxy of C++ mfem::BiQuadratic3DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [H1_WedgeElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiQuadratic3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [H1_WedgeElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiQuadratic3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::BiQuadratic3DFiniteElement self) -> BiQuadratic3DFiniteElement"""
        this = _fe.new_BiQuadratic3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe.delete_BiQuadratic3DFiniteElement
    __del__ = lambda self: None
BiQuadratic3DFiniteElement_swigregister = _fe.BiQuadratic3DFiniteElement_swigregister
BiQuadratic3DFiniteElement_swigregister(BiQuadratic3DFiniteElement)

class BiCubic3DFiniteElement(H1_WedgeElement):
    """Proxy of C++ mfem::BiCubic3DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [H1_WedgeElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiCubic3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [H1_WedgeElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BiCubic3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::BiCubic3DFiniteElement self) -> BiCubic3DFiniteElement"""
        this = _fe.new_BiCubic3DFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe.delete_BiCubic3DFiniteElement
    __del__ = lambda self: None
BiCubic3DFiniteElement_swigregister = _fe.BiCubic3DFiniteElement_swigregister
BiCubic3DFiniteElement_swigregister(BiCubic3DFiniteElement)

class H1Pos_WedgeElement(PositiveFiniteElement):
    """Proxy of C++ mfem::H1Pos_WedgeElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, H1Pos_WedgeElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, H1Pos_WedgeElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::H1Pos_WedgeElement self, int const p) -> H1Pos_WedgeElement"""
        this = _fe.new_H1Pos_WedgeElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(H1Pos_WedgeElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.H1Pos_WedgeElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(H1Pos_WedgeElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.H1Pos_WedgeElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_H1Pos_WedgeElement
    __del__ = lambda self: None
H1Pos_WedgeElement_swigregister = _fe.H1Pos_WedgeElement_swigregister
H1Pos_WedgeElement_swigregister(H1Pos_WedgeElement)

class L2_SegmentElement(NodalTensorFiniteElement):
    """Proxy of C++ mfem::L2_SegmentElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalTensorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_SegmentElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalTensorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_SegmentElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::L2_SegmentElement self, int const p, int const btype) -> L2_SegmentElement
        __init__(mfem::L2_SegmentElement self, int const p) -> L2_SegmentElement
        """
        this = _fe.new_L2_SegmentElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(L2_SegmentElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.L2_SegmentElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(L2_SegmentElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.L2_SegmentElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(L2_SegmentElement self, int vertex, Vector dofs)"""
        return _fe.L2_SegmentElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_L2_SegmentElement
    __del__ = lambda self: None
L2_SegmentElement_swigregister = _fe.L2_SegmentElement_swigregister
L2_SegmentElement_swigregister(L2_SegmentElement)

class L2Pos_SegmentElement(PositiveTensorFiniteElement):
    """Proxy of C++ mfem::L2Pos_SegmentElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveTensorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2Pos_SegmentElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveTensorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2Pos_SegmentElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::L2Pos_SegmentElement self, int const p) -> L2Pos_SegmentElement"""
        this = _fe.new_L2Pos_SegmentElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(L2Pos_SegmentElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.L2Pos_SegmentElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(L2Pos_SegmentElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.L2Pos_SegmentElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(L2Pos_SegmentElement self, int vertex, Vector dofs)"""
        return _fe.L2Pos_SegmentElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_L2Pos_SegmentElement
    __del__ = lambda self: None
L2Pos_SegmentElement_swigregister = _fe.L2Pos_SegmentElement_swigregister
L2Pos_SegmentElement_swigregister(L2Pos_SegmentElement)

class L2_QuadrilateralElement(NodalTensorFiniteElement):
    """Proxy of C++ mfem::L2_QuadrilateralElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalTensorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_QuadrilateralElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalTensorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_QuadrilateralElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::L2_QuadrilateralElement self, int const p, int const btype) -> L2_QuadrilateralElement
        __init__(mfem::L2_QuadrilateralElement self, int const p) -> L2_QuadrilateralElement
        """
        this = _fe.new_L2_QuadrilateralElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(L2_QuadrilateralElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.L2_QuadrilateralElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(L2_QuadrilateralElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.L2_QuadrilateralElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(L2_QuadrilateralElement self, int vertex, Vector dofs)"""
        return _fe.L2_QuadrilateralElement_ProjectDelta(self, vertex, dofs)


    def ProjectCurl(self, fe, Trans, curl):
        """ProjectCurl(L2_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe.L2_QuadrilateralElement_ProjectCurl(self, fe, Trans, curl)

    __swig_destroy__ = _fe.delete_L2_QuadrilateralElement
    __del__ = lambda self: None
L2_QuadrilateralElement_swigregister = _fe.L2_QuadrilateralElement_swigregister
L2_QuadrilateralElement_swigregister(L2_QuadrilateralElement)

class L2Pos_QuadrilateralElement(PositiveTensorFiniteElement):
    """Proxy of C++ mfem::L2Pos_QuadrilateralElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveTensorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2Pos_QuadrilateralElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveTensorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2Pos_QuadrilateralElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::L2Pos_QuadrilateralElement self, int const p) -> L2Pos_QuadrilateralElement"""
        this = _fe.new_L2Pos_QuadrilateralElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(L2Pos_QuadrilateralElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.L2Pos_QuadrilateralElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(L2Pos_QuadrilateralElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.L2Pos_QuadrilateralElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(L2Pos_QuadrilateralElement self, int vertex, Vector dofs)"""
        return _fe.L2Pos_QuadrilateralElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_L2Pos_QuadrilateralElement
    __del__ = lambda self: None
L2Pos_QuadrilateralElement_swigregister = _fe.L2Pos_QuadrilateralElement_swigregister
L2Pos_QuadrilateralElement_swigregister(L2Pos_QuadrilateralElement)

class L2_HexahedronElement(NodalTensorFiniteElement):
    """Proxy of C++ mfem::L2_HexahedronElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalTensorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_HexahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalTensorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_HexahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::L2_HexahedronElement self, int const p, int const btype) -> L2_HexahedronElement
        __init__(mfem::L2_HexahedronElement self, int const p) -> L2_HexahedronElement
        """
        this = _fe.new_L2_HexahedronElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(L2_HexahedronElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.L2_HexahedronElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(L2_HexahedronElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.L2_HexahedronElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(L2_HexahedronElement self, int vertex, Vector dofs)"""
        return _fe.L2_HexahedronElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_L2_HexahedronElement
    __del__ = lambda self: None
L2_HexahedronElement_swigregister = _fe.L2_HexahedronElement_swigregister
L2_HexahedronElement_swigregister(L2_HexahedronElement)

class L2Pos_HexahedronElement(PositiveTensorFiniteElement):
    """Proxy of C++ mfem::L2Pos_HexahedronElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveTensorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2Pos_HexahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveTensorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2Pos_HexahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::L2Pos_HexahedronElement self, int const p) -> L2Pos_HexahedronElement"""
        this = _fe.new_L2Pos_HexahedronElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(L2Pos_HexahedronElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.L2Pos_HexahedronElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(L2Pos_HexahedronElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.L2Pos_HexahedronElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(L2Pos_HexahedronElement self, int vertex, Vector dofs)"""
        return _fe.L2Pos_HexahedronElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_L2Pos_HexahedronElement
    __del__ = lambda self: None
L2Pos_HexahedronElement_swigregister = _fe.L2Pos_HexahedronElement_swigregister
L2Pos_HexahedronElement_swigregister(L2Pos_HexahedronElement)

class L2_TriangleElement(NodalFiniteElement):
    """Proxy of C++ mfem::L2_TriangleElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_TriangleElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_TriangleElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::L2_TriangleElement self, int const p, int const btype) -> L2_TriangleElement
        __init__(mfem::L2_TriangleElement self, int const p) -> L2_TriangleElement
        """
        this = _fe.new_L2_TriangleElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(L2_TriangleElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.L2_TriangleElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(L2_TriangleElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.L2_TriangleElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(L2_TriangleElement self, int vertex, Vector dofs)"""
        return _fe.L2_TriangleElement_ProjectDelta(self, vertex, dofs)


    def ProjectCurl(self, fe, Trans, curl):
        """ProjectCurl(L2_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe.L2_TriangleElement_ProjectCurl(self, fe, Trans, curl)

    __swig_destroy__ = _fe.delete_L2_TriangleElement
    __del__ = lambda self: None
L2_TriangleElement_swigregister = _fe.L2_TriangleElement_swigregister
L2_TriangleElement_swigregister(L2_TriangleElement)

class L2Pos_TriangleElement(PositiveFiniteElement):
    """Proxy of C++ mfem::L2Pos_TriangleElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2Pos_TriangleElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2Pos_TriangleElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::L2Pos_TriangleElement self, int const p) -> L2Pos_TriangleElement"""
        this = _fe.new_L2Pos_TriangleElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(L2Pos_TriangleElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.L2Pos_TriangleElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(L2Pos_TriangleElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.L2Pos_TriangleElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(L2Pos_TriangleElement self, int vertex, Vector dofs)"""
        return _fe.L2Pos_TriangleElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_L2Pos_TriangleElement
    __del__ = lambda self: None
L2Pos_TriangleElement_swigregister = _fe.L2Pos_TriangleElement_swigregister
L2Pos_TriangleElement_swigregister(L2Pos_TriangleElement)

class L2_TetrahedronElement(NodalFiniteElement):
    """Proxy of C++ mfem::L2_TetrahedronElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_TetrahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_TetrahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::L2_TetrahedronElement self, int const p, int const btype) -> L2_TetrahedronElement
        __init__(mfem::L2_TetrahedronElement self, int const p) -> L2_TetrahedronElement
        """
        this = _fe.new_L2_TetrahedronElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(L2_TetrahedronElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.L2_TetrahedronElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(L2_TetrahedronElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.L2_TetrahedronElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(L2_TetrahedronElement self, int vertex, Vector dofs)"""
        return _fe.L2_TetrahedronElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_L2_TetrahedronElement
    __del__ = lambda self: None
L2_TetrahedronElement_swigregister = _fe.L2_TetrahedronElement_swigregister
L2_TetrahedronElement_swigregister(L2_TetrahedronElement)

class L2Pos_TetrahedronElement(PositiveFiniteElement):
    """Proxy of C++ mfem::L2Pos_TetrahedronElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2Pos_TetrahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2Pos_TetrahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::L2Pos_TetrahedronElement self, int const p) -> L2Pos_TetrahedronElement"""
        this = _fe.new_L2Pos_TetrahedronElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(L2Pos_TetrahedronElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.L2Pos_TetrahedronElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(L2Pos_TetrahedronElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.L2Pos_TetrahedronElement_CalcDShape(self, ip, dshape)


    def ProjectDelta(self, vertex, dofs):
        """ProjectDelta(L2Pos_TetrahedronElement self, int vertex, Vector dofs)"""
        return _fe.L2Pos_TetrahedronElement_ProjectDelta(self, vertex, dofs)

    __swig_destroy__ = _fe.delete_L2Pos_TetrahedronElement
    __del__ = lambda self: None
L2Pos_TetrahedronElement_swigregister = _fe.L2Pos_TetrahedronElement_swigregister
L2Pos_TetrahedronElement_swigregister(L2Pos_TetrahedronElement)

class L2_WedgeElement(NodalFiniteElement):
    """Proxy of C++ mfem::L2_WedgeElement class."""

    __swig_setmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2_WedgeElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NodalFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2_WedgeElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::L2_WedgeElement self, int const p, int const btype) -> L2_WedgeElement
        __init__(mfem::L2_WedgeElement self, int const p) -> L2_WedgeElement
        """
        this = _fe.new_L2_WedgeElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(L2_WedgeElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.L2_WedgeElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(L2_WedgeElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.L2_WedgeElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_L2_WedgeElement
    __del__ = lambda self: None
L2_WedgeElement_swigregister = _fe.L2_WedgeElement_swigregister
L2_WedgeElement_swigregister(L2_WedgeElement)

class P0WedgeFiniteElement(L2_WedgeElement):
    """Proxy of C++ mfem::P0WedgeFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [L2_WedgeElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, P0WedgeFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [L2_WedgeElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, P0WedgeFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::P0WedgeFiniteElement self) -> P0WedgeFiniteElement"""
        this = _fe.new_P0WedgeFiniteElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _fe.delete_P0WedgeFiniteElement
    __del__ = lambda self: None
P0WedgeFiniteElement_swigregister = _fe.P0WedgeFiniteElement_swigregister
P0WedgeFiniteElement_swigregister(P0WedgeFiniteElement)

class L2Pos_WedgeElement(PositiveFiniteElement):
    """Proxy of C++ mfem::L2Pos_WedgeElement class."""

    __swig_setmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, L2Pos_WedgeElement, name, value)
    __swig_getmethods__ = {}
    for _s in [PositiveFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, L2Pos_WedgeElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::L2Pos_WedgeElement self, int const p) -> L2Pos_WedgeElement"""
        this = _fe.new_L2Pos_WedgeElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(L2Pos_WedgeElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.L2Pos_WedgeElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(L2Pos_WedgeElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.L2Pos_WedgeElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_L2Pos_WedgeElement
    __del__ = lambda self: None
L2Pos_WedgeElement_swigregister = _fe.L2Pos_WedgeElement_swigregister
L2Pos_WedgeElement_swigregister(L2Pos_WedgeElement)

class RT_QuadrilateralElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT_QuadrilateralElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT_QuadrilateralElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT_QuadrilateralElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::RT_QuadrilateralElement self, int const p, int const cb_type, int const ob_type) -> RT_QuadrilateralElement
        __init__(mfem::RT_QuadrilateralElement self, int const p, int const cb_type) -> RT_QuadrilateralElement
        __init__(mfem::RT_QuadrilateralElement self, int const p) -> RT_QuadrilateralElement
        """
        this = _fe.new_RT_QuadrilateralElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT_QuadrilateralElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT_QuadrilateralElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT_QuadrilateralElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT_QuadrilateralElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT_QuadrilateralElement_CalcDivShape(self, ip, divshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(RT_QuadrilateralElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT_QuadrilateralElement_GetLocalInterpolation(self, Trans, I)


    def GetLocalRestriction(self, Trans, R):
        """GetLocalRestriction(RT_QuadrilateralElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe.RT_QuadrilateralElement_GetLocalRestriction(self, Trans, R)


    def GetTransferMatrix(self, fe, Trans, I):
        """GetTransferMatrix(RT_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT_QuadrilateralElement_GetTransferMatrix(self, fe, Trans, I)


    def ProjectMatrixCoefficient(self, mc, T, dofs):
        """ProjectMatrixCoefficient(RT_QuadrilateralElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe.RT_QuadrilateralElement_ProjectMatrixCoefficient(self, mc, T, dofs)


    def Project(self, *args):
        """
        Project(RT_QuadrilateralElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT_QuadrilateralElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(RT_QuadrilateralElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe.RT_QuadrilateralElement_Project(self, *args)


    def ProjectGrad(self, fe, Trans, grad):
        """ProjectGrad(RT_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe.RT_QuadrilateralElement_ProjectGrad(self, fe, Trans, grad)


    def ProjectCurl(self, fe, Trans, curl):
        """ProjectCurl(RT_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe.RT_QuadrilateralElement_ProjectCurl(self, fe, Trans, curl)

    __swig_destroy__ = _fe.delete_RT_QuadrilateralElement
    __del__ = lambda self: None
RT_QuadrilateralElement_swigregister = _fe.RT_QuadrilateralElement_swigregister
RT_QuadrilateralElement_swigregister(RT_QuadrilateralElement)

class RT_HexahedronElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT_HexahedronElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT_HexahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT_HexahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::RT_HexahedronElement self, int const p, int const cb_type, int const ob_type) -> RT_HexahedronElement
        __init__(mfem::RT_HexahedronElement self, int const p, int const cb_type) -> RT_HexahedronElement
        __init__(mfem::RT_HexahedronElement self, int const p) -> RT_HexahedronElement
        """
        this = _fe.new_RT_HexahedronElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT_HexahedronElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT_HexahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT_HexahedronElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT_HexahedronElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT_HexahedronElement_CalcDivShape(self, ip, divshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(RT_HexahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT_HexahedronElement_GetLocalInterpolation(self, Trans, I)


    def GetLocalRestriction(self, Trans, R):
        """GetLocalRestriction(RT_HexahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe.RT_HexahedronElement_GetLocalRestriction(self, Trans, R)


    def GetTransferMatrix(self, fe, Trans, I):
        """GetTransferMatrix(RT_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT_HexahedronElement_GetTransferMatrix(self, fe, Trans, I)


    def ProjectMatrixCoefficient(self, mc, T, dofs):
        """ProjectMatrixCoefficient(RT_HexahedronElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe.RT_HexahedronElement_ProjectMatrixCoefficient(self, mc, T, dofs)


    def Project(self, *args):
        """
        Project(RT_HexahedronElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT_HexahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(RT_HexahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe.RT_HexahedronElement_Project(self, *args)


    def ProjectCurl(self, fe, Trans, curl):
        """ProjectCurl(RT_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe.RT_HexahedronElement_ProjectCurl(self, fe, Trans, curl)

    __swig_destroy__ = _fe.delete_RT_HexahedronElement
    __del__ = lambda self: None
RT_HexahedronElement_swigregister = _fe.RT_HexahedronElement_swigregister
RT_HexahedronElement_swigregister(RT_HexahedronElement)

class RT_TriangleElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT_TriangleElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT_TriangleElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT_TriangleElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::RT_TriangleElement self, int const p) -> RT_TriangleElement"""
        this = _fe.new_RT_TriangleElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT_TriangleElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT_TriangleElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT_TriangleElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT_TriangleElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT_TriangleElement_CalcDivShape(self, ip, divshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(RT_TriangleElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT_TriangleElement_GetLocalInterpolation(self, Trans, I)


    def GetLocalRestriction(self, Trans, R):
        """GetLocalRestriction(RT_TriangleElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe.RT_TriangleElement_GetLocalRestriction(self, Trans, R)


    def GetTransferMatrix(self, fe, Trans, I):
        """GetTransferMatrix(RT_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT_TriangleElement_GetTransferMatrix(self, fe, Trans, I)


    def ProjectMatrixCoefficient(self, mc, T, dofs):
        """ProjectMatrixCoefficient(RT_TriangleElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe.RT_TriangleElement_ProjectMatrixCoefficient(self, mc, T, dofs)


    def Project(self, *args):
        """
        Project(RT_TriangleElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT_TriangleElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(RT_TriangleElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe.RT_TriangleElement_Project(self, *args)


    def ProjectGrad(self, fe, Trans, grad):
        """ProjectGrad(RT_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe.RT_TriangleElement_ProjectGrad(self, fe, Trans, grad)


    def ProjectCurl(self, fe, Trans, curl):
        """ProjectCurl(RT_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe.RT_TriangleElement_ProjectCurl(self, fe, Trans, curl)

    __swig_destroy__ = _fe.delete_RT_TriangleElement
    __del__ = lambda self: None
RT_TriangleElement_swigregister = _fe.RT_TriangleElement_swigregister
RT_TriangleElement_swigregister(RT_TriangleElement)

class RT_TetrahedronElement(VectorFiniteElement):
    """Proxy of C++ mfem::RT_TetrahedronElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RT_TetrahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RT_TetrahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::RT_TetrahedronElement self, int const p) -> RT_TetrahedronElement"""
        this = _fe.new_RT_TetrahedronElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(RT_TetrahedronElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(RT_TetrahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.RT_TetrahedronElement_CalcVShape(self, *args)


    def CalcDivShape(self, ip, divshape):
        """CalcDivShape(RT_TetrahedronElement self, IntegrationPoint ip, Vector divshape)"""
        return _fe.RT_TetrahedronElement_CalcDivShape(self, ip, divshape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(RT_TetrahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT_TetrahedronElement_GetLocalInterpolation(self, Trans, I)


    def GetLocalRestriction(self, Trans, R):
        """GetLocalRestriction(RT_TetrahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe.RT_TetrahedronElement_GetLocalRestriction(self, Trans, R)


    def GetTransferMatrix(self, fe, Trans, I):
        """GetTransferMatrix(RT_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.RT_TetrahedronElement_GetTransferMatrix(self, fe, Trans, I)


    def ProjectMatrixCoefficient(self, mc, T, dofs):
        """ProjectMatrixCoefficient(RT_TetrahedronElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe.RT_TetrahedronElement_ProjectMatrixCoefficient(self, mc, T, dofs)


    def Project(self, *args):
        """
        Project(RT_TetrahedronElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT_TetrahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(RT_TetrahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(RT_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe.RT_TetrahedronElement_Project(self, *args)


    def ProjectCurl(self, fe, Trans, curl):
        """ProjectCurl(RT_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe.RT_TetrahedronElement_ProjectCurl(self, fe, Trans, curl)

    __swig_destroy__ = _fe.delete_RT_TetrahedronElement
    __del__ = lambda self: None
RT_TetrahedronElement_swigregister = _fe.RT_TetrahedronElement_swigregister
RT_TetrahedronElement_swigregister(RT_TetrahedronElement)

class ND_HexahedronElement(VectorFiniteElement):
    """Proxy of C++ mfem::ND_HexahedronElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_HexahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_HexahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::ND_HexahedronElement self, int const p, int const cb_type, int const ob_type) -> ND_HexahedronElement
        __init__(mfem::ND_HexahedronElement self, int const p, int const cb_type) -> ND_HexahedronElement
        __init__(mfem::ND_HexahedronElement self, int const p) -> ND_HexahedronElement
        """
        this = _fe.new_ND_HexahedronElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(ND_HexahedronElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(ND_HexahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.ND_HexahedronElement_CalcVShape(self, *args)


    def CalcCurlShape(self, ip, curl_shape):
        """CalcCurlShape(ND_HexahedronElement self, IntegrationPoint ip, DenseMatrix curl_shape)"""
        return _fe.ND_HexahedronElement_CalcCurlShape(self, ip, curl_shape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(ND_HexahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.ND_HexahedronElement_GetLocalInterpolation(self, Trans, I)


    def GetLocalRestriction(self, Trans, R):
        """GetLocalRestriction(ND_HexahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe.ND_HexahedronElement_GetLocalRestriction(self, Trans, R)


    def GetTransferMatrix(self, fe, Trans, I):
        """GetTransferMatrix(ND_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.ND_HexahedronElement_GetTransferMatrix(self, fe, Trans, I)


    def ProjectMatrixCoefficient(self, mc, T, dofs):
        """ProjectMatrixCoefficient(ND_HexahedronElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe.ND_HexahedronElement_ProjectMatrixCoefficient(self, mc, T, dofs)


    def Project(self, *args):
        """
        Project(ND_HexahedronElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_HexahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(ND_HexahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe.ND_HexahedronElement_Project(self, *args)


    def ProjectGrad(self, fe, Trans, grad):
        """ProjectGrad(ND_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe.ND_HexahedronElement_ProjectGrad(self, fe, Trans, grad)


    def ProjectCurl(self, fe, Trans, curl):
        """ProjectCurl(ND_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe.ND_HexahedronElement_ProjectCurl(self, fe, Trans, curl)

    __swig_destroy__ = _fe.delete_ND_HexahedronElement
    __del__ = lambda self: None
ND_HexahedronElement_swigregister = _fe.ND_HexahedronElement_swigregister
ND_HexahedronElement_swigregister(ND_HexahedronElement)

class ND_QuadrilateralElement(VectorFiniteElement):
    """Proxy of C++ mfem::ND_QuadrilateralElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_QuadrilateralElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_QuadrilateralElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::ND_QuadrilateralElement self, int const p, int const cb_type, int const ob_type) -> ND_QuadrilateralElement
        __init__(mfem::ND_QuadrilateralElement self, int const p, int const cb_type) -> ND_QuadrilateralElement
        __init__(mfem::ND_QuadrilateralElement self, int const p) -> ND_QuadrilateralElement
        """
        this = _fe.new_ND_QuadrilateralElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(ND_QuadrilateralElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(ND_QuadrilateralElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.ND_QuadrilateralElement_CalcVShape(self, *args)


    def CalcCurlShape(self, ip, curl_shape):
        """CalcCurlShape(ND_QuadrilateralElement self, IntegrationPoint ip, DenseMatrix curl_shape)"""
        return _fe.ND_QuadrilateralElement_CalcCurlShape(self, ip, curl_shape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(ND_QuadrilateralElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.ND_QuadrilateralElement_GetLocalInterpolation(self, Trans, I)


    def GetLocalRestriction(self, Trans, R):
        """GetLocalRestriction(ND_QuadrilateralElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe.ND_QuadrilateralElement_GetLocalRestriction(self, Trans, R)


    def GetTransferMatrix(self, fe, Trans, I):
        """GetTransferMatrix(ND_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.ND_QuadrilateralElement_GetTransferMatrix(self, fe, Trans, I)


    def ProjectMatrixCoefficient(self, mc, T, dofs):
        """ProjectMatrixCoefficient(ND_QuadrilateralElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe.ND_QuadrilateralElement_ProjectMatrixCoefficient(self, mc, T, dofs)


    def Project(self, *args):
        """
        Project(ND_QuadrilateralElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_QuadrilateralElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(ND_QuadrilateralElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe.ND_QuadrilateralElement_Project(self, *args)


    def ProjectGrad(self, fe, Trans, grad):
        """ProjectGrad(ND_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe.ND_QuadrilateralElement_ProjectGrad(self, fe, Trans, grad)

    __swig_destroy__ = _fe.delete_ND_QuadrilateralElement
    __del__ = lambda self: None
ND_QuadrilateralElement_swigregister = _fe.ND_QuadrilateralElement_swigregister
ND_QuadrilateralElement_swigregister(ND_QuadrilateralElement)

class ND_TetrahedronElement(VectorFiniteElement):
    """Proxy of C++ mfem::ND_TetrahedronElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_TetrahedronElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_TetrahedronElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::ND_TetrahedronElement self, int const p) -> ND_TetrahedronElement"""
        this = _fe.new_ND_TetrahedronElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(ND_TetrahedronElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(ND_TetrahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.ND_TetrahedronElement_CalcVShape(self, *args)


    def CalcCurlShape(self, ip, curl_shape):
        """CalcCurlShape(ND_TetrahedronElement self, IntegrationPoint ip, DenseMatrix curl_shape)"""
        return _fe.ND_TetrahedronElement_CalcCurlShape(self, ip, curl_shape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(ND_TetrahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.ND_TetrahedronElement_GetLocalInterpolation(self, Trans, I)


    def GetLocalRestriction(self, Trans, R):
        """GetLocalRestriction(ND_TetrahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe.ND_TetrahedronElement_GetLocalRestriction(self, Trans, R)


    def GetTransferMatrix(self, fe, Trans, I):
        """GetTransferMatrix(ND_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.ND_TetrahedronElement_GetTransferMatrix(self, fe, Trans, I)


    def ProjectMatrixCoefficient(self, mc, T, dofs):
        """ProjectMatrixCoefficient(ND_TetrahedronElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe.ND_TetrahedronElement_ProjectMatrixCoefficient(self, mc, T, dofs)


    def Project(self, *args):
        """
        Project(ND_TetrahedronElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_TetrahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(ND_TetrahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe.ND_TetrahedronElement_Project(self, *args)


    def ProjectGrad(self, fe, Trans, grad):
        """ProjectGrad(ND_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe.ND_TetrahedronElement_ProjectGrad(self, fe, Trans, grad)


    def ProjectCurl(self, fe, Trans, curl):
        """ProjectCurl(ND_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe.ND_TetrahedronElement_ProjectCurl(self, fe, Trans, curl)

    __swig_destroy__ = _fe.delete_ND_TetrahedronElement
    __del__ = lambda self: None
ND_TetrahedronElement_swigregister = _fe.ND_TetrahedronElement_swigregister
ND_TetrahedronElement_swigregister(ND_TetrahedronElement)

class ND_TriangleElement(VectorFiniteElement):
    """Proxy of C++ mfem::ND_TriangleElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_TriangleElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_TriangleElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::ND_TriangleElement self, int const p) -> ND_TriangleElement"""
        this = _fe.new_ND_TriangleElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcVShape(self, *args):
        """
        CalcVShape(ND_TriangleElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(ND_TriangleElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.ND_TriangleElement_CalcVShape(self, *args)


    def CalcCurlShape(self, ip, curl_shape):
        """CalcCurlShape(ND_TriangleElement self, IntegrationPoint ip, DenseMatrix curl_shape)"""
        return _fe.ND_TriangleElement_CalcCurlShape(self, ip, curl_shape)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(ND_TriangleElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.ND_TriangleElement_GetLocalInterpolation(self, Trans, I)


    def GetLocalRestriction(self, Trans, R):
        """GetLocalRestriction(ND_TriangleElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe.ND_TriangleElement_GetLocalRestriction(self, Trans, R)


    def GetTransferMatrix(self, fe, Trans, I):
        """GetTransferMatrix(ND_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.ND_TriangleElement_GetTransferMatrix(self, fe, Trans, I)


    def ProjectMatrixCoefficient(self, mc, T, dofs):
        """ProjectMatrixCoefficient(ND_TriangleElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe.ND_TriangleElement_ProjectMatrixCoefficient(self, mc, T, dofs)


    def Project(self, *args):
        """
        Project(ND_TriangleElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_TriangleElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(ND_TriangleElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe.ND_TriangleElement_Project(self, *args)


    def ProjectGrad(self, fe, Trans, grad):
        """ProjectGrad(ND_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe.ND_TriangleElement_ProjectGrad(self, fe, Trans, grad)

    __swig_destroy__ = _fe.delete_ND_TriangleElement
    __del__ = lambda self: None
ND_TriangleElement_swigregister = _fe.ND_TriangleElement_swigregister
ND_TriangleElement_swigregister(ND_TriangleElement)

class ND_SegmentElement(VectorFiniteElement):
    """Proxy of C++ mfem::ND_SegmentElement class."""

    __swig_setmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ND_SegmentElement, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ND_SegmentElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::ND_SegmentElement self, int const p, int const ob_type) -> ND_SegmentElement
        __init__(mfem::ND_SegmentElement self, int const p) -> ND_SegmentElement
        """
        this = _fe.new_ND_SegmentElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CalcShape(self, ip, shape):
        """CalcShape(ND_SegmentElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.ND_SegmentElement_CalcShape(self, ip, shape)


    def CalcVShape(self, *args):
        """
        CalcVShape(ND_SegmentElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(ND_SegmentElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe.ND_SegmentElement_CalcVShape(self, *args)


    def GetLocalInterpolation(self, Trans, I):
        """GetLocalInterpolation(ND_SegmentElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.ND_SegmentElement_GetLocalInterpolation(self, Trans, I)


    def GetLocalRestriction(self, Trans, R):
        """GetLocalRestriction(ND_SegmentElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe.ND_SegmentElement_GetLocalRestriction(self, Trans, R)


    def GetTransferMatrix(self, fe, Trans, I):
        """GetTransferMatrix(ND_SegmentElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe.ND_SegmentElement_GetTransferMatrix(self, fe, Trans, I)


    def ProjectMatrixCoefficient(self, mc, T, dofs):
        """ProjectMatrixCoefficient(ND_SegmentElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe.ND_SegmentElement_ProjectMatrixCoefficient(self, mc, T, dofs)


    def Project(self, *args):
        """
        Project(ND_SegmentElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_SegmentElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_SegmentElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(ND_SegmentElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_SegmentElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe.ND_SegmentElement_Project(self, *args)


    def ProjectGrad(self, fe, Trans, grad):
        """ProjectGrad(ND_SegmentElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe.ND_SegmentElement_ProjectGrad(self, fe, Trans, grad)

    __swig_destroy__ = _fe.delete_ND_SegmentElement
    __del__ = lambda self: None
ND_SegmentElement_swigregister = _fe.ND_SegmentElement_swigregister
ND_SegmentElement_swigregister(ND_SegmentElement)

class NURBSFiniteElement(ScalarFiniteElement):
    """Proxy of C++ mfem::NURBSFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [ScalarFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NURBSFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [ScalarFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NURBSFiniteElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Reset(self):
        """Reset(NURBSFiniteElement self)"""
        return _fe.NURBSFiniteElement_Reset(self)


    def SetIJK(self, IJK):
        """SetIJK(NURBSFiniteElement self, int const * IJK)"""
        return _fe.NURBSFiniteElement_SetIJK(self, IJK)


    def GetPatch(self):
        """GetPatch(NURBSFiniteElement self) -> int"""
        return _fe.NURBSFiniteElement_GetPatch(self)


    def SetPatch(self, p):
        """SetPatch(NURBSFiniteElement self, int p)"""
        return _fe.NURBSFiniteElement_SetPatch(self, p)


    def GetElement(self):
        """GetElement(NURBSFiniteElement self) -> int"""
        return _fe.NURBSFiniteElement_GetElement(self)


    def SetElement(self, e):
        """SetElement(NURBSFiniteElement self, int e)"""
        return _fe.NURBSFiniteElement_SetElement(self, e)


    def KnotVectors(self):
        """KnotVectors(NURBSFiniteElement self) -> mfem::Array< mfem::KnotVector const * > &"""
        return _fe.NURBSFiniteElement_KnotVectors(self)


    def Weights(self):
        """Weights(NURBSFiniteElement self) -> Vector"""
        return _fe.NURBSFiniteElement_Weights(self)


    def SetOrder(self):
        """SetOrder(NURBSFiniteElement self)"""
        return _fe.NURBSFiniteElement_SetOrder(self)

    __swig_destroy__ = _fe.delete_NURBSFiniteElement
    __del__ = lambda self: None
NURBSFiniteElement_swigregister = _fe.NURBSFiniteElement_swigregister
NURBSFiniteElement_swigregister(NURBSFiniteElement)

class NURBS1DFiniteElement(NURBSFiniteElement):
    """Proxy of C++ mfem::NURBS1DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NURBSFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NURBS1DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NURBSFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NURBS1DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, p):
        """__init__(mfem::NURBS1DFiniteElement self, int p) -> NURBS1DFiniteElement"""
        this = _fe.new_NURBS1DFiniteElement(p)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetOrder(self):
        """SetOrder(NURBS1DFiniteElement self)"""
        return _fe.NURBS1DFiniteElement_SetOrder(self)


    def CalcShape(self, ip, shape):
        """CalcShape(NURBS1DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.NURBS1DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(NURBS1DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.NURBS1DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_NURBS1DFiniteElement
    __del__ = lambda self: None
NURBS1DFiniteElement_swigregister = _fe.NURBS1DFiniteElement_swigregister
NURBS1DFiniteElement_swigregister(NURBS1DFiniteElement)

class NURBS2DFiniteElement(NURBSFiniteElement):
    """Proxy of C++ mfem::NURBS2DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NURBSFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NURBS2DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NURBSFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NURBS2DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::NURBS2DFiniteElement self, int p) -> NURBS2DFiniteElement
        __init__(mfem::NURBS2DFiniteElement self, int px, int py) -> NURBS2DFiniteElement
        """
        this = _fe.new_NURBS2DFiniteElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetOrder(self):
        """SetOrder(NURBS2DFiniteElement self)"""
        return _fe.NURBS2DFiniteElement_SetOrder(self)


    def CalcShape(self, ip, shape):
        """CalcShape(NURBS2DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.NURBS2DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(NURBS2DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.NURBS2DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_NURBS2DFiniteElement
    __del__ = lambda self: None
NURBS2DFiniteElement_swigregister = _fe.NURBS2DFiniteElement_swigregister
NURBS2DFiniteElement_swigregister(NURBS2DFiniteElement)

class NURBS3DFiniteElement(NURBSFiniteElement):
    """Proxy of C++ mfem::NURBS3DFiniteElement class."""

    __swig_setmethods__ = {}
    for _s in [NURBSFiniteElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NURBS3DFiniteElement, name, value)
    __swig_getmethods__ = {}
    for _s in [NURBSFiniteElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NURBS3DFiniteElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::NURBS3DFiniteElement self, int p) -> NURBS3DFiniteElement
        __init__(mfem::NURBS3DFiniteElement self, int px, int py, int pz) -> NURBS3DFiniteElement
        """
        this = _fe.new_NURBS3DFiniteElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetOrder(self):
        """SetOrder(NURBS3DFiniteElement self)"""
        return _fe.NURBS3DFiniteElement_SetOrder(self)


    def CalcShape(self, ip, shape):
        """CalcShape(NURBS3DFiniteElement self, IntegrationPoint ip, Vector shape)"""
        return _fe.NURBS3DFiniteElement_CalcShape(self, ip, shape)


    def CalcDShape(self, ip, dshape):
        """CalcDShape(NURBS3DFiniteElement self, IntegrationPoint ip, DenseMatrix dshape)"""
        return _fe.NURBS3DFiniteElement_CalcDShape(self, ip, dshape)

    __swig_destroy__ = _fe.delete_NURBS3DFiniteElement
    __del__ = lambda self: None
NURBS3DFiniteElement_swigregister = _fe.NURBS3DFiniteElement_swigregister
NURBS3DFiniteElement_swigregister(NURBS3DFiniteElement)

# This file is compatible with both classic and new-style classes.


