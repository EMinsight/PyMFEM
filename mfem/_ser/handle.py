# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_handle')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_handle')
    _handle = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_handle', [dirname(__file__)])
        except ImportError:
            import _handle
            return _handle
        try:
            _mod = imp.load_module('_handle', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _handle = swig_import_helper()
    del swig_import_helper
else:
    import _handle
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


MFEM_VERSION = _handle.MFEM_VERSION
MFEM_VERSION_STRING = _handle.MFEM_VERSION_STRING
MFEM_VERSION_TYPE = _handle.MFEM_VERSION_TYPE
MFEM_VERSION_TYPE_RELEASE = _handle.MFEM_VERSION_TYPE_RELEASE
MFEM_VERSION_TYPE_DEVELOPMENT = _handle.MFEM_VERSION_TYPE_DEVELOPMENT
MFEM_VERSION_MAJOR = _handle.MFEM_VERSION_MAJOR
MFEM_VERSION_MINOR = _handle.MFEM_VERSION_MINOR
MFEM_VERSION_PATCH = _handle.MFEM_VERSION_PATCH
MFEM_SOURCE_DIR = _handle.MFEM_SOURCE_DIR
MFEM_INSTALL_DIR = _handle.MFEM_INSTALL_DIR
MFEM_TIMER_TYPE = _handle.MFEM_TIMER_TYPE
import mfem._ser.operators
import mfem._ser.mem_manager
import mfem._ser.vector
import mfem._ser.array
import mfem._ser.ostream_typemap
class OperatorHandle(_object):
    """Proxy of C++ mfem::OperatorHandle class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OperatorHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OperatorHandle, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::OperatorHandle self) -> OperatorHandle
        __init__(mfem::OperatorHandle self, mfem::Operator::Type tid) -> OperatorHandle
        """
        this = _handle.new_OperatorHandle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _handle.delete_OperatorHandle
    __del__ = lambda self: None

    def Ptr(self):
        """Ptr(OperatorHandle self) -> Operator"""
        return _handle.OperatorHandle_Ptr(self)


    def __deref__(self):
        """__deref__(OperatorHandle self) -> Operator"""
        return _handle.OperatorHandle___deref__(self)


    def __ref__(self):
        """__ref__(OperatorHandle self) -> Operator"""
        return _handle.OperatorHandle___ref__(self)


    def Type(self):
        """Type(OperatorHandle self) -> mfem::Operator::Type"""
        return _handle.OperatorHandle_Type(self)


    def OwnsOperator(self):
        """OwnsOperator(OperatorHandle self) -> bool"""
        return _handle.OperatorHandle_OwnsOperator(self)


    def SetOperatorOwner(self, own=True):
        """
        SetOperatorOwner(OperatorHandle self, bool own=True)
        SetOperatorOwner(OperatorHandle self)
        """
        return _handle.OperatorHandle_SetOperatorOwner(self, own)


    def Clear(self):
        """Clear(OperatorHandle self)"""
        return _handle.OperatorHandle_Clear(self)


    def SetType(self, tid):
        """SetType(OperatorHandle self, mfem::Operator::Type tid)"""
        return _handle.OperatorHandle_SetType(self, tid)


    def MakePtAP(self, A, P):
        """MakePtAP(OperatorHandle self, OperatorHandle A, OperatorHandle P)"""
        return _handle.OperatorHandle_MakePtAP(self, A, P)


    def MakeRAP(self, Rt, A, P):
        """MakeRAP(OperatorHandle self, OperatorHandle Rt, OperatorHandle A, OperatorHandle P)"""
        return _handle.OperatorHandle_MakeRAP(self, Rt, A, P)


    def ConvertFrom(self, A):
        """ConvertFrom(OperatorHandle self, OperatorHandle A)"""
        return _handle.OperatorHandle_ConvertFrom(self, A)


    def EliminateRowsCols(self, A, ess_dof_list):
        """EliminateRowsCols(OperatorHandle self, OperatorHandle A, intArray ess_dof_list)"""
        return _handle.OperatorHandle_EliminateRowsCols(self, A, ess_dof_list)


    def EliminateBC(self, A_e, ess_dof_list, X, B):
        """EliminateBC(OperatorHandle self, OperatorHandle A_e, intArray ess_dof_list, Vector X, Vector B)"""
        return _handle.OperatorHandle_EliminateBC(self, A_e, ess_dof_list, X, B)


    def Height(self):
        """Height(OperatorHandle self) -> int"""
        return _handle.OperatorHandle_Height(self)


    def NumRows(self):
        """NumRows(OperatorHandle self) -> int"""
        return _handle.OperatorHandle_NumRows(self)


    def Width(self):
        """Width(OperatorHandle self) -> int"""
        return _handle.OperatorHandle_Width(self)


    def NumCols(self):
        """NumCols(OperatorHandle self) -> int"""
        return _handle.OperatorHandle_NumCols(self)


    def GetMemoryClass(self):
        """GetMemoryClass(OperatorHandle self) -> mfem::MemoryClass"""
        return _handle.OperatorHandle_GetMemoryClass(self)


    def Mult(self, x, y):
        """Mult(OperatorHandle self, Vector x, Vector y)"""
        return _handle.OperatorHandle_Mult(self, x, y)


    def MultTranspose(self, x, y):
        """MultTranspose(OperatorHandle self, Vector x, Vector y)"""
        return _handle.OperatorHandle_MultTranspose(self, x, y)


    def GetGradient(self, x):
        """GetGradient(OperatorHandle self, Vector x) -> Operator"""
        return _handle.OperatorHandle_GetGradient(self, x)


    def GetProlongation(self):
        """GetProlongation(OperatorHandle self) -> Operator"""
        return _handle.OperatorHandle_GetProlongation(self)


    def GetRestriction(self):
        """GetRestriction(OperatorHandle self) -> Operator"""
        return _handle.OperatorHandle_GetRestriction(self)


    def FormLinearSystem(self, ess_tdof_list, x, b, A, X, B, copy_interior=0):
        """
        FormLinearSystem(OperatorHandle self, intArray ess_tdof_list, Vector x, Vector b, mfem::Operator *& A, Vector X, Vector B, int copy_interior=0)
        FormLinearSystem(OperatorHandle self, intArray ess_tdof_list, Vector x, Vector b, mfem::Operator *& A, Vector X, Vector B)
        """
        return _handle.OperatorHandle_FormLinearSystem(self, ess_tdof_list, x, b, A, X, B, copy_interior)


    def RecoverFEMSolution(self, X, b, x):
        """RecoverFEMSolution(OperatorHandle self, Vector X, Vector b, Vector x)"""
        return _handle.OperatorHandle_RecoverFEMSolution(self, X, b, x)


    def PrintMatlab(self, out, n=0, m=0):
        """
        PrintMatlab(OperatorHandle self, std::ostream & out, int n=0, int m=0)
        PrintMatlab(OperatorHandle self, std::ostream & out, int n=0)
        PrintMatlab(OperatorHandle self, std::ostream & out)
        """
        return _handle.OperatorHandle_PrintMatlab(self, out, n, m)


    def GetType(self):
        """GetType(OperatorHandle self) -> mfem::Operator::Type"""
        return _handle.OperatorHandle_GetType(self)

OperatorHandle_swigregister = _handle.OperatorHandle_swigregister
OperatorHandle_swigregister(OperatorHandle)


OperatorPtr=OperatorHandle  

# This file is compatible with both classic and new-style classes.


