# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_bilininteg')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_bilininteg')
    _bilininteg = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bilininteg', [dirname(__file__)])
        except ImportError:
            import _bilininteg
            return _bilininteg
        try:
            _mod = imp.load_module('_bilininteg', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _bilininteg = swig_import_helper()
    del swig_import_helper
else:
    import _bilininteg
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


import mfem._ser.array
import mfem._ser.mem_manager
import mfem._ser.coefficient
import mfem._ser.matrix
import mfem._ser.vector
import mfem._ser.operators
import mfem._ser.intrules
import mfem._ser.sparsemat
import mfem._ser.densemat
import mfem._ser.eltrans
import mfem._ser.fe
import mfem._ser.geom
import mfem._ser.gridfunc
import mfem._ser.mesh
import mfem._ser.ncmesh
import mfem._ser.element
import mfem._ser.table
import mfem._ser.hash
import mfem._ser.vertex
import mfem._ser.fespace
import mfem._ser.fe_coll
import mfem._ser.lininteg
import mfem._ser.handle
import mfem._ser.linearform
class BilinearFormIntegrator(_object):
    """Proxy of C++ mfem::BilinearFormIntegrator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BilinearFormIntegrator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BilinearFormIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, ir=None):
        """
        __init__(mfem::BilinearFormIntegrator self, IntegrationRule ir=None) -> BilinearFormIntegrator
        __init__(mfem::BilinearFormIntegrator self) -> BilinearFormIntegrator
        """
        if self.__class__ == BilinearFormIntegrator:
            _self = None
        else:
            _self = self
        this = _bilininteg.new_BilinearFormIntegrator(_self, ir)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssemblePA(self, fes):
        """AssemblePA(BilinearFormIntegrator self, FiniteElementSpace fes)"""
        return _bilininteg.BilinearFormIntegrator_AssemblePA(self, fes)


    def AddMultPA(self, x, y):
        """AddMultPA(BilinearFormIntegrator self, Vector x, Vector y)"""
        return _bilininteg.BilinearFormIntegrator_AddMultPA(self, x, y)


    def AddMultTransposePA(self, x, y):
        """AddMultTransposePA(BilinearFormIntegrator self, Vector x, Vector y)"""
        return _bilininteg.BilinearFormIntegrator_AddMultTransposePA(self, x, y)


    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(BilinearFormIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.BilinearFormIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(BilinearFormIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.BilinearFormIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)


    def AssembleFaceMatrix(self, *args):
        """
        AssembleFaceMatrix(BilinearFormIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(BilinearFormIntegrator self, FiniteElement trial_face_fe, FiniteElement test_fe1, FiniteElement test_fe2, FaceElementTransformations Trans, DenseMatrix elmat)
        """
        return _bilininteg.BilinearFormIntegrator_AssembleFaceMatrix(self, *args)


    def AssembleElementVector(self, el, Tr, elfun, elvect):
        """AssembleElementVector(BilinearFormIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elfun, Vector elvect)"""
        return _bilininteg.BilinearFormIntegrator_AssembleElementVector(self, el, Tr, elfun, elvect)


    def AssembleElementGrad(self, el, Tr, elfun, elmat):
        """AssembleElementGrad(BilinearFormIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elfun, DenseMatrix elmat)"""
        return _bilininteg.BilinearFormIntegrator_AssembleElementGrad(self, el, Tr, elfun, elmat)


    def AssembleFaceGrad(self, el1, el2, Tr, elfun, elmat):
        """AssembleFaceGrad(BilinearFormIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Tr, Vector elfun, DenseMatrix elmat)"""
        return _bilininteg.BilinearFormIntegrator_AssembleFaceGrad(self, el1, el2, Tr, elfun, elmat)


    def ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef=1):
        """
        ComputeElementFlux(BilinearFormIntegrator self, FiniteElement el, ElementTransformation Trans, Vector u, FiniteElement fluxelem, Vector flux, int with_coef=1)
        ComputeElementFlux(BilinearFormIntegrator self, FiniteElement el, ElementTransformation Trans, Vector u, FiniteElement fluxelem, Vector flux)
        """
        return _bilininteg.BilinearFormIntegrator_ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef)


    def ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy=None):
        """
        ComputeFluxEnergy(BilinearFormIntegrator self, FiniteElement fluxelem, ElementTransformation Trans, Vector flux, Vector d_energy=None) -> double
        ComputeFluxEnergy(BilinearFormIntegrator self, FiniteElement fluxelem, ElementTransformation Trans, Vector flux) -> double
        """
        return _bilininteg.BilinearFormIntegrator_ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy)

    __swig_destroy__ = _bilininteg.delete_BilinearFormIntegrator
    __del__ = lambda self: None
    def __disown__(self):
        self.this.disown()
        _bilininteg.disown_BilinearFormIntegrator(self)
        return weakref_proxy(self)
BilinearFormIntegrator_swigregister = _bilininteg.BilinearFormIntegrator_swigregister
BilinearFormIntegrator_swigregister(BilinearFormIntegrator)

class TransposeIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::TransposeIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransposeIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransposeIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, _bfi, _own_bfi=1):
        """
        __init__(mfem::TransposeIntegrator self, BilinearFormIntegrator _bfi, int _own_bfi=1) -> TransposeIntegrator
        __init__(mfem::TransposeIntegrator self, BilinearFormIntegrator _bfi) -> TransposeIntegrator
        """

        if _own_bfi == 1:  _bfi.thisown = 0


        this = _bilininteg.new_TransposeIntegrator(_bfi, _own_bfi)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(TransposeIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.TransposeIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(TransposeIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.TransposeIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)


    def AssembleFaceMatrix(self, *args):
        """
        AssembleFaceMatrix(TransposeIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(TransposeIntegrator self, FiniteElement trial_face_fe, FiniteElement test_fe1, FiniteElement test_fe2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(TransposeIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        """
        return _bilininteg.TransposeIntegrator_AssembleFaceMatrix(self, *args)

    __swig_destroy__ = _bilininteg.delete_TransposeIntegrator
    __del__ = lambda self: None
TransposeIntegrator_swigregister = _bilininteg.TransposeIntegrator_swigregister
TransposeIntegrator_swigregister(TransposeIntegrator)

class LumpedIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::LumpedIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LumpedIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LumpedIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, _bfi, _own_bfi=1):
        """
        __init__(mfem::LumpedIntegrator self, BilinearFormIntegrator _bfi, int _own_bfi=1) -> LumpedIntegrator
        __init__(mfem::LumpedIntegrator self, BilinearFormIntegrator _bfi) -> LumpedIntegrator
        """
        this = _bilininteg.new_LumpedIntegrator(_bfi, _own_bfi)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(LumpedIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.LumpedIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_LumpedIntegrator
    __del__ = lambda self: None
LumpedIntegrator_swigregister = _bilininteg.LumpedIntegrator_swigregister
LumpedIntegrator_swigregister(LumpedIntegrator)

class InverseIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::InverseIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, integ, own_integ=1):
        """
        __init__(mfem::InverseIntegrator self, BilinearFormIntegrator integ, int own_integ=1) -> InverseIntegrator
        __init__(mfem::InverseIntegrator self, BilinearFormIntegrator integ) -> InverseIntegrator
        """

        if own_integ == 1:  integ.thisown = 0


        this = _bilininteg.new_InverseIntegrator(integ, own_integ)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(InverseIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.InverseIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_InverseIntegrator
    __del__ = lambda self: None
InverseIntegrator_swigregister = _bilininteg.InverseIntegrator_swigregister
InverseIntegrator_swigregister(InverseIntegrator)

class SumIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::SumIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SumIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SumIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, own_integs=1):
        """
        __init__(mfem::SumIntegrator self, int own_integs=1) -> SumIntegrator
        __init__(mfem::SumIntegrator self) -> SumIntegrator
        """
        this = _bilininteg.new_SumIntegrator(own_integs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddIntegrator(self, integ):
        """AddIntegrator(SumIntegrator self, BilinearFormIntegrator integ)"""

        integ.thisown = 0


        return _bilininteg.SumIntegrator_AddIntegrator(self, integ)


    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(SumIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.SumIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_SumIntegrator
    __del__ = lambda self: None
SumIntegrator_swigregister = _bilininteg.SumIntegrator_swigregister
SumIntegrator_swigregister(SumIntegrator)

class MixedScalarIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::MixedScalarIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(MixedScalarIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.MixedScalarIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)


    def AssembleElementMatrix(self, fe, Trans, elmat):
        """AssembleElementMatrix(MixedScalarIntegrator self, FiniteElement fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.MixedScalarIntegrator_AssembleElementMatrix(self, fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_MixedScalarIntegrator
    __del__ = lambda self: None
MixedScalarIntegrator_swigregister = _bilininteg.MixedScalarIntegrator_swigregister
MixedScalarIntegrator_swigregister(MixedScalarIntegrator)

class MixedVectorIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::MixedVectorIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedVectorIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedVectorIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(MixedVectorIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.MixedVectorIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)


    def AssembleElementMatrix(self, fe, Trans, elmat):
        """AssembleElementMatrix(MixedVectorIntegrator self, FiniteElement fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.MixedVectorIntegrator_AssembleElementMatrix(self, fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_MixedVectorIntegrator
    __del__ = lambda self: None
MixedVectorIntegrator_swigregister = _bilininteg.MixedVectorIntegrator_swigregister
MixedVectorIntegrator_swigregister(MixedVectorIntegrator)

class MixedScalarVectorIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::MixedScalarVectorIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarVectorIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarVectorIntegrator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(MixedScalarVectorIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.MixedScalarVectorIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_MixedScalarVectorIntegrator
    __del__ = lambda self: None
MixedScalarVectorIntegrator_swigregister = _bilininteg.MixedScalarVectorIntegrator_swigregister
MixedScalarVectorIntegrator_swigregister(MixedScalarVectorIntegrator)

class MixedScalarMassIntegrator(MixedScalarIntegrator):
    """Proxy of C++ mfem::MixedScalarMassIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarMassIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarMassIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedScalarMassIntegrator self) -> MixedScalarMassIntegrator
        __init__(mfem::MixedScalarMassIntegrator self, Coefficient q) -> MixedScalarMassIntegrator
        """
        this = _bilininteg.new_MixedScalarMassIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedScalarMassIntegrator
    __del__ = lambda self: None
MixedScalarMassIntegrator_swigregister = _bilininteg.MixedScalarMassIntegrator_swigregister
MixedScalarMassIntegrator_swigregister(MixedScalarMassIntegrator)

class MixedVectorProductIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedVectorProductIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedVectorProductIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedVectorProductIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedVectorProductIntegrator self, VectorCoefficient vq) -> MixedVectorProductIntegrator"""
        this = _bilininteg.new_MixedVectorProductIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedVectorProductIntegrator
    __del__ = lambda self: None
MixedVectorProductIntegrator_swigregister = _bilininteg.MixedVectorProductIntegrator_swigregister
MixedVectorProductIntegrator_swigregister(MixedVectorProductIntegrator)

class MixedScalarDerivativeIntegrator(MixedScalarIntegrator):
    """Proxy of C++ mfem::MixedScalarDerivativeIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarDerivativeIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarDerivativeIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedScalarDerivativeIntegrator self) -> MixedScalarDerivativeIntegrator
        __init__(mfem::MixedScalarDerivativeIntegrator self, Coefficient q) -> MixedScalarDerivativeIntegrator
        """
        this = _bilininteg.new_MixedScalarDerivativeIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedScalarDerivativeIntegrator
    __del__ = lambda self: None
MixedScalarDerivativeIntegrator_swigregister = _bilininteg.MixedScalarDerivativeIntegrator_swigregister
MixedScalarDerivativeIntegrator_swigregister(MixedScalarDerivativeIntegrator)

class MixedScalarWeakDerivativeIntegrator(MixedScalarIntegrator):
    """Proxy of C++ mfem::MixedScalarWeakDerivativeIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarWeakDerivativeIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarWeakDerivativeIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedScalarWeakDerivativeIntegrator self) -> MixedScalarWeakDerivativeIntegrator
        __init__(mfem::MixedScalarWeakDerivativeIntegrator self, Coefficient q) -> MixedScalarWeakDerivativeIntegrator
        """
        this = _bilininteg.new_MixedScalarWeakDerivativeIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedScalarWeakDerivativeIntegrator
    __del__ = lambda self: None
MixedScalarWeakDerivativeIntegrator_swigregister = _bilininteg.MixedScalarWeakDerivativeIntegrator_swigregister
MixedScalarWeakDerivativeIntegrator_swigregister(MixedScalarWeakDerivativeIntegrator)

class MixedScalarDivergenceIntegrator(MixedScalarIntegrator):
    """Proxy of C++ mfem::MixedScalarDivergenceIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarDivergenceIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarDivergenceIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedScalarDivergenceIntegrator self) -> MixedScalarDivergenceIntegrator
        __init__(mfem::MixedScalarDivergenceIntegrator self, Coefficient q) -> MixedScalarDivergenceIntegrator
        """
        this = _bilininteg.new_MixedScalarDivergenceIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedScalarDivergenceIntegrator
    __del__ = lambda self: None
MixedScalarDivergenceIntegrator_swigregister = _bilininteg.MixedScalarDivergenceIntegrator_swigregister
MixedScalarDivergenceIntegrator_swigregister(MixedScalarDivergenceIntegrator)

class MixedVectorDivergenceIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedVectorDivergenceIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedVectorDivergenceIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedVectorDivergenceIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedVectorDivergenceIntegrator self, VectorCoefficient vq) -> MixedVectorDivergenceIntegrator"""
        this = _bilininteg.new_MixedVectorDivergenceIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedVectorDivergenceIntegrator
    __del__ = lambda self: None
MixedVectorDivergenceIntegrator_swigregister = _bilininteg.MixedVectorDivergenceIntegrator_swigregister
MixedVectorDivergenceIntegrator_swigregister(MixedVectorDivergenceIntegrator)

class MixedScalarWeakGradientIntegrator(MixedScalarIntegrator):
    """Proxy of C++ mfem::MixedScalarWeakGradientIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarWeakGradientIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarWeakGradientIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedScalarWeakGradientIntegrator self) -> MixedScalarWeakGradientIntegrator
        __init__(mfem::MixedScalarWeakGradientIntegrator self, Coefficient q) -> MixedScalarWeakGradientIntegrator
        """
        this = _bilininteg.new_MixedScalarWeakGradientIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedScalarWeakGradientIntegrator
    __del__ = lambda self: None
MixedScalarWeakGradientIntegrator_swigregister = _bilininteg.MixedScalarWeakGradientIntegrator_swigregister
MixedScalarWeakGradientIntegrator_swigregister(MixedScalarWeakGradientIntegrator)

class MixedScalarCurlIntegrator(MixedScalarIntegrator):
    """Proxy of C++ mfem::MixedScalarCurlIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedScalarCurlIntegrator self) -> MixedScalarCurlIntegrator
        __init__(mfem::MixedScalarCurlIntegrator self, Coefficient q) -> MixedScalarCurlIntegrator
        """
        this = _bilininteg.new_MixedScalarCurlIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedScalarCurlIntegrator
    __del__ = lambda self: None
MixedScalarCurlIntegrator_swigregister = _bilininteg.MixedScalarCurlIntegrator_swigregister
MixedScalarCurlIntegrator_swigregister(MixedScalarCurlIntegrator)

class MixedScalarWeakCurlIntegrator(MixedScalarIntegrator):
    """Proxy of C++ mfem::MixedScalarWeakCurlIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarWeakCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarWeakCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedScalarWeakCurlIntegrator self) -> MixedScalarWeakCurlIntegrator
        __init__(mfem::MixedScalarWeakCurlIntegrator self, Coefficient q) -> MixedScalarWeakCurlIntegrator
        """
        this = _bilininteg.new_MixedScalarWeakCurlIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedScalarWeakCurlIntegrator
    __del__ = lambda self: None
MixedScalarWeakCurlIntegrator_swigregister = _bilininteg.MixedScalarWeakCurlIntegrator_swigregister
MixedScalarWeakCurlIntegrator_swigregister(MixedScalarWeakCurlIntegrator)

class MixedVectorMassIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedVectorMassIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedVectorMassIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedVectorMassIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedVectorMassIntegrator self) -> MixedVectorMassIntegrator
        __init__(mfem::MixedVectorMassIntegrator self, Coefficient q) -> MixedVectorMassIntegrator
        __init__(mfem::MixedVectorMassIntegrator self, VectorCoefficient dq) -> MixedVectorMassIntegrator
        __init__(mfem::MixedVectorMassIntegrator self, MatrixCoefficient mq) -> MixedVectorMassIntegrator
        """
        this = _bilininteg.new_MixedVectorMassIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedVectorMassIntegrator
    __del__ = lambda self: None
MixedVectorMassIntegrator_swigregister = _bilininteg.MixedVectorMassIntegrator_swigregister
MixedVectorMassIntegrator_swigregister(MixedVectorMassIntegrator)

class MixedCrossProductIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedCrossProductIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedCrossProductIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedCrossProductIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedCrossProductIntegrator self, VectorCoefficient vq) -> MixedCrossProductIntegrator"""
        this = _bilininteg.new_MixedCrossProductIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedCrossProductIntegrator
    __del__ = lambda self: None
MixedCrossProductIntegrator_swigregister = _bilininteg.MixedCrossProductIntegrator_swigregister
MixedCrossProductIntegrator_swigregister(MixedCrossProductIntegrator)

class MixedDotProductIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedDotProductIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedDotProductIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedDotProductIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedDotProductIntegrator self, VectorCoefficient vq) -> MixedDotProductIntegrator"""
        this = _bilininteg.new_MixedDotProductIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self._coeff = vq




    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedDotProductIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedDotProductIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedDotProductIntegrator self) -> char const *"""
        return _bilininteg.MixedDotProductIntegrator_FiniteElementTypeFailureMessage(self)

    __swig_destroy__ = _bilininteg.delete_MixedDotProductIntegrator
    __del__ = lambda self: None
MixedDotProductIntegrator_swigregister = _bilininteg.MixedDotProductIntegrator_swigregister
MixedDotProductIntegrator_swigregister(MixedDotProductIntegrator)

class MixedWeakGradDotIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedWeakGradDotIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedWeakGradDotIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedWeakGradDotIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedWeakGradDotIntegrator self, VectorCoefficient vq) -> MixedWeakGradDotIntegrator"""
        this = _bilininteg.new_MixedWeakGradDotIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self._coeff = vq




    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedWeakGradDotIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedWeakGradDotIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedWeakGradDotIntegrator self) -> char const *"""
        return _bilininteg.MixedWeakGradDotIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcShape(self, scalar_fe, Trans, shape):
        """CalcShape(MixedWeakGradDotIntegrator self, FiniteElement scalar_fe, ElementTransformation Trans, Vector shape)"""
        return _bilininteg.MixedWeakGradDotIntegrator_CalcShape(self, scalar_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedWeakGradDotIntegrator
    __del__ = lambda self: None
MixedWeakGradDotIntegrator_swigregister = _bilininteg.MixedWeakGradDotIntegrator_swigregister
MixedWeakGradDotIntegrator_swigregister(MixedWeakGradDotIntegrator)

class MixedWeakDivCrossIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedWeakDivCrossIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedWeakDivCrossIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedWeakDivCrossIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedWeakDivCrossIntegrator self, VectorCoefficient vq) -> MixedWeakDivCrossIntegrator"""
        this = _bilininteg.new_MixedWeakDivCrossIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedWeakDivCrossIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedWeakDivCrossIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedWeakDivCrossIntegrator self) -> char const *"""
        return _bilininteg.MixedWeakDivCrossIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcTestShape(self, test_fe, Trans, shape):
        """CalcTestShape(MixedWeakDivCrossIntegrator self, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedWeakDivCrossIntegrator_CalcTestShape(self, test_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedWeakDivCrossIntegrator
    __del__ = lambda self: None
MixedWeakDivCrossIntegrator_swigregister = _bilininteg.MixedWeakDivCrossIntegrator_swigregister
MixedWeakDivCrossIntegrator_swigregister(MixedWeakDivCrossIntegrator)

class MixedGradGradIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedGradGradIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedGradGradIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedGradGradIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedGradGradIntegrator self) -> MixedGradGradIntegrator
        __init__(mfem::MixedGradGradIntegrator self, Coefficient q) -> MixedGradGradIntegrator
        __init__(mfem::MixedGradGradIntegrator self, VectorCoefficient dq) -> MixedGradGradIntegrator
        __init__(mfem::MixedGradGradIntegrator self, MatrixCoefficient mq) -> MixedGradGradIntegrator
        """
        this = _bilininteg.new_MixedGradGradIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedGradGradIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedGradGradIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedGradGradIntegrator self) -> char const *"""
        return _bilininteg.MixedGradGradIntegrator_FiniteElementTypeFailureMessage(self)


    def GetIntegrationOrder(self, trial_fe, test_fe, Trans):
        """GetIntegrationOrder(MixedGradGradIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans) -> int"""
        return _bilininteg.MixedGradGradIntegrator_GetIntegrationOrder(self, trial_fe, test_fe, Trans)


    def CalcTrialShape(self, trial_fe, Trans, shape):
        """CalcTrialShape(MixedGradGradIntegrator self, FiniteElement trial_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedGradGradIntegrator_CalcTrialShape(self, trial_fe, Trans, shape)


    def CalcTestShape(self, test_fe, Trans, shape):
        """CalcTestShape(MixedGradGradIntegrator self, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedGradGradIntegrator_CalcTestShape(self, test_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedGradGradIntegrator
    __del__ = lambda self: None
MixedGradGradIntegrator_swigregister = _bilininteg.MixedGradGradIntegrator_swigregister
MixedGradGradIntegrator_swigregister(MixedGradGradIntegrator)

class MixedCrossGradGradIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedCrossGradGradIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedCrossGradGradIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedCrossGradGradIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedCrossGradGradIntegrator self, VectorCoefficient vq) -> MixedCrossGradGradIntegrator"""
        this = _bilininteg.new_MixedCrossGradGradIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedCrossGradGradIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedCrossGradGradIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedCrossGradGradIntegrator self) -> char const *"""
        return _bilininteg.MixedCrossGradGradIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcTrialShape(self, trial_fe, Trans, shape):
        """CalcTrialShape(MixedCrossGradGradIntegrator self, FiniteElement trial_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCrossGradGradIntegrator_CalcTrialShape(self, trial_fe, Trans, shape)


    def CalcTestShape(self, test_fe, Trans, shape):
        """CalcTestShape(MixedCrossGradGradIntegrator self, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCrossGradGradIntegrator_CalcTestShape(self, test_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedCrossGradGradIntegrator
    __del__ = lambda self: None
MixedCrossGradGradIntegrator_swigregister = _bilininteg.MixedCrossGradGradIntegrator_swigregister
MixedCrossGradGradIntegrator_swigregister(MixedCrossGradGradIntegrator)

class MixedCurlCurlIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedCurlCurlIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedCurlCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedCurlCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedCurlCurlIntegrator self) -> MixedCurlCurlIntegrator
        __init__(mfem::MixedCurlCurlIntegrator self, Coefficient q) -> MixedCurlCurlIntegrator
        __init__(mfem::MixedCurlCurlIntegrator self, VectorCoefficient dq) -> MixedCurlCurlIntegrator
        __init__(mfem::MixedCurlCurlIntegrator self, MatrixCoefficient mq) -> MixedCurlCurlIntegrator
        """
        this = _bilininteg.new_MixedCurlCurlIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedCurlCurlIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedCurlCurlIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedCurlCurlIntegrator self) -> char const *"""
        return _bilininteg.MixedCurlCurlIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcTrialShape(self, trial_fe, Trans, shape):
        """CalcTrialShape(MixedCurlCurlIntegrator self, FiniteElement trial_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCurlCurlIntegrator_CalcTrialShape(self, trial_fe, Trans, shape)


    def CalcTestShape(self, test_fe, Trans, shape):
        """CalcTestShape(MixedCurlCurlIntegrator self, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCurlCurlIntegrator_CalcTestShape(self, test_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedCurlCurlIntegrator
    __del__ = lambda self: None
MixedCurlCurlIntegrator_swigregister = _bilininteg.MixedCurlCurlIntegrator_swigregister
MixedCurlCurlIntegrator_swigregister(MixedCurlCurlIntegrator)

class MixedCrossCurlCurlIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedCrossCurlCurlIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedCrossCurlCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedCrossCurlCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedCrossCurlCurlIntegrator self, VectorCoefficient vq) -> MixedCrossCurlCurlIntegrator"""
        this = _bilininteg.new_MixedCrossCurlCurlIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedCrossCurlCurlIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedCrossCurlCurlIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedCrossCurlCurlIntegrator self) -> char const *"""
        return _bilininteg.MixedCrossCurlCurlIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcTrialShape(self, trial_fe, Trans, shape):
        """CalcTrialShape(MixedCrossCurlCurlIntegrator self, FiniteElement trial_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCrossCurlCurlIntegrator_CalcTrialShape(self, trial_fe, Trans, shape)


    def CalcTestShape(self, test_fe, Trans, shape):
        """CalcTestShape(MixedCrossCurlCurlIntegrator self, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCrossCurlCurlIntegrator_CalcTestShape(self, test_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedCrossCurlCurlIntegrator
    __del__ = lambda self: None
MixedCrossCurlCurlIntegrator_swigregister = _bilininteg.MixedCrossCurlCurlIntegrator_swigregister
MixedCrossCurlCurlIntegrator_swigregister(MixedCrossCurlCurlIntegrator)

class MixedCrossCurlGradIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedCrossCurlGradIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedCrossCurlGradIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedCrossCurlGradIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedCrossCurlGradIntegrator self, VectorCoefficient vq) -> MixedCrossCurlGradIntegrator"""
        this = _bilininteg.new_MixedCrossCurlGradIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedCrossCurlGradIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedCrossCurlGradIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedCrossCurlGradIntegrator self) -> char const *"""
        return _bilininteg.MixedCrossCurlGradIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcTrialShape(self, trial_fe, Trans, shape):
        """CalcTrialShape(MixedCrossCurlGradIntegrator self, FiniteElement trial_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCrossCurlGradIntegrator_CalcTrialShape(self, trial_fe, Trans, shape)


    def CalcTestShape(self, test_fe, Trans, shape):
        """CalcTestShape(MixedCrossCurlGradIntegrator self, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCrossCurlGradIntegrator_CalcTestShape(self, test_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedCrossCurlGradIntegrator
    __del__ = lambda self: None
MixedCrossCurlGradIntegrator_swigregister = _bilininteg.MixedCrossCurlGradIntegrator_swigregister
MixedCrossCurlGradIntegrator_swigregister(MixedCrossCurlGradIntegrator)

class MixedCrossGradCurlIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedCrossGradCurlIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedCrossGradCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedCrossGradCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedCrossGradCurlIntegrator self, VectorCoefficient vq) -> MixedCrossGradCurlIntegrator"""
        this = _bilininteg.new_MixedCrossGradCurlIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedCrossGradCurlIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedCrossGradCurlIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedCrossGradCurlIntegrator self) -> char const *"""
        return _bilininteg.MixedCrossGradCurlIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcTrialShape(self, trial_fe, Trans, shape):
        """CalcTrialShape(MixedCrossGradCurlIntegrator self, FiniteElement trial_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCrossGradCurlIntegrator_CalcTrialShape(self, trial_fe, Trans, shape)


    def CalcTestShape(self, test_fe, Trans, shape):
        """CalcTestShape(MixedCrossGradCurlIntegrator self, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCrossGradCurlIntegrator_CalcTestShape(self, test_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedCrossGradCurlIntegrator
    __del__ = lambda self: None
MixedCrossGradCurlIntegrator_swigregister = _bilininteg.MixedCrossGradCurlIntegrator_swigregister
MixedCrossGradCurlIntegrator_swigregister(MixedCrossGradCurlIntegrator)

class MixedWeakCurlCrossIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedWeakCurlCrossIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedWeakCurlCrossIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedWeakCurlCrossIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedWeakCurlCrossIntegrator self, VectorCoefficient vq) -> MixedWeakCurlCrossIntegrator"""
        this = _bilininteg.new_MixedWeakCurlCrossIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedWeakCurlCrossIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedWeakCurlCrossIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedWeakCurlCrossIntegrator self) -> char const *"""
        return _bilininteg.MixedWeakCurlCrossIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcTestShape(self, test_fe, Trans, shape):
        """CalcTestShape(MixedWeakCurlCrossIntegrator self, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedWeakCurlCrossIntegrator_CalcTestShape(self, test_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedWeakCurlCrossIntegrator
    __del__ = lambda self: None
MixedWeakCurlCrossIntegrator_swigregister = _bilininteg.MixedWeakCurlCrossIntegrator_swigregister
MixedWeakCurlCrossIntegrator_swigregister(MixedWeakCurlCrossIntegrator)

class MixedScalarWeakCurlCrossIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedScalarWeakCurlCrossIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarWeakCurlCrossIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarWeakCurlCrossIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedScalarWeakCurlCrossIntegrator self, VectorCoefficient vq) -> MixedScalarWeakCurlCrossIntegrator"""
        this = _bilininteg.new_MixedScalarWeakCurlCrossIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedScalarWeakCurlCrossIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedScalarWeakCurlCrossIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedScalarWeakCurlCrossIntegrator self) -> char const *"""
        return _bilininteg.MixedScalarWeakCurlCrossIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcShape(self, scalar_fe, Trans, shape):
        """CalcShape(MixedScalarWeakCurlCrossIntegrator self, FiniteElement scalar_fe, ElementTransformation Trans, Vector shape)"""
        return _bilininteg.MixedScalarWeakCurlCrossIntegrator_CalcShape(self, scalar_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedScalarWeakCurlCrossIntegrator
    __del__ = lambda self: None
MixedScalarWeakCurlCrossIntegrator_swigregister = _bilininteg.MixedScalarWeakCurlCrossIntegrator_swigregister
MixedScalarWeakCurlCrossIntegrator_swigregister(MixedScalarWeakCurlCrossIntegrator)

class MixedCrossGradIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedCrossGradIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedCrossGradIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedCrossGradIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedCrossGradIntegrator self, VectorCoefficient vq) -> MixedCrossGradIntegrator"""
        this = _bilininteg.new_MixedCrossGradIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedCrossGradIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedCrossGradIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedCrossGradIntegrator self) -> char const *"""
        return _bilininteg.MixedCrossGradIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcTrialShape(self, trial_fe, Trans, shape):
        """CalcTrialShape(MixedCrossGradIntegrator self, FiniteElement trial_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCrossGradIntegrator_CalcTrialShape(self, trial_fe, Trans, shape)


    def CalcTestShape(self, test_fe, Trans, shape):
        """CalcTestShape(MixedCrossGradIntegrator self, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCrossGradIntegrator_CalcTestShape(self, test_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedCrossGradIntegrator
    __del__ = lambda self: None
MixedCrossGradIntegrator_swigregister = _bilininteg.MixedCrossGradIntegrator_swigregister
MixedCrossGradIntegrator_swigregister(MixedCrossGradIntegrator)

class MixedCrossCurlIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedCrossCurlIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedCrossCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedCrossCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedCrossCurlIntegrator self, VectorCoefficient vq) -> MixedCrossCurlIntegrator"""
        this = _bilininteg.new_MixedCrossCurlIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedCrossCurlIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedCrossCurlIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedCrossCurlIntegrator self) -> char const *"""
        return _bilininteg.MixedCrossCurlIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcTrialShape(self, trial_fe, Trans, shape):
        """CalcTrialShape(MixedCrossCurlIntegrator self, FiniteElement trial_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedCrossCurlIntegrator_CalcTrialShape(self, trial_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedCrossCurlIntegrator
    __del__ = lambda self: None
MixedCrossCurlIntegrator_swigregister = _bilininteg.MixedCrossCurlIntegrator_swigregister
MixedCrossCurlIntegrator_swigregister(MixedCrossCurlIntegrator)

class MixedScalarCrossCurlIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedScalarCrossCurlIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarCrossCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarCrossCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedScalarCrossCurlIntegrator self, VectorCoefficient vq) -> MixedScalarCrossCurlIntegrator"""
        this = _bilininteg.new_MixedScalarCrossCurlIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedScalarCrossCurlIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedScalarCrossCurlIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedScalarCrossCurlIntegrator self) -> char const *"""
        return _bilininteg.MixedScalarCrossCurlIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcShape(self, scalar_fe, Trans, shape):
        """CalcShape(MixedScalarCrossCurlIntegrator self, FiniteElement scalar_fe, ElementTransformation Trans, Vector shape)"""
        return _bilininteg.MixedScalarCrossCurlIntegrator_CalcShape(self, scalar_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedScalarCrossCurlIntegrator
    __del__ = lambda self: None
MixedScalarCrossCurlIntegrator_swigregister = _bilininteg.MixedScalarCrossCurlIntegrator_swigregister
MixedScalarCrossCurlIntegrator_swigregister(MixedScalarCrossCurlIntegrator)

class MixedScalarCrossGradIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedScalarCrossGradIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarCrossGradIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarCrossGradIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedScalarCrossGradIntegrator self, VectorCoefficient vq) -> MixedScalarCrossGradIntegrator"""
        this = _bilininteg.new_MixedScalarCrossGradIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedScalarCrossGradIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedScalarCrossGradIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedScalarCrossGradIntegrator self) -> char const *"""
        return _bilininteg.MixedScalarCrossGradIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcVShape(self, vector_fe, Trans, shape):
        """CalcVShape(MixedScalarCrossGradIntegrator self, FiniteElement vector_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedScalarCrossGradIntegrator_CalcVShape(self, vector_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedScalarCrossGradIntegrator
    __del__ = lambda self: None
MixedScalarCrossGradIntegrator_swigregister = _bilininteg.MixedScalarCrossGradIntegrator_swigregister
MixedScalarCrossGradIntegrator_swigregister(MixedScalarCrossGradIntegrator)

class MixedScalarCrossProductIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedScalarCrossProductIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarCrossProductIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarCrossProductIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedScalarCrossProductIntegrator self, VectorCoefficient vq) -> MixedScalarCrossProductIntegrator"""
        this = _bilininteg.new_MixedScalarCrossProductIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedScalarCrossProductIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedScalarCrossProductIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedScalarCrossProductIntegrator self) -> char const *"""
        return _bilininteg.MixedScalarCrossProductIntegrator_FiniteElementTypeFailureMessage(self)

    __swig_destroy__ = _bilininteg.delete_MixedScalarCrossProductIntegrator
    __del__ = lambda self: None
MixedScalarCrossProductIntegrator_swigregister = _bilininteg.MixedScalarCrossProductIntegrator_swigregister
MixedScalarCrossProductIntegrator_swigregister(MixedScalarCrossProductIntegrator)

class MixedScalarWeakCrossProductIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedScalarWeakCrossProductIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarWeakCrossProductIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarWeakCrossProductIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedScalarWeakCrossProductIntegrator self, VectorCoefficient vq) -> MixedScalarWeakCrossProductIntegrator"""
        this = _bilininteg.new_MixedScalarWeakCrossProductIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedScalarWeakCrossProductIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedScalarWeakCrossProductIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedScalarWeakCrossProductIntegrator self) -> char const *"""
        return _bilininteg.MixedScalarWeakCrossProductIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcShape(self, scalar_fe, Trans, shape):
        """CalcShape(MixedScalarWeakCrossProductIntegrator self, FiniteElement scalar_fe, ElementTransformation Trans, Vector shape)"""
        return _bilininteg.MixedScalarWeakCrossProductIntegrator_CalcShape(self, scalar_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedScalarWeakCrossProductIntegrator
    __del__ = lambda self: None
MixedScalarWeakCrossProductIntegrator_swigregister = _bilininteg.MixedScalarWeakCrossProductIntegrator_swigregister
MixedScalarWeakCrossProductIntegrator_swigregister(MixedScalarWeakCrossProductIntegrator)

class MixedDirectionalDerivativeIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedDirectionalDerivativeIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedDirectionalDerivativeIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedDirectionalDerivativeIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedDirectionalDerivativeIntegrator self, VectorCoefficient vq) -> MixedDirectionalDerivativeIntegrator"""
        this = _bilininteg.new_MixedDirectionalDerivativeIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedDirectionalDerivativeIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedDirectionalDerivativeIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedDirectionalDerivativeIntegrator self) -> char const *"""
        return _bilininteg.MixedDirectionalDerivativeIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcVShape(self, vector_fe, Trans, shape):
        """CalcVShape(MixedDirectionalDerivativeIntegrator self, FiniteElement vector_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedDirectionalDerivativeIntegrator_CalcVShape(self, vector_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedDirectionalDerivativeIntegrator
    __del__ = lambda self: None
MixedDirectionalDerivativeIntegrator_swigregister = _bilininteg.MixedDirectionalDerivativeIntegrator_swigregister
MixedDirectionalDerivativeIntegrator_swigregister(MixedDirectionalDerivativeIntegrator)

class MixedGradDivIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedGradDivIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedGradDivIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedGradDivIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedGradDivIntegrator self, VectorCoefficient vq) -> MixedGradDivIntegrator"""
        this = _bilininteg.new_MixedGradDivIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedGradDivIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedGradDivIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedGradDivIntegrator self) -> char const *"""
        return _bilininteg.MixedGradDivIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcVShape(self, vector_fe, Trans, shape):
        """CalcVShape(MixedGradDivIntegrator self, FiniteElement vector_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedGradDivIntegrator_CalcVShape(self, vector_fe, Trans, shape)


    def CalcShape(self, scalar_fe, Trans, shape):
        """CalcShape(MixedGradDivIntegrator self, FiniteElement scalar_fe, ElementTransformation Trans, Vector shape)"""
        return _bilininteg.MixedGradDivIntegrator_CalcShape(self, scalar_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedGradDivIntegrator
    __del__ = lambda self: None
MixedGradDivIntegrator_swigregister = _bilininteg.MixedGradDivIntegrator_swigregister
MixedGradDivIntegrator_swigregister(MixedGradDivIntegrator)

class MixedDivGradIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedDivGradIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedDivGradIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedDivGradIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedDivGradIntegrator self, VectorCoefficient vq) -> MixedDivGradIntegrator"""
        this = _bilininteg.new_MixedDivGradIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedDivGradIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedDivGradIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedDivGradIntegrator self) -> char const *"""
        return _bilininteg.MixedDivGradIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcVShape(self, vector_fe, Trans, shape):
        """CalcVShape(MixedDivGradIntegrator self, FiniteElement vector_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedDivGradIntegrator_CalcVShape(self, vector_fe, Trans, shape)


    def CalcShape(self, scalar_fe, Trans, shape):
        """CalcShape(MixedDivGradIntegrator self, FiniteElement scalar_fe, ElementTransformation Trans, Vector shape)"""
        return _bilininteg.MixedDivGradIntegrator_CalcShape(self, scalar_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedDivGradIntegrator
    __del__ = lambda self: None
MixedDivGradIntegrator_swigregister = _bilininteg.MixedDivGradIntegrator_swigregister
MixedDivGradIntegrator_swigregister(MixedDivGradIntegrator)

class MixedScalarWeakDivergenceIntegrator(MixedScalarVectorIntegrator):
    """Proxy of C++ mfem::MixedScalarWeakDivergenceIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedScalarWeakDivergenceIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedScalarVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedScalarWeakDivergenceIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, vq):
        """__init__(mfem::MixedScalarWeakDivergenceIntegrator self, VectorCoefficient vq) -> MixedScalarWeakDivergenceIntegrator"""
        this = _bilininteg.new_MixedScalarWeakDivergenceIntegrator(vq)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def VerifyFiniteElementTypes(self, trial_fe, test_fe):
        """VerifyFiniteElementTypes(MixedScalarWeakDivergenceIntegrator self, FiniteElement trial_fe, FiniteElement test_fe) -> bool"""
        return _bilininteg.MixedScalarWeakDivergenceIntegrator_VerifyFiniteElementTypes(self, trial_fe, test_fe)


    def FiniteElementTypeFailureMessage(self):
        """FiniteElementTypeFailureMessage(MixedScalarWeakDivergenceIntegrator self) -> char const *"""
        return _bilininteg.MixedScalarWeakDivergenceIntegrator_FiniteElementTypeFailureMessage(self)


    def CalcVShape(self, vector_fe, Trans, shape):
        """CalcVShape(MixedScalarWeakDivergenceIntegrator self, FiniteElement vector_fe, ElementTransformation Trans, DenseMatrix shape)"""
        return _bilininteg.MixedScalarWeakDivergenceIntegrator_CalcVShape(self, vector_fe, Trans, shape)

    __swig_destroy__ = _bilininteg.delete_MixedScalarWeakDivergenceIntegrator
    __del__ = lambda self: None
MixedScalarWeakDivergenceIntegrator_swigregister = _bilininteg.MixedScalarWeakDivergenceIntegrator_swigregister
MixedScalarWeakDivergenceIntegrator_swigregister(MixedScalarWeakDivergenceIntegrator)

class MixedVectorGradientIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedVectorGradientIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedVectorGradientIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedVectorGradientIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedVectorGradientIntegrator self) -> MixedVectorGradientIntegrator
        __init__(mfem::MixedVectorGradientIntegrator self, Coefficient q) -> MixedVectorGradientIntegrator
        __init__(mfem::MixedVectorGradientIntegrator self, VectorCoefficient dq) -> MixedVectorGradientIntegrator
        __init__(mfem::MixedVectorGradientIntegrator self, MatrixCoefficient mq) -> MixedVectorGradientIntegrator
        """
        this = _bilininteg.new_MixedVectorGradientIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        if len(args) > 0: self._coeff = args[0]



    __swig_destroy__ = _bilininteg.delete_MixedVectorGradientIntegrator
    __del__ = lambda self: None
MixedVectorGradientIntegrator_swigregister = _bilininteg.MixedVectorGradientIntegrator_swigregister
MixedVectorGradientIntegrator_swigregister(MixedVectorGradientIntegrator)

class MixedVectorCurlIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedVectorCurlIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedVectorCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedVectorCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedVectorCurlIntegrator self) -> MixedVectorCurlIntegrator
        __init__(mfem::MixedVectorCurlIntegrator self, Coefficient q) -> MixedVectorCurlIntegrator
        __init__(mfem::MixedVectorCurlIntegrator self, VectorCoefficient dq) -> MixedVectorCurlIntegrator
        __init__(mfem::MixedVectorCurlIntegrator self, MatrixCoefficient mq) -> MixedVectorCurlIntegrator
        """
        this = _bilininteg.new_MixedVectorCurlIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedVectorCurlIntegrator
    __del__ = lambda self: None
MixedVectorCurlIntegrator_swigregister = _bilininteg.MixedVectorCurlIntegrator_swigregister
MixedVectorCurlIntegrator_swigregister(MixedVectorCurlIntegrator)

class MixedVectorWeakCurlIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedVectorWeakCurlIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedVectorWeakCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedVectorWeakCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedVectorWeakCurlIntegrator self) -> MixedVectorWeakCurlIntegrator
        __init__(mfem::MixedVectorWeakCurlIntegrator self, Coefficient q) -> MixedVectorWeakCurlIntegrator
        __init__(mfem::MixedVectorWeakCurlIntegrator self, VectorCoefficient dq) -> MixedVectorWeakCurlIntegrator
        __init__(mfem::MixedVectorWeakCurlIntegrator self, MatrixCoefficient mq) -> MixedVectorWeakCurlIntegrator
        """
        this = _bilininteg.new_MixedVectorWeakCurlIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_MixedVectorWeakCurlIntegrator
    __del__ = lambda self: None
MixedVectorWeakCurlIntegrator_swigregister = _bilininteg.MixedVectorWeakCurlIntegrator_swigregister
MixedVectorWeakCurlIntegrator_swigregister(MixedVectorWeakCurlIntegrator)

class MixedVectorWeakDivergenceIntegrator(MixedVectorIntegrator):
    """Proxy of C++ mfem::MixedVectorWeakDivergenceIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MixedVectorWeakDivergenceIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MixedVectorIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MixedVectorWeakDivergenceIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MixedVectorWeakDivergenceIntegrator self) -> MixedVectorWeakDivergenceIntegrator
        __init__(mfem::MixedVectorWeakDivergenceIntegrator self, Coefficient q) -> MixedVectorWeakDivergenceIntegrator
        __init__(mfem::MixedVectorWeakDivergenceIntegrator self, VectorCoefficient dq) -> MixedVectorWeakDivergenceIntegrator
        __init__(mfem::MixedVectorWeakDivergenceIntegrator self, MatrixCoefficient mq) -> MixedVectorWeakDivergenceIntegrator
        """
        this = _bilininteg.new_MixedVectorWeakDivergenceIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        if len(args) > 0: self._coeff = args[0]



    __swig_destroy__ = _bilininteg.delete_MixedVectorWeakDivergenceIntegrator
    __del__ = lambda self: None
MixedVectorWeakDivergenceIntegrator_swigregister = _bilininteg.MixedVectorWeakDivergenceIntegrator_swigregister
MixedVectorWeakDivergenceIntegrator_swigregister(MixedVectorWeakDivergenceIntegrator)

class DiffusionIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::DiffusionIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiffusionIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiffusionIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::DiffusionIntegrator self) -> DiffusionIntegrator
        __init__(mfem::DiffusionIntegrator self, Coefficient q) -> DiffusionIntegrator
        __init__(mfem::DiffusionIntegrator self, MatrixCoefficient q) -> DiffusionIntegrator
        """
        this = _bilininteg.new_DiffusionIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        if len(args) > 0: self._coeff = args[0]




    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(DiffusionIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.DiffusionIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(DiffusionIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.DiffusionIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)


    def AssembleElementVector(self, el, Tr, elfun, elvect):
        """AssembleElementVector(DiffusionIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elfun, Vector elvect)"""
        return _bilininteg.DiffusionIntegrator_AssembleElementVector(self, el, Tr, elfun, elvect)


    def ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef=1):
        """
        ComputeElementFlux(DiffusionIntegrator self, FiniteElement el, ElementTransformation Trans, Vector u, FiniteElement fluxelem, Vector flux, int with_coef=1)
        ComputeElementFlux(DiffusionIntegrator self, FiniteElement el, ElementTransformation Trans, Vector u, FiniteElement fluxelem, Vector flux)
        """
        return _bilininteg.DiffusionIntegrator_ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef)


    def ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy=None):
        """
        ComputeFluxEnergy(DiffusionIntegrator self, FiniteElement fluxelem, ElementTransformation Trans, Vector flux, Vector d_energy=None) -> double
        ComputeFluxEnergy(DiffusionIntegrator self, FiniteElement fluxelem, ElementTransformation Trans, Vector flux) -> double
        """
        return _bilininteg.DiffusionIntegrator_ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy)


    def AssemblePA(self, arg2):
        """AssemblePA(DiffusionIntegrator self, FiniteElementSpace arg2)"""
        return _bilininteg.DiffusionIntegrator_AssemblePA(self, arg2)


    def AddMultPA(self, arg2, arg3):
        """AddMultPA(DiffusionIntegrator self, Vector arg2, Vector arg3)"""
        return _bilininteg.DiffusionIntegrator_AddMultPA(self, arg2, arg3)


    def GetRule(trial_fe, test_fe):
        """GetRule(FiniteElement trial_fe, FiniteElement test_fe) -> IntegrationRule"""
        return _bilininteg.DiffusionIntegrator_GetRule(trial_fe, test_fe)

    GetRule = staticmethod(GetRule)
    __swig_destroy__ = _bilininteg.delete_DiffusionIntegrator
    __del__ = lambda self: None
DiffusionIntegrator_swigregister = _bilininteg.DiffusionIntegrator_swigregister
DiffusionIntegrator_swigregister(DiffusionIntegrator)

def DiffusionIntegrator_GetRule(trial_fe, test_fe):
    """DiffusionIntegrator_GetRule(FiniteElement trial_fe, FiniteElement test_fe) -> IntegrationRule"""
    return _bilininteg.DiffusionIntegrator_GetRule(trial_fe, test_fe)

class MassIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::MassIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MassIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MassIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::MassIntegrator self, IntegrationRule ir=None) -> MassIntegrator
        __init__(mfem::MassIntegrator self) -> MassIntegrator
        __init__(mfem::MassIntegrator self, Coefficient q, IntegrationRule ir=None) -> MassIntegrator
        __init__(mfem::MassIntegrator self, Coefficient q) -> MassIntegrator
        """
        this = _bilininteg.new_MassIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        if len(args) > 0: self._coeff = args[0]




    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(MassIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.MassIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(MassIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.MassIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)


    def AssemblePA(self, arg2):
        """AssemblePA(MassIntegrator self, FiniteElementSpace arg2)"""
        return _bilininteg.MassIntegrator_AssemblePA(self, arg2)


    def AddMultPA(self, arg2, arg3):
        """AddMultPA(MassIntegrator self, Vector arg2, Vector arg3)"""
        return _bilininteg.MassIntegrator_AddMultPA(self, arg2, arg3)


    def GetRule(trial_fe, test_fe, Trans):
        """GetRule(FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans) -> IntegrationRule"""
        return _bilininteg.MassIntegrator_GetRule(trial_fe, test_fe, Trans)

    GetRule = staticmethod(GetRule)
    __swig_destroy__ = _bilininteg.delete_MassIntegrator
    __del__ = lambda self: None
MassIntegrator_swigregister = _bilininteg.MassIntegrator_swigregister
MassIntegrator_swigregister(MassIntegrator)

def MassIntegrator_GetRule(trial_fe, test_fe, Trans):
    """MassIntegrator_GetRule(FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans) -> IntegrationRule"""
    return _bilininteg.MassIntegrator_GetRule(trial_fe, test_fe, Trans)

class BoundaryMassIntegrator(MassIntegrator):
    """Proxy of C++ mfem::BoundaryMassIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [MassIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoundaryMassIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [MassIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoundaryMassIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, q):
        """__init__(mfem::BoundaryMassIntegrator self, Coefficient q) -> BoundaryMassIntegrator"""
        this = _bilininteg.new_BoundaryMassIntegrator(q)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleFaceMatrix(self, *args):
        """
        AssembleFaceMatrix(BoundaryMassIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(BoundaryMassIntegrator self, FiniteElement trial_face_fe, FiniteElement test_fe1, FiniteElement test_fe2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(BoundaryMassIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        """
        return _bilininteg.BoundaryMassIntegrator_AssembleFaceMatrix(self, *args)

    __swig_destroy__ = _bilininteg.delete_BoundaryMassIntegrator
    __del__ = lambda self: None
BoundaryMassIntegrator_swigregister = _bilininteg.BoundaryMassIntegrator_swigregister
BoundaryMassIntegrator_swigregister(BoundaryMassIntegrator)

class ConvectionIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::ConvectionIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvectionIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConvectionIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, q, a=1.0):
        """
        __init__(mfem::ConvectionIntegrator self, VectorCoefficient q, double a=1.0) -> ConvectionIntegrator
        __init__(mfem::ConvectionIntegrator self, VectorCoefficient q) -> ConvectionIntegrator
        """
        this = _bilininteg.new_ConvectionIntegrator(q, a)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, arg2, arg3, arg4):
        """AssembleElementMatrix(ConvectionIntegrator self, FiniteElement arg2, ElementTransformation arg3, DenseMatrix arg4)"""
        return _bilininteg.ConvectionIntegrator_AssembleElementMatrix(self, arg2, arg3, arg4)

    __swig_destroy__ = _bilininteg.delete_ConvectionIntegrator
    __del__ = lambda self: None
ConvectionIntegrator_swigregister = _bilininteg.ConvectionIntegrator_swigregister
ConvectionIntegrator_swigregister(ConvectionIntegrator)

class GroupConvectionIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::GroupConvectionIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroupConvectionIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GroupConvectionIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, q, a=1.0):
        """
        __init__(mfem::GroupConvectionIntegrator self, VectorCoefficient q, double a=1.0) -> GroupConvectionIntegrator
        __init__(mfem::GroupConvectionIntegrator self, VectorCoefficient q) -> GroupConvectionIntegrator
        """
        this = _bilininteg.new_GroupConvectionIntegrator(q, a)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, arg2, arg3, arg4):
        """AssembleElementMatrix(GroupConvectionIntegrator self, FiniteElement arg2, ElementTransformation arg3, DenseMatrix arg4)"""
        return _bilininteg.GroupConvectionIntegrator_AssembleElementMatrix(self, arg2, arg3, arg4)

    __swig_destroy__ = _bilininteg.delete_GroupConvectionIntegrator
    __del__ = lambda self: None
GroupConvectionIntegrator_swigregister = _bilininteg.GroupConvectionIntegrator_swigregister
GroupConvectionIntegrator_swigregister(GroupConvectionIntegrator)

class VectorMassIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::VectorMassIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorMassIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorMassIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::VectorMassIntegrator self) -> VectorMassIntegrator
        __init__(mfem::VectorMassIntegrator self, Coefficient q, int qo=0) -> VectorMassIntegrator
        __init__(mfem::VectorMassIntegrator self, Coefficient q) -> VectorMassIntegrator
        __init__(mfem::VectorMassIntegrator self, Coefficient q, IntegrationRule ir) -> VectorMassIntegrator
        __init__(mfem::VectorMassIntegrator self, VectorCoefficient q, int qo=0) -> VectorMassIntegrator
        __init__(mfem::VectorMassIntegrator self, VectorCoefficient q) -> VectorMassIntegrator
        __init__(mfem::VectorMassIntegrator self, MatrixCoefficient q, int qo=0) -> VectorMassIntegrator
        __init__(mfem::VectorMassIntegrator self, MatrixCoefficient q) -> VectorMassIntegrator
        """
        this = _bilininteg.new_VectorMassIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetVDim(self):
        """GetVDim(VectorMassIntegrator self) -> int"""
        return _bilininteg.VectorMassIntegrator_GetVDim(self)


    def SetVDim(self, vdim):
        """SetVDim(VectorMassIntegrator self, int vdim)"""
        return _bilininteg.VectorMassIntegrator_SetVDim(self, vdim)


    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(VectorMassIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorMassIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(VectorMassIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorMassIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_VectorMassIntegrator
    __del__ = lambda self: None
VectorMassIntegrator_swigregister = _bilininteg.VectorMassIntegrator_swigregister
VectorMassIntegrator_swigregister(VectorMassIntegrator)

class VectorFEDivergenceIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::VectorFEDivergenceIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFEDivergenceIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFEDivergenceIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::VectorFEDivergenceIntegrator self) -> VectorFEDivergenceIntegrator
        __init__(mfem::VectorFEDivergenceIntegrator self, Coefficient q) -> VectorFEDivergenceIntegrator
        """
        this = _bilininteg.new_VectorFEDivergenceIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(VectorFEDivergenceIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorFEDivergenceIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(VectorFEDivergenceIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorFEDivergenceIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_VectorFEDivergenceIntegrator
    __del__ = lambda self: None
VectorFEDivergenceIntegrator_swigregister = _bilininteg.VectorFEDivergenceIntegrator_swigregister
VectorFEDivergenceIntegrator_swigregister(VectorFEDivergenceIntegrator)

class VectorFEWeakDivergenceIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::VectorFEWeakDivergenceIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFEWeakDivergenceIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFEWeakDivergenceIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::VectorFEWeakDivergenceIntegrator self) -> VectorFEWeakDivergenceIntegrator
        __init__(mfem::VectorFEWeakDivergenceIntegrator self, Coefficient q) -> VectorFEWeakDivergenceIntegrator
        """
        this = _bilininteg.new_VectorFEWeakDivergenceIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(VectorFEWeakDivergenceIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorFEWeakDivergenceIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(VectorFEWeakDivergenceIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorFEWeakDivergenceIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_VectorFEWeakDivergenceIntegrator
    __del__ = lambda self: None
VectorFEWeakDivergenceIntegrator_swigregister = _bilininteg.VectorFEWeakDivergenceIntegrator_swigregister
VectorFEWeakDivergenceIntegrator_swigregister(VectorFEWeakDivergenceIntegrator)

class VectorFECurlIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::VectorFECurlIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFECurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFECurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::VectorFECurlIntegrator self) -> VectorFECurlIntegrator
        __init__(mfem::VectorFECurlIntegrator self, Coefficient q) -> VectorFECurlIntegrator
        """
        this = _bilininteg.new_VectorFECurlIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(VectorFECurlIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorFECurlIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(VectorFECurlIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorFECurlIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_VectorFECurlIntegrator
    __del__ = lambda self: None
VectorFECurlIntegrator_swigregister = _bilininteg.VectorFECurlIntegrator_swigregister
VectorFECurlIntegrator_swigregister(VectorFECurlIntegrator)

class DerivativeIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::DerivativeIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DerivativeIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DerivativeIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, q, i):
        """__init__(mfem::DerivativeIntegrator self, Coefficient q, int i) -> DerivativeIntegrator"""
        this = _bilininteg.new_DerivativeIntegrator(q, i)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(DerivativeIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.DerivativeIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(DerivativeIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.DerivativeIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_DerivativeIntegrator
    __del__ = lambda self: None
DerivativeIntegrator_swigregister = _bilininteg.DerivativeIntegrator_swigregister
DerivativeIntegrator_swigregister(DerivativeIntegrator)

class CurlCurlIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::CurlCurlIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurlCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurlCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::CurlCurlIntegrator self) -> CurlCurlIntegrator
        __init__(mfem::CurlCurlIntegrator self, Coefficient q) -> CurlCurlIntegrator
        __init__(mfem::CurlCurlIntegrator self, MatrixCoefficient m) -> CurlCurlIntegrator
        """
        this = _bilininteg.new_CurlCurlIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        if len(args) > 0: self._coeff = args[0]




    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(CurlCurlIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.CurlCurlIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef):
        """ComputeElementFlux(CurlCurlIntegrator self, FiniteElement el, ElementTransformation Trans, Vector u, FiniteElement fluxelem, Vector flux, int with_coef)"""
        return _bilininteg.CurlCurlIntegrator_ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef)


    def ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy=None):
        """
        ComputeFluxEnergy(CurlCurlIntegrator self, FiniteElement fluxelem, ElementTransformation Trans, Vector flux, Vector d_energy=None) -> double
        ComputeFluxEnergy(CurlCurlIntegrator self, FiniteElement fluxelem, ElementTransformation Trans, Vector flux) -> double
        """
        return _bilininteg.CurlCurlIntegrator_ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy)

    __swig_destroy__ = _bilininteg.delete_CurlCurlIntegrator
    __del__ = lambda self: None
CurlCurlIntegrator_swigregister = _bilininteg.CurlCurlIntegrator_swigregister
CurlCurlIntegrator_swigregister(CurlCurlIntegrator)

class VectorCurlCurlIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::VectorCurlCurlIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorCurlCurlIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorCurlCurlIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::VectorCurlCurlIntegrator self) -> VectorCurlCurlIntegrator
        __init__(mfem::VectorCurlCurlIntegrator self, Coefficient q) -> VectorCurlCurlIntegrator
        """
        this = _bilininteg.new_VectorCurlCurlIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(VectorCurlCurlIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorCurlCurlIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def GetElementEnergy(self, el, Tr, elfun):
        """GetElementEnergy(VectorCurlCurlIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elfun) -> double"""
        return _bilininteg.VectorCurlCurlIntegrator_GetElementEnergy(self, el, Tr, elfun)

    __swig_destroy__ = _bilininteg.delete_VectorCurlCurlIntegrator
    __del__ = lambda self: None
VectorCurlCurlIntegrator_swigregister = _bilininteg.VectorCurlCurlIntegrator_swigregister
VectorCurlCurlIntegrator_swigregister(VectorCurlCurlIntegrator)

class VectorFEMassIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::VectorFEMassIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFEMassIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFEMassIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::VectorFEMassIntegrator self) -> VectorFEMassIntegrator
        __init__(mfem::VectorFEMassIntegrator self, Coefficient _q) -> VectorFEMassIntegrator
        __init__(mfem::VectorFEMassIntegrator self, Coefficient q) -> VectorFEMassIntegrator
        __init__(mfem::VectorFEMassIntegrator self, VectorCoefficient _vq) -> VectorFEMassIntegrator
        __init__(mfem::VectorFEMassIntegrator self, VectorCoefficient vq) -> VectorFEMassIntegrator
        __init__(mfem::VectorFEMassIntegrator self, MatrixCoefficient _mq) -> VectorFEMassIntegrator
        __init__(mfem::VectorFEMassIntegrator self, MatrixCoefficient mq) -> VectorFEMassIntegrator
        """
        this = _bilininteg.new_VectorFEMassIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        if len(args) > 0: self._coeff = args[0]




    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(VectorFEMassIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorFEMassIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(VectorFEMassIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorFEMassIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_VectorFEMassIntegrator
    __del__ = lambda self: None
VectorFEMassIntegrator_swigregister = _bilininteg.VectorFEMassIntegrator_swigregister
VectorFEMassIntegrator_swigregister(VectorFEMassIntegrator)

class VectorDivergenceIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::VectorDivergenceIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDivergenceIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDivergenceIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::VectorDivergenceIntegrator self) -> VectorDivergenceIntegrator
        __init__(mfem::VectorDivergenceIntegrator self, Coefficient _q) -> VectorDivergenceIntegrator
        __init__(mfem::VectorDivergenceIntegrator self, Coefficient q) -> VectorDivergenceIntegrator
        """
        this = _bilininteg.new_VectorDivergenceIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat):
        """AssembleElementMatrix2(VectorDivergenceIntegrator self, FiniteElement trial_fe, FiniteElement test_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorDivergenceIntegrator_AssembleElementMatrix2(self, trial_fe, test_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_VectorDivergenceIntegrator
    __del__ = lambda self: None
VectorDivergenceIntegrator_swigregister = _bilininteg.VectorDivergenceIntegrator_swigregister
VectorDivergenceIntegrator_swigregister(VectorDivergenceIntegrator)

class DivDivIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::DivDivIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivDivIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DivDivIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::DivDivIntegrator self) -> DivDivIntegrator
        __init__(mfem::DivDivIntegrator self, Coefficient q) -> DivDivIntegrator
        """
        this = _bilininteg.new_DivDivIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(DivDivIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.DivDivIntegrator_AssembleElementMatrix(self, el, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_DivDivIntegrator
    __del__ = lambda self: None
DivDivIntegrator_swigregister = _bilininteg.DivDivIntegrator_swigregister
DivDivIntegrator_swigregister(DivDivIntegrator)

class VectorDiffusionIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::VectorDiffusionIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDiffusionIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDiffusionIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::VectorDiffusionIntegrator self) -> VectorDiffusionIntegrator
        __init__(mfem::VectorDiffusionIntegrator self, Coefficient q) -> VectorDiffusionIntegrator
        """
        this = _bilininteg.new_VectorDiffusionIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, el, Trans, elmat):
        """AssembleElementMatrix(VectorDiffusionIntegrator self, FiniteElement el, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorDiffusionIntegrator_AssembleElementMatrix(self, el, Trans, elmat)


    def AssembleElementVector(self, el, Tr, elfun, elvect):
        """AssembleElementVector(VectorDiffusionIntegrator self, FiniteElement el, ElementTransformation Tr, Vector elfun, Vector elvect)"""
        return _bilininteg.VectorDiffusionIntegrator_AssembleElementVector(self, el, Tr, elfun, elvect)

    __swig_destroy__ = _bilininteg.delete_VectorDiffusionIntegrator
    __del__ = lambda self: None
VectorDiffusionIntegrator_swigregister = _bilininteg.VectorDiffusionIntegrator_swigregister
VectorDiffusionIntegrator_swigregister(VectorDiffusionIntegrator)

class ElasticityIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::ElasticityIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElasticityIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ElasticityIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::ElasticityIntegrator self, Coefficient l, Coefficient m) -> ElasticityIntegrator
        __init__(mfem::ElasticityIntegrator self, Coefficient m, double q_l, double q_m) -> ElasticityIntegrator
        """
        this = _bilininteg.new_ElasticityIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix(self, arg2, arg3, arg4):
        """AssembleElementMatrix(ElasticityIntegrator self, FiniteElement arg2, ElementTransformation arg3, DenseMatrix arg4)"""
        return _bilininteg.ElasticityIntegrator_AssembleElementMatrix(self, arg2, arg3, arg4)


    def ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef=1):
        """
        ComputeElementFlux(ElasticityIntegrator self, FiniteElement el, ElementTransformation Trans, Vector u, FiniteElement fluxelem, Vector flux, int with_coef=1)
        ComputeElementFlux(ElasticityIntegrator self, FiniteElement el, ElementTransformation Trans, Vector u, FiniteElement fluxelem, Vector flux)
        """
        return _bilininteg.ElasticityIntegrator_ComputeElementFlux(self, el, Trans, u, fluxelem, flux, with_coef)


    def ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy=None):
        """
        ComputeFluxEnergy(ElasticityIntegrator self, FiniteElement fluxelem, ElementTransformation Trans, Vector flux, Vector d_energy=None) -> double
        ComputeFluxEnergy(ElasticityIntegrator self, FiniteElement fluxelem, ElementTransformation Trans, Vector flux) -> double
        """
        return _bilininteg.ElasticityIntegrator_ComputeFluxEnergy(self, fluxelem, Trans, flux, d_energy)

    __swig_destroy__ = _bilininteg.delete_ElasticityIntegrator
    __del__ = lambda self: None
ElasticityIntegrator_swigregister = _bilininteg.ElasticityIntegrator_swigregister
ElasticityIntegrator_swigregister(ElasticityIntegrator)

class DGTraceIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::DGTraceIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGTraceIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGTraceIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::DGTraceIntegrator self, VectorCoefficient _u, double a, double b) -> DGTraceIntegrator
        __init__(mfem::DGTraceIntegrator self, Coefficient _rho, VectorCoefficient _u, double a, double b) -> DGTraceIntegrator
        """
        this = _bilininteg.new_DGTraceIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleFaceMatrix(self, *args):
        """
        AssembleFaceMatrix(DGTraceIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(DGTraceIntegrator self, FiniteElement trial_face_fe, FiniteElement test_fe1, FiniteElement test_fe2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(DGTraceIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        """
        return _bilininteg.DGTraceIntegrator_AssembleFaceMatrix(self, *args)

    __swig_destroy__ = _bilininteg.delete_DGTraceIntegrator
    __del__ = lambda self: None
DGTraceIntegrator_swigregister = _bilininteg.DGTraceIntegrator_swigregister
DGTraceIntegrator_swigregister(DGTraceIntegrator)

class DGDiffusionIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::DGDiffusionIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGDiffusionIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGDiffusionIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::DGDiffusionIntegrator self, double const s, double const k) -> DGDiffusionIntegrator
        __init__(mfem::DGDiffusionIntegrator self, Coefficient q, double const s, double const k) -> DGDiffusionIntegrator
        __init__(mfem::DGDiffusionIntegrator self, MatrixCoefficient q, double const s, double const k) -> DGDiffusionIntegrator
        """
        this = _bilininteg.new_DGDiffusionIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleFaceMatrix(self, *args):
        """
        AssembleFaceMatrix(DGDiffusionIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(DGDiffusionIntegrator self, FiniteElement trial_face_fe, FiniteElement test_fe1, FiniteElement test_fe2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(DGDiffusionIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        """
        return _bilininteg.DGDiffusionIntegrator_AssembleFaceMatrix(self, *args)

    __swig_destroy__ = _bilininteg.delete_DGDiffusionIntegrator
    __del__ = lambda self: None
DGDiffusionIntegrator_swigregister = _bilininteg.DGDiffusionIntegrator_swigregister
DGDiffusionIntegrator_swigregister(DGDiffusionIntegrator)

class DGElasticityIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::DGElasticityIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DGElasticityIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DGElasticityIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mfem::DGElasticityIntegrator self, double alpha_, double kappa_) -> DGElasticityIntegrator
        __init__(mfem::DGElasticityIntegrator self, Coefficient lambda_, Coefficient mu_, double alpha_, double kappa_) -> DGElasticityIntegrator
        """
        this = _bilininteg.new_DGElasticityIntegrator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleFaceMatrix(self, *args):
        """
        AssembleFaceMatrix(DGElasticityIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(DGElasticityIntegrator self, FiniteElement trial_face_fe, FiniteElement test_fe1, FiniteElement test_fe2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(DGElasticityIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        """
        return _bilininteg.DGElasticityIntegrator_AssembleFaceMatrix(self, *args)

    __swig_destroy__ = _bilininteg.delete_DGElasticityIntegrator
    __del__ = lambda self: None
DGElasticityIntegrator_swigregister = _bilininteg.DGElasticityIntegrator_swigregister
DGElasticityIntegrator_swigregister(DGElasticityIntegrator)

class TraceJumpIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::TraceJumpIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TraceJumpIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TraceJumpIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::TraceJumpIntegrator self) -> TraceJumpIntegrator"""
        this = _bilininteg.new_TraceJumpIntegrator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleFaceMatrix(self, *args):
        """
        AssembleFaceMatrix(TraceJumpIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(TraceJumpIntegrator self, FiniteElement trial_face_fe, FiniteElement test_fe1, FiniteElement test_fe2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(TraceJumpIntegrator self, FiniteElement trial_face_fe, FiniteElement test_fe1, FiniteElement test_fe2, FaceElementTransformations Trans, DenseMatrix elmat)
        """
        return _bilininteg.TraceJumpIntegrator_AssembleFaceMatrix(self, *args)

    __swig_destroy__ = _bilininteg.delete_TraceJumpIntegrator
    __del__ = lambda self: None
TraceJumpIntegrator_swigregister = _bilininteg.TraceJumpIntegrator_swigregister
TraceJumpIntegrator_swigregister(TraceJumpIntegrator)

class NormalTraceJumpIntegrator(BilinearFormIntegrator):
    """Proxy of C++ mfem::NormalTraceJumpIntegrator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalTraceJumpIntegrator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalTraceJumpIntegrator, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::NormalTraceJumpIntegrator self) -> NormalTraceJumpIntegrator"""
        this = _bilininteg.new_NormalTraceJumpIntegrator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleFaceMatrix(self, *args):
        """
        AssembleFaceMatrix(NormalTraceJumpIntegrator self, FiniteElement el1, FiniteElement el2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(NormalTraceJumpIntegrator self, FiniteElement trial_face_fe, FiniteElement test_fe1, FiniteElement test_fe2, FaceElementTransformations Trans, DenseMatrix elmat)
        AssembleFaceMatrix(NormalTraceJumpIntegrator self, FiniteElement trial_face_fe, FiniteElement test_fe1, FiniteElement test_fe2, FaceElementTransformations Trans, DenseMatrix elmat)
        """
        return _bilininteg.NormalTraceJumpIntegrator_AssembleFaceMatrix(self, *args)

    __swig_destroy__ = _bilininteg.delete_NormalTraceJumpIntegrator
    __del__ = lambda self: None
NormalTraceJumpIntegrator_swigregister = _bilininteg.NormalTraceJumpIntegrator_swigregister
NormalTraceJumpIntegrator_swigregister(NormalTraceJumpIntegrator)

class DiscreteInterpolator(BilinearFormIntegrator):
    """Proxy of C++ mfem::DiscreteInterpolator class."""

    __swig_setmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscreteInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [BilinearFormIntegrator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscreteInterpolator, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mfem::DiscreteInterpolator self) -> DiscreteInterpolator"""
        this = _bilininteg.new_DiscreteInterpolator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_DiscreteInterpolator
    __del__ = lambda self: None
DiscreteInterpolator_swigregister = _bilininteg.DiscreteInterpolator_swigregister
DiscreteInterpolator_swigregister(DiscreteInterpolator)

class GradientInterpolator(DiscreteInterpolator):
    """Proxy of C++ mfem::GradientInterpolator class."""

    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GradientInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GradientInterpolator, name)
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, h1_fe, nd_fe, Trans, elmat):
        """AssembleElementMatrix2(GradientInterpolator self, FiniteElement h1_fe, FiniteElement nd_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.GradientInterpolator_AssembleElementMatrix2(self, h1_fe, nd_fe, Trans, elmat)


    def __init__(self):
        """__init__(mfem::GradientInterpolator self) -> GradientInterpolator"""
        this = _bilininteg.new_GradientInterpolator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_GradientInterpolator
    __del__ = lambda self: None
GradientInterpolator_swigregister = _bilininteg.GradientInterpolator_swigregister
GradientInterpolator_swigregister(GradientInterpolator)

class IdentityInterpolator(DiscreteInterpolator):
    """Proxy of C++ mfem::IdentityInterpolator class."""

    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdentityInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdentityInterpolator, name)
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat):
        """AssembleElementMatrix2(IdentityInterpolator self, FiniteElement dom_fe, FiniteElement ran_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.IdentityInterpolator_AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat)


    def __init__(self):
        """__init__(mfem::IdentityInterpolator self) -> IdentityInterpolator"""
        this = _bilininteg.new_IdentityInterpolator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_IdentityInterpolator
    __del__ = lambda self: None
IdentityInterpolator_swigregister = _bilininteg.IdentityInterpolator_swigregister
IdentityInterpolator_swigregister(IdentityInterpolator)

class CurlInterpolator(DiscreteInterpolator):
    """Proxy of C++ mfem::CurlInterpolator class."""

    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurlInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurlInterpolator, name)
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat):
        """AssembleElementMatrix2(CurlInterpolator self, FiniteElement dom_fe, FiniteElement ran_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.CurlInterpolator_AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat)


    def __init__(self):
        """__init__(mfem::CurlInterpolator self) -> CurlInterpolator"""
        this = _bilininteg.new_CurlInterpolator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_CurlInterpolator
    __del__ = lambda self: None
CurlInterpolator_swigregister = _bilininteg.CurlInterpolator_swigregister
CurlInterpolator_swigregister(CurlInterpolator)

class DivergenceInterpolator(DiscreteInterpolator):
    """Proxy of C++ mfem::DivergenceInterpolator class."""

    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DivergenceInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DivergenceInterpolator, name)
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat):
        """AssembleElementMatrix2(DivergenceInterpolator self, FiniteElement dom_fe, FiniteElement ran_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.DivergenceInterpolator_AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat)


    def __init__(self):
        """__init__(mfem::DivergenceInterpolator self) -> DivergenceInterpolator"""
        this = _bilininteg.new_DivergenceInterpolator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_DivergenceInterpolator
    __del__ = lambda self: None
DivergenceInterpolator_swigregister = _bilininteg.DivergenceInterpolator_swigregister
DivergenceInterpolator_swigregister(DivergenceInterpolator)

class NormalInterpolator(DiscreteInterpolator):
    """Proxy of C++ mfem::NormalInterpolator class."""

    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalInterpolator, name)
    __repr__ = _swig_repr

    def AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat):
        """AssembleElementMatrix2(NormalInterpolator self, FiniteElement dom_fe, FiniteElement ran_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.NormalInterpolator_AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat)


    def __init__(self):
        """__init__(mfem::NormalInterpolator self) -> NormalInterpolator"""
        this = _bilininteg.new_NormalInterpolator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bilininteg.delete_NormalInterpolator
    __del__ = lambda self: None
NormalInterpolator_swigregister = _bilininteg.NormalInterpolator_swigregister
NormalInterpolator_swigregister(NormalInterpolator)

class ScalarProductInterpolator(DiscreteInterpolator):
    """Proxy of C++ mfem::ScalarProductInterpolator class."""

    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarProductInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarProductInterpolator, name)
    __repr__ = _swig_repr

    def __init__(self, sc):
        """__init__(mfem::ScalarProductInterpolator self, Coefficient sc) -> ScalarProductInterpolator"""
        this = _bilininteg.new_ScalarProductInterpolator(sc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat):
        """AssembleElementMatrix2(ScalarProductInterpolator self, FiniteElement dom_fe, FiniteElement ran_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.ScalarProductInterpolator_AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_ScalarProductInterpolator
    __del__ = lambda self: None
ScalarProductInterpolator_swigregister = _bilininteg.ScalarProductInterpolator_swigregister
ScalarProductInterpolator_swigregister(ScalarProductInterpolator)

class ScalarVectorProductInterpolator(DiscreteInterpolator):
    """Proxy of C++ mfem::ScalarVectorProductInterpolator class."""

    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScalarVectorProductInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScalarVectorProductInterpolator, name)
    __repr__ = _swig_repr

    def __init__(self, sc):
        """__init__(mfem::ScalarVectorProductInterpolator self, Coefficient sc) -> ScalarVectorProductInterpolator"""
        this = _bilininteg.new_ScalarVectorProductInterpolator(sc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat):
        """AssembleElementMatrix2(ScalarVectorProductInterpolator self, FiniteElement dom_fe, FiniteElement ran_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.ScalarVectorProductInterpolator_AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_ScalarVectorProductInterpolator
    __del__ = lambda self: None
ScalarVectorProductInterpolator_swigregister = _bilininteg.ScalarVectorProductInterpolator_swigregister
ScalarVectorProductInterpolator_swigregister(ScalarVectorProductInterpolator)

class VectorScalarProductInterpolator(DiscreteInterpolator):
    """Proxy of C++ mfem::VectorScalarProductInterpolator class."""

    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorScalarProductInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorScalarProductInterpolator, name)
    __repr__ = _swig_repr

    def __init__(self, vc):
        """__init__(mfem::VectorScalarProductInterpolator self, VectorCoefficient vc) -> VectorScalarProductInterpolator"""
        this = _bilininteg.new_VectorScalarProductInterpolator(vc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat):
        """AssembleElementMatrix2(VectorScalarProductInterpolator self, FiniteElement dom_fe, FiniteElement ran_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorScalarProductInterpolator_AssembleElementMatrix2(self, dom_fe, ran_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_VectorScalarProductInterpolator
    __del__ = lambda self: None
VectorScalarProductInterpolator_swigregister = _bilininteg.VectorScalarProductInterpolator_swigregister
VectorScalarProductInterpolator_swigregister(VectorScalarProductInterpolator)

class VectorCrossProductInterpolator(DiscreteInterpolator):
    """Proxy of C++ mfem::VectorCrossProductInterpolator class."""

    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorCrossProductInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorCrossProductInterpolator, name)
    __repr__ = _swig_repr

    def __init__(self, vc):
        """__init__(mfem::VectorCrossProductInterpolator self, VectorCoefficient vc) -> VectorCrossProductInterpolator"""
        this = _bilininteg.new_VectorCrossProductInterpolator(vc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix2(self, nd_fe, rt_fe, Trans, elmat):
        """AssembleElementMatrix2(VectorCrossProductInterpolator self, FiniteElement nd_fe, FiniteElement rt_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorCrossProductInterpolator_AssembleElementMatrix2(self, nd_fe, rt_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_VectorCrossProductInterpolator
    __del__ = lambda self: None
VectorCrossProductInterpolator_swigregister = _bilininteg.VectorCrossProductInterpolator_swigregister
VectorCrossProductInterpolator_swigregister(VectorCrossProductInterpolator)

class VectorInnerProductInterpolator(DiscreteInterpolator):
    """Proxy of C++ mfem::VectorInnerProductInterpolator class."""

    __swig_setmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInnerProductInterpolator, name, value)
    __swig_getmethods__ = {}
    for _s in [DiscreteInterpolator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInnerProductInterpolator, name)
    __repr__ = _swig_repr

    def __init__(self, vc):
        """__init__(mfem::VectorInnerProductInterpolator self, VectorCoefficient vc) -> VectorInnerProductInterpolator"""
        this = _bilininteg.new_VectorInnerProductInterpolator(vc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AssembleElementMatrix2(self, rt_fe, l2_fe, Trans, elmat):
        """AssembleElementMatrix2(VectorInnerProductInterpolator self, FiniteElement rt_fe, FiniteElement l2_fe, ElementTransformation Trans, DenseMatrix elmat)"""
        return _bilininteg.VectorInnerProductInterpolator_AssembleElementMatrix2(self, rt_fe, l2_fe, Trans, elmat)

    __swig_destroy__ = _bilininteg.delete_VectorInnerProductInterpolator
    __del__ = lambda self: None
VectorInnerProductInterpolator_swigregister = _bilininteg.VectorInnerProductInterpolator_swigregister
VectorInnerProductInterpolator_swigregister(VectorInnerProductInterpolator)

# This file is compatible with both classic and new-style classes.


