# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_eltrans', [dirname(__file__)])
        except ImportError:
            import _eltrans
            return _eltrans
        if fp is not None:
            try:
                _mod = imp.load_module('_eltrans', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _eltrans = swig_import_helper()
    del swig_import_helper
else:
    import _eltrans
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except Exception:
    weakref_proxy = lambda x: x


import array
import ostream_typemap
import vector
import densemat
import operators
import matrix
import fe
import intrules
import sparsemat
class ElementTransformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ElementTransformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ElementTransformation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["Attribute"] = _eltrans.ElementTransformation_Attribute_set
    __swig_getmethods__["Attribute"] = _eltrans.ElementTransformation_Attribute_get
    if _newclass:
        Attribute = _swig_property(_eltrans.ElementTransformation_Attribute_get, _eltrans.ElementTransformation_Attribute_set)
    __swig_setmethods__["ElementNo"] = _eltrans.ElementTransformation_ElementNo_set
    __swig_getmethods__["ElementNo"] = _eltrans.ElementTransformation_ElementNo_get
    if _newclass:
        ElementNo = _swig_property(_eltrans.ElementTransformation_ElementNo_get, _eltrans.ElementTransformation_ElementNo_set)

    def SetIntPoint(self, ip):
        return _eltrans.ElementTransformation_SetIntPoint(self, ip)

    def GetIntPoint(self):
        return _eltrans.ElementTransformation_GetIntPoint(self)

    def Transform(self, *args):
        from .vector import Vector
        from .intrules import IntegrationPoint
        if isinstance(args[0], IntegrationPoint):
            vec = Vector()
            _eltrans.ElementTransformation_Transform(self, args[0], vec)
            vec.thisown = 0      
            return vec.GetDataArray()
        else:
            return _eltrans.ElementTransformation_Transform(self, *args)



    def Jacobian(self):
        return _eltrans.ElementTransformation_Jacobian(self)

    def Weight(self):
        return _eltrans.ElementTransformation_Weight(self)

    def AdjugateJacobian(self):
        return _eltrans.ElementTransformation_AdjugateJacobian(self)

    def InverseJacobian(self):
        return _eltrans.ElementTransformation_InverseJacobian(self)

    def Order(self):
        return _eltrans.ElementTransformation_Order(self)

    def OrderJ(self):
        return _eltrans.ElementTransformation_OrderJ(self)

    def OrderW(self):
        return _eltrans.ElementTransformation_OrderW(self)

    def OrderGrad(self, fe):
        return _eltrans.ElementTransformation_OrderGrad(self, fe)

    def GetSpaceDim(self):
        return _eltrans.ElementTransformation_GetSpaceDim(self)

    def TransformBack(self, arg2, arg3):
        return _eltrans.ElementTransformation_TransformBack(self, arg2, arg3)
    __swig_destroy__ = _eltrans.delete_ElementTransformation
    __del__ = lambda self: None
ElementTransformation_swigregister = _eltrans.ElementTransformation_swigregister
ElementTransformation_swigregister(ElementTransformation)

class IsoparametricTransformation(ElementTransformation):
    __swig_setmethods__ = {}
    for _s in [ElementTransformation]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsoparametricTransformation, name, value)
    __swig_getmethods__ = {}
    for _s in [ElementTransformation]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsoparametricTransformation, name)
    __repr__ = _swig_repr

    def SetFE(self, FE):
        return _eltrans.IsoparametricTransformation_SetFE(self, FE)

    def GetFE(self):
        return _eltrans.IsoparametricTransformation_GetFE(self)

    def GetPointMat(self):
        return _eltrans.IsoparametricTransformation_GetPointMat(self)

    def SetIdentityTransformation(self, GeomType):
        return _eltrans.IsoparametricTransformation_SetIdentityTransformation(self, GeomType)

    def Transform(self, *args):
        from .vector import Vector
        from .intrules import IntegrationPoint
        if isinstance(args[0], IntegrationPoint):
            vec = Vector()
            _eltrans.ElementTransformation_Transform(self, args[0], vec)
            vec.thisown = 0      
            return vec.GetDataArray()
        else:
            return _eltrans.ElementTransformation_Transform(self, *args)



    def Order(self):
        return _eltrans.IsoparametricTransformation_Order(self)

    def OrderJ(self):
        return _eltrans.IsoparametricTransformation_OrderJ(self)

    def OrderW(self):
        return _eltrans.IsoparametricTransformation_OrderW(self)

    def OrderGrad(self, fe):
        return _eltrans.IsoparametricTransformation_OrderGrad(self, fe)

    def GetSpaceDim(self):
        return _eltrans.IsoparametricTransformation_GetSpaceDim(self)

    def TransformBack(self, arg2, arg3):
        return _eltrans.IsoparametricTransformation_TransformBack(self, arg2, arg3)
    __swig_destroy__ = _eltrans.delete_IsoparametricTransformation
    __del__ = lambda self: None

    def __init__(self):
        this = _eltrans.new_IsoparametricTransformation()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
IsoparametricTransformation_swigregister = _eltrans.IsoparametricTransformation_swigregister
IsoparametricTransformation_swigregister(IsoparametricTransformation)

class IntegrationPointTransformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegrationPointTransformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegrationPointTransformation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Transf"] = _eltrans.IntegrationPointTransformation_Transf_set
    __swig_getmethods__["Transf"] = _eltrans.IntegrationPointTransformation_Transf_get
    if _newclass:
        Transf = _swig_property(_eltrans.IntegrationPointTransformation_Transf_get, _eltrans.IntegrationPointTransformation_Transf_set)

    def Transform(self, *args):
        return _eltrans.IntegrationPointTransformation_Transform(self, *args)

    def __init__(self):
        this = _eltrans.new_IntegrationPointTransformation()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eltrans.delete_IntegrationPointTransformation
    __del__ = lambda self: None
IntegrationPointTransformation_swigregister = _eltrans.IntegrationPointTransformation_swigregister
IntegrationPointTransformation_swigregister(IntegrationPointTransformation)

class FaceElementTransformations(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FaceElementTransformations, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FaceElementTransformations, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Elem1No"] = _eltrans.FaceElementTransformations_Elem1No_set
    __swig_getmethods__["Elem1No"] = _eltrans.FaceElementTransformations_Elem1No_get
    if _newclass:
        Elem1No = _swig_property(_eltrans.FaceElementTransformations_Elem1No_get, _eltrans.FaceElementTransformations_Elem1No_set)
    __swig_setmethods__["Elem2No"] = _eltrans.FaceElementTransformations_Elem2No_set
    __swig_getmethods__["Elem2No"] = _eltrans.FaceElementTransformations_Elem2No_get
    if _newclass:
        Elem2No = _swig_property(_eltrans.FaceElementTransformations_Elem2No_get, _eltrans.FaceElementTransformations_Elem2No_set)
    __swig_setmethods__["FaceGeom"] = _eltrans.FaceElementTransformations_FaceGeom_set
    __swig_getmethods__["FaceGeom"] = _eltrans.FaceElementTransformations_FaceGeom_get
    if _newclass:
        FaceGeom = _swig_property(_eltrans.FaceElementTransformations_FaceGeom_get, _eltrans.FaceElementTransformations_FaceGeom_set)
    __swig_setmethods__["Elem1"] = _eltrans.FaceElementTransformations_Elem1_set
    __swig_getmethods__["Elem1"] = _eltrans.FaceElementTransformations_Elem1_get
    if _newclass:
        Elem1 = _swig_property(_eltrans.FaceElementTransformations_Elem1_get, _eltrans.FaceElementTransformations_Elem1_set)
    __swig_setmethods__["Elem2"] = _eltrans.FaceElementTransformations_Elem2_set
    __swig_getmethods__["Elem2"] = _eltrans.FaceElementTransformations_Elem2_get
    if _newclass:
        Elem2 = _swig_property(_eltrans.FaceElementTransformations_Elem2_get, _eltrans.FaceElementTransformations_Elem2_set)
    __swig_setmethods__["Face"] = _eltrans.FaceElementTransformations_Face_set
    __swig_getmethods__["Face"] = _eltrans.FaceElementTransformations_Face_get
    if _newclass:
        Face = _swig_property(_eltrans.FaceElementTransformations_Face_get, _eltrans.FaceElementTransformations_Face_set)
    __swig_setmethods__["Loc1"] = _eltrans.FaceElementTransformations_Loc1_set
    __swig_getmethods__["Loc1"] = _eltrans.FaceElementTransformations_Loc1_get
    if _newclass:
        Loc1 = _swig_property(_eltrans.FaceElementTransformations_Loc1_get, _eltrans.FaceElementTransformations_Loc1_set)
    __swig_setmethods__["Loc2"] = _eltrans.FaceElementTransformations_Loc2_set
    __swig_getmethods__["Loc2"] = _eltrans.FaceElementTransformations_Loc2_get
    if _newclass:
        Loc2 = _swig_property(_eltrans.FaceElementTransformations_Loc2_get, _eltrans.FaceElementTransformations_Loc2_set)

    def __init__(self):
        this = _eltrans.new_FaceElementTransformations()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _eltrans.delete_FaceElementTransformations
    __del__ = lambda self: None
FaceElementTransformations_swigregister = _eltrans.FaceElementTransformations_swigregister
FaceElementTransformations_swigregister(FaceElementTransformations)

# This file is compatible with both classic and new-style classes.


