#!/usr/bin/env python

"""
setup.py file for SWIG example
"""
from distutils.core import setup, Extension
import os
from os.path import expanduser

from distutils.core import *
from distutils      import sysconfig

import numpy
try:
    numpy_include = numpy.get_include()
except AttributeError:
     numpy_include = numpy.get_numpy_include()

home = expanduser("~")
mfem_dir = os.path.join(home, 'mfem-3.1')+'/'
mfem_lib ='mfem'

vertex_module = Extension('_vertex',
                        sources=['vertex_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])

table_module = Extension('_table',
                        sources=['table_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])

element_module = Extension('_element',
                        sources=['element_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])

coefficient_module = Extension('_coefficient',
                        sources=['coefficient_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
fe_module = Extension('_fe',
#                        sources=['mesh_wrap.cxx', 'mesh.cpp'],
                        sources=['fe_wrap.cxx'],
                        include_dirs=[mfem_dir],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
mesh_module = Extension('_mesh',
#                        sources=['mesh_wrap.cxx', 'mesh.cpp'],
                        sources=['mesh_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
fespace_module = Extension('_fespace',
                        sources=['fespace_wrap.cxx'],
                        include_dirs=[mfem_dir],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
fe_coll_module = Extension('_fe_coll',
                        sources=['fe_coll_wrap.cxx'],
                        include_dirs=[mfem_dir],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
array_module = Extension('_array',
                        sources=['array_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
linearform_module = Extension('_linearform',
                        sources=['linearform_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
lininteg_module = Extension('_lininteg',
                        sources=['lininteg_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
vector_module = Extension('_vector',
                        sources=['vector_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
gridfunc_module = Extension('_gridfunc',
                        sources=['gridfunc_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
bilinearform_module = Extension('_bilinearform',
                        sources=['bilinearform_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
bilininteg_module = Extension('_bilininteg',
                        sources=['bilininteg_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
intrules_module = Extension('_intrules',
                        sources=['intrules_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
sparsemat_module = Extension('_sparsemat',
                        sources=['sparsemat_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
densemat_module = Extension('_densemat',
                        sources=['densemat_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
solvers_module = Extension('_solvers',
                        sources=['solvers_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
sparsesmoothers_module = Extension('_sparsesmoothers',
                        sources=['sparsesmoothers_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
matrix_module = Extension('_matrix',
                        sources=['matrix_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
operators_module = Extension('_operators',
                        sources=['operators_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
ncmesh_module = Extension('_ncmesh',
                        sources=['ncmesh_wrap.cxx'],
                        include_dirs=[mfem_dir],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
eltrans_module = Extension('_eltrans',
                        sources=['eltrans_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])
geom_module = Extension('_geom',
                        sources=['geom_wrap.cxx'],
                        include_dirs=[mfem_dir, numpy_include],
                        library_dirs=[mfem_dir],
                        libraries=[mfem_lib])


setup (name = 'mfem',
       version = '0.1',
       author      = "S.Shiraiwa",
       description = """MFEM wrapper""",
       ext_modules = [vertex_module, element_module, table_module,
                      fe_module,mesh_module, fespace_module,
                      array_module,fe_coll_module,
                      coefficient_module, linearform_module,
                      vector_module,
                      lininteg_module, gridfunc_module,
                      bilinearform_module,
                      bilininteg_module,
                      intrules_module, sparsemat_module, densemat_module,
                      solvers_module, sparsesmoothers_module,
                      matrix_module, operators_module,
                      ncmesh_module, eltrans_module, geom_module,
                      ],
       py_modules = ["vertex", "element", "table", "fe", "mesh", "fespace", "array",
                     "fe_col", "coefficient",
                     "linearform", "vector", "lininteg",
                     "gridfunc", "bilinearform",
                     "bilininteg", "intrules", "sparsemat", "densemat",
                     "solvers", "sparsesmoothers_module",
                     "matrix", "operators", "ncmesh", "eltrans", "geom"]
       )
